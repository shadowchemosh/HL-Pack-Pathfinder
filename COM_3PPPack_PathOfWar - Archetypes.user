<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_3PPPack_PathOfWar - Archetypes"/>
  <thing id="arPWHwkgrd" name="Hawkguard" description="Not all warders are comfortable with a sword and shield, but take their role as a defender no less seriously. While not as robust in the realm of melee combat, the hawkguard takes his skills to a preternatural extreme, being able to defend as well as a stout shield with a bow and quiver, a trusty crossbow, or a bandolier of throwing weapons." compset="ClassVary" uniqueness="unique">
    <fieldval field="srcPageNum" value="128"/>
    <usesource source="srcPathOfW"/>
    <tag group="fDisable" tag="fArmShield" name="Shield Proficiency" abbrev="Shield Proficiency"/>
    <tag group="fDisable" tag="fArmTower" name="Tower Shield Proficiency" abbrev="Tower Shield Proficiency"/>
    <tag group="ClVaryName" tag="AppParen" name="Append (in Parentheses)" abbrev="Append (in Parentheses)"/>
    <tag group="AbReplace" tag="cPW3ImpDF"/>
    <tag group="AbModify" tag="cPW3DefFoc"/>
    <tag group="AbReplace" tag="cPW3ExtDef"/>
    <tag group="AbReplace" tag="cPW3AdpTac"/>
    <tag group="ClassSkill" tag="skPercep"/>
    <tag group="NotClassSk" tag="skSurvival"/>
    <tag group="fDisable" tag="fArmHeavy"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <bootstrap thing="cPW3EvsRef">
      <autotag group="ClSpecWhen" tag="7"/>
      </bootstrap>
    <bootstrap thing="cPW3DefSky">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW3DefSky">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cPW3DefSky">
      <autotag group="ClSpecWhen" tag="11"/>
      </bootstrap>
    <bootstrap thing="cPW3DefSky">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cPW3DefSky">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cPW3CCArch">
      <autotag group="ClSpecWhen" tag="3"/>
      </bootstrap>
    <bootstrap thing="cPW3RnDfFc">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW3ArcTrn">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW3"/>
    <eval phase="First" priority="4000"><![CDATA[
      ~ Grant access to Solar Wind discipline
      perform hero.child[mHelpPW3].assign[Discipline.SolarWind]

      ~ 11/23/2016 - Changed the timing to First/4000 to be before
      ~ the adjustments/Feats that can add a disipline to a class.
      ~ In addition I removed the whole "counting" check first and
      ~ simply removed the PrimalFury discipline.
      perform hero.child[mHelpPW3].delete[Discipline.PrimalFury]]]></eval>
    </thing>
  <thing id="cPW3RnDfFc" name="Ranged Defensive Focus" description="The hawkguard is a deadly opponent as he focuses on protecting his allies and himself while planning his next moves. This functions as the normal warder defensive focus, except for the following changes. When taking a full-round action to recover maneuvers the warder threatens an area within 15 ft. of himself, except for adjacent squares. The bowman threatens this space only if he's wielding a ranged weapon, and may make attacks of opportunity with ranged weapons as long as Ranged Defensive Focus is active. This modifies and changes the warder's defensive focus class feature." compset="ClSpecial" summary="Threaten 15-ft area and make AoO&apos;s with a ranged weapon">
    <fieldval field="abDuration" value="1"/>
    <fieldval field="abValue" value="15"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="FullRd"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="User" tag="Activation"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Remove activation checkbox for vanilla Defensive Focus
      perform hero.child[cPW3DefFoc].delete[User.Activation]
      perform hero.child[cPW3DefFoc].assign[Hide.Activation]]]></eval>
    <eval phase="Final" priority="10010" index="2"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)
      doneif (field[abilActive].value <> 1)

      ~ Set reach
      herofield[tReach].value = field[abValue].value]]></eval>
    </thing>
  <thing id="cPW3ArcTrn" name="Archer Training" description="With the exhaustive training that hawkguards undergo, the hawkguard becomes a skilled ranged combatant who specializes in the use of a branch of ranged weaponry. She may select one ranged weapon to be her favored. When wielding this weapon, she does not suffer a penalty to hit for wearing a buckler and retains her shield bonus to AC even when using that arm to attack with her chosen weapon. The hawkguard also gains Point Blank Shot as a bonus feat." compset="ClSpecial" summary="No penalty for using a buckler with your favored weapon, gain Point-Blank Shot">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="None"/>
    <tag group="fShowWhat" tag="WeaponsRan"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <bootstrap thing="fPointBlnk">
      <autotag group="thing" tag="skipprereq"/>
      </bootstrap>
    <eval phase="Final" priority="10010"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ If we haven't chosen anything, get out now
      doneif (field[usrChosen1].ischosen + tagis[Target.?] = 0)

      var id as string
      id = field[usrChosen1].chosen.idstring
      perform field[usrChosen1].chosen.forward[WepProf.?]
      foreach pick in hero where "IsWeapon." & id
        ~perform eachpick.assign[Broadcast.WepProf]
        eachpick.field[wBucklPen].value = 0
      nexteach]]></eval>
    </thing>
  <thing id="cPW3CCArch" name="Close Combat Archery" description="At 3rd level, the hawkguard no longer provokes attacks of opportunity when firing or reloading his favored weapon while threatened in melee combat. When using his ranged defensive focus ability, he may now attack foes in adjacent spaces to himself. This replaces the improved defensive focus class feature." compset="ClSpecial" summary="No AoO for using favored weapon, can attack adjacent foes in Defensive Focus">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="cPW3DefSky" name="Defending the Sky" description="Upon reaching 5th level, the hawkguard becomes increasingly adept at protecting his allies from harm. Once per day he is capable of extending the use of his counters to react to multiple attacks. Any counter that the hawkguard possesses that has a duration of instant instead has a duration of 1 round. He may then use this counter against any attack targeting an allied creature that it could normally be used to repel. Every three levels beyond this (8th, 11th, 14th, and 17th levels) he may use this ability an additional time per day. This ability replaces the extended defense class feature." compset="ClSpecial" summary="Use a counter that protects allies for 1 full round">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Usage" tag="Day"/>
    <tag group="User" tag="Tracker"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & field[xIndex].value & "/day"

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)
      ~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value
      field[trkMax].value = field[abValue].value
      field[livename].text = field[thingname].text & " " & field[abValue].value & "/day"]]></eval>
    </thing>
  <thing id="cPW3EvsRef" name="Evasive Reflexes" description="At 7th level the hawkguard gains evasion (see the rogue class feature). As an immediate action, he may lose the benefits of the evasion ability for one round and grant it to an ally for one round. This replaces the adaptive tactics class feature." compset="ClSpecial" summary="Gain Evasion, and can grant it to another for a round">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="None"/>
    <tag group="DescInfo" tag="cEvasion"/>
    </thing>
  <thing id="arPWSwrPrt" name="Sworn Protector" description="Some warders take up the defense of a sole person, and protect them above all others. Be they hired, inspired, or simply forced into it, a sworn protector warder is known for devotion and service to their chosen ward. These sworn protectors are highly valued, as they are quite skilled and effective at deterring threats." compset="ClassVary" uniqueness="unique">
    <fieldval field="srcPageNum" value="129"/>
    <arrayval field="cvBonFtMod" index="12" value="2"/>
    <arrayval field="cvBonFtMod" index="17" value="3"/>
    <arrayval field="cvBonFtMod" index="7" value="1"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbReplace" tag="cPW3Aegis"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="cPW3Grdshp">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW3Grdshp">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cPW3Grdshp">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <bootstrap thing="cPW3Grdshp">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cPW3DefInt">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW3ShrCnt">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW3Grdshp">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW3"/>
    </thing>
  <thing id="cPW3Grdshp" name="Guardianship" description="At 1st level, the sworn protector may select a ward, a person whom she must protect no matter what the cost. When in combat and the sworn protector's ward is within 10ft of their ward's position, the ward gains a +1 morale bonus to their AC and savings throws. This bonus increases by +1 at 5th level, and every four levels after that (9th, 13th, and 17th level). Additionally, the sworn protector may add her guardianship bonus to her attack and damage rolls as a morale bonus if the ward is within the sworn protector's guardianship range. This radius increases by 10ft at 6th and again at 12th level. A sworn protector may only have one ward at a time at 1st level; they may then select a second ward at 8th level and a 3rd ward at 15th level. To select a ward, the sworn protector must take ten minutes discussing tactics and practicing with his ward so that he may learn how best to protect him, and from there on he practices those tactics when he readies his maneuvers. A sworn protector may dismiss a creature as his ward at anytime as a free action. This augments and replaces the aegis class feature, and if an ability uses the warder's aegis bonus for anything, then substitute with his guardianship bonus instead." compset="ClSpecial" summary="Morale bonus to AC and saves for your ward(s), attack and damage bonus for you">
    <usesource source="srcPathOfW"/>
    <tag group="User" tag="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="LvNameApp" tag="AppValue"/>
    <tag group="LvNameApp" tag="SignAppVal"/>
    <tag group="abRange" tag="Feet"/>
    <tag group="LvNamePar" tag="IncRange"/>
    <tag group="abAction" tag="None"/>
    <eval phase="PostLevel" priority="2050"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ AC/save bonus increases by +1 for each copy of this ability
      field[abValue].value += field[xCount].value
      #value[xPWAegis] += field[abValue].value

      ~ Base radius is 10', but Improved and Greater Aegis each increase that by 10'
      ~ We store the initial range in abValue2 so that Improved and Greater can refer to it for display purposes
      field[abRange].value += hero.child[xPWAegis].field[abRange].value

      ~ 1 ward allowed at 1st level, 2nd at 8th, 3rd at 15th
      field[abValue2].value += 1
      if (field[xTotalLev].value >= 8) then
        field[abValue2].value += 1
      endif
      if (field[xTotalLev].value >= 15) then
        field[abValue2].value += 1
      endif]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ Stop now if we're not activated (before the attack/damage bonus are applied)
      doneif (field[abilActive].value <> 1)

      ~ Add guardianship bonus as a morale bonus to attack and damage
      #applybonus[BonMorale, hero.child[Attack], field[abValue].value]
      #applybonus[BonMorale, hero.child[Damage], field[abValue].value]]]></eval>
    <eval phase="Render" priority="10000" index="3"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Update Specials text
      field[sbName].text = field[thingname].text
      field[abSumm].text = signed(field[abValue].value) & " morale bonus to AC and saves for ward(s) within " & field[abRangText].text

      ~ Update livename with number of wards
      field[livename].text &= " (" & field[abValue2].value & " ward"
      if (field[abValue2].value > 1) then
        field[livename].text &= "s"
      endif
      field[livename].text &= ")"

      ~ Set activation name with range
      field[actName].text = field[sbName].text & ": Ward within " & field[abRangText].text]]></eval>
    </thing>
  <thing id="cPW3DefInt" name="Defensive Intercept" description="With swift speed and trained instincts, a sworn protector is capable of sudden bursts of speed in the defense of a chosen ward. A number of times per day equal to 1 + the sworn protector's Intelligence bonus she may leap to her ward's defense with lightning speed. As an immediate action, the sworn protector moves up to her base speed to a space within 10 ft. of a ward who is being subjected to an attack or effect that would cause harm, to thereby grant her guardianship benefits. This movement is subject to attacks of opportunity. If the sworn protector is too distant to reach her ward, she cannot use this ability." compset="ClSpecial" summary="Move to defend your ward as an immediate action">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="Immediate"/>
    <tag group="User" tag="Tracker"/>
    <tag group="ChargeCalc" tag="AttrUses1"/>
    <tag group="ChargeAttr" tag="aINT"/>
    <tag group="Usage" tag="Day"/>
    </thing>
  <thing id="cPW3ShrCnt" name="Shared Counter" description="At 3rd level, the warder's ability to protect those around him expands to allow him to use readied counters with a range of personal to protect another as long as he is adjacent to their position. If the counter is unsuccessful, then the protected ally must rely on their own defenses. He may use this with no daily limit, but only as often as he has an immediate action to initiate a counter. Additionally, in the defense of a ward she may use her defensive intercept ability as part of the same immediate action to use a shared counter. This ability functions with the Extended Defense class feature. This replaces the bonus feat gained at 3rd level." compset="ClSpecial" summary="Use a personal counter to defend an adjacent ally">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="Immediate"/>
    <tag group="User" tag="Tracker"/>
    <tag group="ChargeCalc" tag="AttrUses1"/>
    <tag group="ChargeAttr" tag="aINT"/>
    <tag group="Usage" tag="Day"/>
    </thing>
  <thing id="arPWZwSent" name="Zweihander Sentinel" description="Some warders recognize a powerful offense is the best defense he can bring. Instead, they eschew shields and focus on utilizing a single two-handed weapon for both offense and defense.\n\n{b}Disciplines:{/b} The warder gains access to the Scarlet Throne discipline and loses access to Broken Blade. Bluff is no longer a class skill; Sense Motive is now a class skill." compset="ClassVary" uniqueness="unique">
    <fieldval field="srcPageNum" value="129"/>
    <usesource source="srcPathOfW"/>
    <tag group="fDisable" tag="fArmTower"/>
    <tag group="ClassSkill" tag="skSenseMot"/>
    <tag group="NotClassSk" tag="skBluff"/>
    <tag group="AbReplace" tag="cPW3ImpAeg"/>
    <tag group="AbReplace" tag="cPW3GrtAeg"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="fDisable" tag="fArmShield"/>
    <bootstrap thing="cPW3ArmShd">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW3PunDef">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW3DefRch">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW3ZwTrn">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW3"/>
    <eval phase="First" priority="4000"><![CDATA[
      ~ Grant access to Scarlet Throne discipline
      perform hero.child[mHelpPW3].assign[Discipline.ScarletThr]

      ~ 11/23/2016 - Changed the timing to First/4000 to be before
      ~ the adjustments/Feats that can add a disipline to a class.
      ~ In addition I removed the whole "counting" check first and
      ~ simply removed the Broken Blade discipline.
      perform hero.child[mHelpPW3].delete[Discipline.BrokenBlad]]]></eval>
    </thing>
  <thing id="cPW3PunDef" name="Punishing Defenses" description="At 12th level, the warder has gained a great deal of skill in using offense as his best defense. When making an attack of opportunity or when making an attack against a foe as part of a counter, he inflicts an additional 2d6 points of damage. This damage is not multiplied if the character scores a successful critical hit. This replaces his greater aegis class feature." compset="ClSpecial" summary="+2d6 damage on AoO&apos;s and counters">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cPW3DefRch" name="Defensive Reach" description="At 6th level, the warder has supreme control over his environment and the use of his weapon to defend himself and his allies. When wielding a non-reach two-handed weapon, the warder increases his reach by five feet for use with attacks of opportunity and counters. When wielding a two-handed reach weapon the warder threatens adjacent enemies and may attack them as though he was not wielding a reach weapon. This replaces his improved aegis class feature." compset="ClSpecial" summary="Gain reach with all 2-hand weapons, can attack and threaten adjacent squares with reach weapons">
    <fieldval field="abValue" value="5"/>
    <usesource source="srcPathOfW"/>
    <tag group="abAction" tag="None"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="10010"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ If we have at least one one-handed or two-handed weapon being wielded in both hands, increase reach
      perform hero.findchild[BaseWep,"Hero.MainHand & Hero.OffHand & (wClass.OneHanded | wClass.TwoHanded)"].setfocus
      doneif (state.isfocus = 0)

      herofield[tReach].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPW3ArmShd" name="Armament Shield" description="When wielding a onehanded weapon in two hands or a two-handed weapon, the weapon is treated as a light shield for the purposes of performing a shield bash attack on an opponent. The warder smashes with the butt of a spear-haft, the pommel of a greatsword, or the broadside of her axe. All are essentially the same and are treated as light shields for the purposes of shield bash attacks or martial maneuvers to be used with a weapon of this type (such as Iron Tortoise maneuvers that require a shield to function)." compset="ClSpecial" summary="Your weapon can bash as a light shield if wielded in two hands">
    <usesource source="srcPathOfW"/>
    <tag group="abAction" tag="None"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="wPWArmShBs">
      <autotag group="Hide" tag="Weapon"/>
      </bootstrap>
    <eval phase="PostLevel" priority="10010"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ This ability explicitly doesn't work with the Phalanx Lancer stance
      doneif (hero.childfound[staPWPhLn1].field[abilActive].value = 1)

      var hide as number
      ~ If we have at least one one-handed or two-handed weapon being wielded
      ~ in both hands, unhide the "Armament Shield Bash" weapon
      perform hero.findchild[BaseWep,"fieldval:wIs2nd = 1 & fieldval:gIsEquip = 1 & (wClass.OneHanded | wClass.TwoHanded)"].setfocus
      doneif (state.isfocus = 0)

      ~ If we found any two/one-handed weapons used in two hands
      ~ then display the our special armament shield
      perform hero.childfound[wPWArmShBs].delete[Hide.Weapon]]]></eval>
    </thing>
  <thing id="cPW3ZwTrn" name="Zweihander Training" description="At 1st level, when wielding a two-handed weapon or a one-handed weapon in both hands, the warder gains a shield bonus to his armor class equal to his aegis class feature bonus." compset="ClSpecial" summary="Gain your Aegis bonus as a shield bonus when using a two-handed weapon">
    <fieldval field="abValue" value="5"/>
    <usesource source="srcPathOfW"/>
    <tag group="abAction" tag="None"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostAttr" priority="10010"><![CDATA[
      ~ If we're not shown or disabled, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ If we have at least one one-handed or two-handed weapon being wielded in both hands, increase reach
      perform hero.findchild[BaseWep,"Hero.MainHand & Hero.OffHand & (wClass.OneHanded | wClass.TwoHanded)"].setfocus
      doneif (state.isfocus = 0)

      ~ If hero is a Sworn Protector, use Guardianship instead of Aegis
      if (hero.tagcount[ClassVary.arPWSwrPrt] <> 0) then
        field[abValue].value = hero.child[cPW3Grdshp].field[abValue].value
      else
        field[abValue].value = hero.child[cPW3Aegis].field[abValue].value
      endif
      #applybonus[tACShield, hero.child[ArmorClass], field[abValue].value]]]></eval>
    </thing>
  <thing id="arPWBnnrmn" name="Bannerman" description="Some warlords find their place in the theater of war when they find the method of combat that best expresses their nature and daring in combat. A bannerman finds his place with a sword in one hand and his company's banner in the other, barking inspirational orders to his allies while slaying his foes between breaths." compset="ClassVary" uniqueness="unique">
    <fieldval field="srcPageNum" value="130"/>
    <arrayval field="cvBonFtMod" index="5" value="-1"/>
    <arrayval field="cvBonFtMod" index="9" value="-1"/>
    <arrayval field="cvBonFtMod" index="13" value="-1"/>
    <arrayval field="cvBonFtMod" index="17" value="-1"/>
    <arrayval field="cvBonFtMod" index="0" value="-1"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbReplace" tag="cPW1DulBoo"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbReplace" tag="cPW1BatPro"/>
    <bootstrap thing="cPWCrgsDef">
      <autotag group="ClSpecWhen" tag="16"/>
      </bootstrap>
    <bootstrap thing="cPWCrgsDef">
      <autotag group="ClSpecWhen" tag="20"/>
      </bootstrap>
    <bootstrap thing="cPW1DipPrs">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cPW1FrPres">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <bootstrap thing="cPW1ComPrs">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cPW1InspBn">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW1InspBn">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW1InspBn">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="cPW1ShrBst">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW1ShrBst">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW1ShrBst">
      <autotag group="ClSpecWhen" tag="18"/>
      </bootstrap>
    <bootstrap thing="cPWCrgsDef">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPWCrgsDef">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cPWCrgsDef">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW1"/>
    </thing>
  <thing id="cPWCrgsDef" name="Courageous Defense" description="The bannerman is a combatant of grace and skill, and his faith in both himself as a symbol as well as in his allies assists his defense. When fighting with a ranged weapon (such as with a bow or a crossbow), or with a one-handed or light weapon in one hand and nothing in the other (or with a buckler and/or an inspiring banner, see below) and wearing medium or lighter armor, the bannerman gains a +1 dodge bonus to his Armor Class per four warlord levels. This replaces the bonus feat gained at 1st level." compset="ClSpecial" summary="Dodge bonus to your Armor Class.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="UseOwnLev" name="UseOwnLev" abbrev="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="SpecType" tag="Defense" name="Defense" abbrev="Defense"/>
    <eval phase="PostAttr" priority="20000"><![CDATA[      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)
      ~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)
      field[abSumm].text = "+" & field[abValue].value  & " dodge bonus to your AC."

      var OK as number
      var numWep as number

      OK = 1
      numWep = 0

      ~ No bonus if we're in heavy armor
      if (hero.tagis[Hero.HeavyArmor] <> 0) then
        OK = 0
      endif

      ~ We should have a single, light or one-handed weapon in one hand and nothing in the other (two-handed ranged weapons are OK)
      foreach pick in hero from BaseWep where "!Hide.Weapon & (Hero.MainHand | Hero.OffHand)"
        if (eachpick.tagis[wCategory.Melee] <> 1) then
          numWep += 1
        elseif (eachpick.tagis[Hero.MainHand] + eachpick.tagis[Hero.OffHand] = 1 ) then
          numWep += 1
        endif
      nexteach

      ~ We should have exactly one weapon
      if (numWep <> 1) then
        OK = 0
      endif

      ~ A buckler is OK, but no other shield
      foreach pick in hero from BaseArmor where "EquipType.Shield & Helper.CurrShield & !ShldClass.Buckler"
        OK = 0
      nexteach

      if (OK = 1) then
         ~ Give dodge bonus to AC
         hero.child[ArmorClass].field[tACDodge].value += field[abValue].value
      else
         perform assign[Helper.SpcDisable]
      endif]]></eval>
    </thing>
  <thing id="cPW2JgKiPl" name="Ki Pool" description="At 1st level, a judge gains a pool of ki points, supernatural energy he can use to accomplish amazing feats. The number of points in the stalker&apos;s ki pool is equal to 1/2 her stalker level + his Wisdom modifier (minimum of 1).Unless listed here, a judge's ki pool abilities are the same as a normal stalker.\n\nAt 1st level, the judge's ki attunes him to the vibrations of falsehood and truths that are uttered by those around him, gaining a +4 insight bonus to Bluff or Sense Motive checks.\n\nAt 5th level, the judge may spend 1 point of ki and attune himself to morality of those around him, gaining the benefits of the see alignment spell for one round per two class levels.\n\nAt 7th level, the judge may spend 1 point from his ki pool to gain a +4 insight bonus on a saving throw as an immediate action.\n\nAt 9th level, the judge can delve into his subconscious in battle and remember key lessons from his training. The judge envisions potential scenarios where martial abilities he has not readied come into play and gains a momentary burst of martial insight. A number of times per day equal to his Wisdom modifier, the character spends one ki point as a swift action to trade an unexpended readied maneuver for a maneuver known of the same level or lower and have it immediately readied and accessible for his use. The character may initiate this maneuver and recover it as if he had prepared at the beginning of the day (or whenever the stalker readied his maneuvers last).\n\nThis augments the stalker ki pool class feature." compset="ClSpecial" summary="You have a ki pool equal to 1/2 your judge level + your WIS modifier.">
    <fieldval field="abValue2" value="4"/>
    <usesource source="srcPathOfW"/>
    <tag group="User" tag="Tracker" name="Modern Action Points" abbrev="Modern Action Points"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abDuration" tag="Constant" name="Constant" abbrev="cons"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <bootstrap thing="aaKiPool"></bootstrap>
    <eval phase="PostLevel" priority="9000"><![CDATA[
      ~ if we're not the first copy, forward our use attribute tag on to the
      ~ first copy
      if (tagis[Helper.FirstCopy] = 0) then
        perform hero.child[cPW2JgKiPl].pushtags[UseAttr.?]
        endif]]></eval>
    <eval phase="PostAttr" priority="10000" index="3"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ our maximum uses is 1/2 our stalker level + WIS bonus
      field[abValue].value = round(field[xAllLev].value/2, 0, -1)
      field[trkMax].value += field[abValue].value

      ~ if we only have one attribute to use, use that
      if (tagunique[UseAttr.?] = 1) then
        field[trkMax].value += hero.findchild[BaseAttr,tagids[UseAttr.?]].field[aModBonus].value
        field[abSumm].text = "You have a ki pool equal to 1/2 your judge level + your " & tagnames[UseAttr.?] & " modifier."
      else
        ~ otherwise, take the text selected by the user, and use that to find
        ~ the matching attribute
        foreach pick in hero from BaseAttr
          if (compare(eachpick.field[name].text,field[usrArray].arraytext[field[usrIndex].value]) = 0) then
            field[trkMax].value += eachpick.field[aModBonus].value
            field[abSumm].text = "You have a ki pool equal to 1/2 your judge level + your " & eachpick.field[name].text & " modifier."
          endif
        nexteach
     endif

      ~ Apply skill bonus from 1st-level ability (does not require ki expenditure unlike the base stalker ability)
      #applybonus[BonInsight, hero.child[skBluff], field[abValue2].value]
      #applybonus[BonInsight, hero.child[skSenseMot], field[abValue2].value]]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ if the use this attribute tag is missing, assume Wisdom
      if (tagunique[UseAttr.?] = 0) then
        perform assign[UseAttr.aWIS]

      ~ if we've only been told there's one attribute to choose from, we'll just
      ~ use that attribute
      elseif (tagunique[UseAttr.?] = 1) then
        ~ do nothing

      ~ search through all the attributes we have tags for, filling each one
      ~ into the next slot of the array-based menu
      else
        ~ if we're using the menu, we don't want the choice to show up in the
        ~ livename
        perform assign[User.NoAutoName]

        var i as number
        i = 0
        foreach pick in hero from BaseAttr where tagids[UseAttr.?,"|"]
          field[usrArray].arraytext[i] = eachpick.field[name].text
          i += 1
          nexteach
        endif]]></eval>
    </thing>
  <thing id="cPW2KSeeAl" name="Ki Pool (See Alignment)" description="At 5th level, the judge may spend 1 point of ki and attune himself to morality of those around him, gaining the benefits of the see alignment spell for one round per two class levels." compset="ClSpecial">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpInfo" tag="spSeeAlig1"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2KiMnRp" name="Ki Pool (Maneuver Replacement)" description="At 9th level, the character can delve into his subconscious in battle and remember key lessons from his training. The character envisions potential scenarios where martial abilities he has not readied come into play and gains a momentary burst of martial insight. A number of times per day equal to his Wisdom modifier, the character spends one ki point as a swift action to trade an unexpended readied maneuver for a maneuver known of the same level or lower and have it immediately readied and accessible for his use. The character may initiate this maneuver and recover it as if he had prepared at the beginning of the day (or whenever the stalker readied his maneuvers last)." compset="ClSpecial" summary="Spend 1 ki to replace a readied manuever as a swift action">
    <usesource source="srcPathOfW"/>
    <tag group="User" tag="Tracker"/>
    <tag group="ChargeCalc" tag="AttrOnly"/>
    <tag group="ChargeAttr" tag="aWIS"/>
    <tag group="Usage" tag="Day"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="Swift"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2Judgmt" name="Judgment" description="Starting at 1st level, a judge can pronounce judgment upon his foes as a swift action. Starting when the judgment is made, the judge receives a bonus or special ability based on the typeof judgment made.\n\nAt 1st level, a judge can use this ability once per day. At 5th level and every four levels thereafter, the judge can use this ability one additional time per day. Once activated, this ability lasts until the combat ends, at which point all of the bonuses immediately end. The judge must participate in the combat to gain these bonuses. If he is frightened, panicked, paralyzed, stunned, unconscious, or otherwise prevented from participating in the combat, the ability does not end, but the bonuses do not resume until he can participate in the combat again.\n\nWhen the judge uses this ability, he must select one type of judgment to make. As a swift action, he can change this judgment to another type." compset="ClSpecial" summary="Variable bonuses increase as the combat continues.">
    <usesource source="srcPathOfW"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="Usage" tag="Day" name="/day" abbrev="/day"/>
    <tag group="User" tag="Tracker" name="Modern Action Points" abbrev="Modern Action Points"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      field[trkMax].value += field[xCount].value

      field[abValue].value += 1]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[
      field[listname].text = "Judgment (" & field[xIndex].value & "/day)"
      field[sbName].text = lowercase(field[thingname].text) & " " & field[trkMax].value & tagnames[Usage.?]]]></eval>
    <evalrule phase="Validation" priority="5000" message="You have too many active Judgment abilities." summary="Too many active Judgments." severity="warning"><![CDATA[
      ~ only run the rest for the first copy
      validif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      validif (tagis[Helper.ShowSpec] = 0)

      validif (hero.tagcount[Custom.ActiveJudg] <= this.field[abValue].value)

      @message = "You have " & hero.tagcount[Custom.ActiveJudg] & " Judgment(s) active, but may only have " & this.field[abValue].value & "."

      hero.panelvalid[inplay] = 0]]></evalrule>
    </thing>
  <thing id="cPW2AvgJdg" name="Avenging Judgment" description="This judgment spurs the judge to seek justice, granting a +1 insight bonus on all attack rolls. This bonus increases by +1 for every five judge levels he possesses. At 10th level, this bonus is doubled on all attack rolls made to confirm critical hits." compset="ClSpecial" summary="Weapon Attack bonus.">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Custom" tag="ActiveJudg" name="Active Judgment" abbrev="Active Judgment"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="Hide" tag="Statblock" name="Statblock" abbrev="Statblock"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="abCategory" tag="InqJud" name="Inquisitor Judgment" abbrev="Inquisitor Judgment"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbReplace" tag="cInqJudgem" name="Judgment" abbrev="Judgment"/>
    <eval phase="Render" priority="10000" index="3"><![CDATA[
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[livename].text = "Avenging Judgment"

      field[livename].text &= " " & signed(field[abValue].value)
      field[sbName].text = field[livename].text]]></eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      field[abValue].value += round(field[xAllLev].value/5,0,-1) + 1

      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ only run the rest if we're activated
      doneif (field[abilActive].value = 0)

      ~ if we're active, tell that to the hero, so we can enforce the
      ~ restriction on the number of judgements active at once
      perform forward[Custom.ActiveJudg]]]>
      <before name="Jurist checks for ActiveJudg"/>
      </eval>
    <eval phase="PostAttr" priority="10000" index="2"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ only run the rest if we're activated
      doneif (field[abilActive].value = 0)

      ~ apply that as a damage bonus
        #applybonus[BonInsight, hero.child[Attack], field[abValue].value]]]></eval>
    </thing>
  <thing id="cPW2BldJdg" name="Bloody Judgment" description="The judge inflicts horrible, bleeding wounds that gush with his deity's rage. After a successful attack upon the target who has been targeted by this judgment, the target suffers 1d6 points of bleed damage on its turn for a number of rounds equal to 1 + the judge's Wisdom modifier (minimum of 1 rounds). Bleed damage can be stopped by a DC 15 Heal skill check or through any magical healing." compset="ClSpecial" summary="Attacks deal 1d6 bleed damage">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="User" tag="Activation"/>
    <tag group="LvNamePar" tag="IncDurati"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

~ Set duration
field[abDuration].value = 1 + #attrmod[aWIS]]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ Add duration to summary text
field[abSumm].text = "Attacks deal 1d6 bleed damage for " & field[abDuraText].text

~ Add duration to listname
field[listname].text = field[thingname].text & " (" & field[abDuraText].text & ")"]]></eval>
    </thing>
  <thing id="cPW2DstJdg" name="Destructive Judgment" description="The judge is filled with divine wrath, gaining a +1 insight bonus on all weapon damage rolls. This bonus increases by +1 for every four judge levels he possesses." compset="ClSpecial" summary="Weapon Damage bonus.">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Custom" tag="ActiveJudg" name="Active Judgment" abbrev="Active Judgment"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="Hide" tag="Statblock" name="Statblock" abbrev="Statblock"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="abCategory" tag="InqJud" name="Inquisitor Judgment" abbrev="Inquisitor Judgment"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbReplace" tag="cInqJudgem" name="Judgment" abbrev="Judgment"/>
    <bootstrap thing="aaJudgDam"></bootstrap>
    <eval phase="Render" priority="10000" index="3"><![CDATA[
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[livename].text &= " " & signed(field[abValue].value)
      field[sbName].text = field[livename].text]]></eval>
    <eval phase="PostAttr" priority="10000" index="2"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ only run the rest if we're activated
      doneif (field[abilActive].value = 0)

      ~ apply that as a damage bonus
      #applybonus[BonInsight, hero.child[Damage], field[abValue].value]]]></eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      field[abValue].value += round(field[xAllLev].value/4,0,-1) + 1

      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ only run the rest if we're activated
      doneif (field[abilActive].value = 0)

      ~ if we're active, tell that to the hero, so we can enforce the
      ~ restriction on the number of judgements active at once
      perform forward[Custom.ActiveJudg]]]>
      <before name="Jurist checks for ActiveJudg"/>
      </eval>
    </thing>
  <thing id="cPW2EndJdg" name="Enduring Judgment" description="This judgment makes the judge resistant to harm, granting DR 1/magic. This DR increases by 1 for every five levels he possesses. At 10th level, this DR changes from magic to an alignment (chaotic, evil, good, or lawful) that is opposite the judge's. If he is neutral, the judge does not receive this increase." compset="ClSpecial" summary="Gain damage reduction">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="User" tag="Activation"/>
    <bootstrap thing="xxDRGooCha"></bootstrap>
    <bootstrap thing="xxDREviCha"></bootstrap>
    <bootstrap thing="xxDREviLaw"></bootstrap>
    <eval phase="Render" priority="10000" index="2"><![CDATA[field[listname].text = field[thingname].text & " DR " & field[abValue].value & field[abText].text

field[livename].text &= " DR " & field[abValue].value & field[abText].text
field[sbName].text = field[livename].text]]></eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

~ DR amount is 1 + 1 per 5 levels
var lvl as number
lvl = field[xAllLev].value
field[abValue].value += round(lvl/5,0,-1) + 1

~ DR/magic below 10th level, after that it's DR/[opposing alignment]
if (lvl < 10) then
  perform hero.childfound[xDamRdMag].setfocus

else
  ~ Change DR to /good or /evil, unless we're neutral
  if (herofield[tGoodVEvil].value = 2) then
    ~ If we're LG, DR is /evil or chaotic
    if (herofield[tLawVChaos].value = 2) then
      perform hero.child[xxDREviCha].setfocus
    ~ If we're CG, DR is /evil or lawful
    elseif (herofield[tLawVChaos].value = 8) then
      perform hero.childfound[xxDREviLaw].setfocus
    ~ If we're NG, DR is /evil
    else
      perform hero.childfound[xDamRdEvil].setfocus
    endif
  elseif (herofield[tGoodVEvil].value = 8) then
    ~ If we're LE, DR is /good or chaotic
    if (herofield[tLawVChaos].value = 2) then
      perform hero.childfound[xxDRGooCha].setfocus
    ~ If we're CE, DR is /good or lawful
    elseif (herofield[tLawVChaos].value = 8) then
      perform hero.childfound[xDamRdGoLa].setfocus
    ~ If we're NE, DR is /good
    else
      perform hero.childfound[xDamRdGood].setfocus
    endif

  ~ If we're LN, DR is /chaotic
  elseif (herofield[tLawVChaos].value = 2) then
    perform hero.childfound[xDamRdChao].setfocus
  ~ If we're CN, DR is /lawful
  elseif (herofield[tLawVChaos].value = 8) then
    perform hero.childfound[xDamRdLaw].setfocus
  ~ Finally, if we're NN, DR is /magic, just as if we were below lvl 10
  else
    perform hero.childfound[xDamRdMag].setfocus
  endif
endif

~ Update text with DR type
field[abText].text = "/" & focus.field[shortname].text

if (field[abilActive].value = 1) then
  focus.field[abValue].value = field[abValue].value
  perform focus.tagreplace[Hide.Special,Helper.ShowSpec]
endif]]></eval>
    </thing>
  <thing id="cPW2GrdJdg" name="Guarded Judgment" description="The judge's senses protect him from the vile taint of his foes, granting a +1 insight bonus on all saving throws. This bonus increases by +1 for every five judge levels he possesses. At 10th level, the bonus is doubled against curses, diseases, and poisons." compset="ClSpecial" summary="Insight bonus to saving throws">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="User" tag="Activation"/>
    <tag group="AbilType" tag="Super"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ If we're not shown, just get out now

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

~ Bonus amount is 1 + 1 per 5 levels
field[abValue].value += round(field[xAllLev].value/5,0,-1) + 1

~ only run the rest if we're activated
doneif (field[abilActive].value = 0)

~ Apply our bonus to saves
#applybonus[BonInsight, hero.child[svAll], field[abValue].value]

~ If level 10 or above, apply extra bonus as a situational
if (field[xAllLev].value >= 10) then
  #situational[hero.childfound[svAll],signed(field[abValue].value) & " vs poison, disease, or curse",field[thingname].text]
endif]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ Set summary text
field[abSumm].text = signed(field[abValue].value) & " insight bonus to saving throws"

field[listname].text = field[thingname].text & " " & signed(field[abValue].value)

field[livename].text &= " " & signed(field[abValue].value)
field[sbName].text = field[livename].text]]></eval>
    </thing>
  <thing id="cPW2UnbJdg" name="Unbreakable Judgment" description="The judge is shielded by a dark haze, gaining 2 points of energy resistance against one energy type (acid, cold, electricity, fire, or sonic) chosen when the judgment is declared. The protection increases by 2 for every four judge levels he possesses." compset="ClSpecial" summary="Gain elemental resistance">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="User" tag="Activation"/>
    <tag group="fShowWhat" tag="Energy"/>
    <bootstrap thing="xxDREviCha"></bootstrap>
    <bootstrap thing="xxDREviLaw"></bootstrap>
    <bootstrap thing="xxDRGooCha"></bootstrap>
    <eval phase="PostLevel" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

~ DR amount is 2 + 2 per 4 levels
var lvl as number
lvl = field[xAllLev].value
field[abValue].value += (round(lvl/4,0,-1) * 2) + 2

~ stop now if we're not activated
doneif (field[abilActive].value = 0)

~ stop now if energy type not chosen
doneif (field[usrChosen1].ischosen = 0)

~ Apply our resistance according to selection
perform field[usrChosen1].chosen.pulltags[BloodEner.?]
if (tagis[BloodEner.Acid] <> 0) then
  #applyresist[xDamRsAcid,field[abValue].value]
elseif (tagis[BloodEner.Cold] <> 0) then
  #applyresist[xDamRsCold,field[abValue].value]
elseif (tagis[BloodEner.Elec] <> 0) then
  #applyresist[xDamRsElec,field[abValue].value]
elseif (tagis[BloodEner.Fire] <> 0) then
  #applyresist[xDamRsFire,field[abValue].value]
elseif (tagis[BloodEner.Sonic] <> 0) then
  #applyresist[xDamRsSoni,field[abValue].value]
endif]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[field[listname].text = field[thingname].text & " " & field[abValue].value

field[livename].text &= " " & field[abValue].value
field[sbName].text = field[livename].text]]></eval>
    </thing>
  <thing id="cPW2UnyJdg" name="Unyielding Judgment" description="The judge is provided flashes of divine protective knowledge, granting a +1 insight bonus to Armor Class. This bonus increases by +1 for every five judge levels he possesses. At 10th level, this bonus is doubled against attack rolls made to confirm critical hits against the judge." compset="ClSpecial" summary="Insight bonus to AC">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="User" tag="Activation"/>
    <bootstrap thing="xxDREviCha"></bootstrap>
    <bootstrap thing="xxDREviLaw"></bootstrap>
    <bootstrap thing="xxDRGooCha"></bootstrap>
    <eval phase="PostLevel" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

~ AC amount is 1 + 1 per 5 levels
var lvl as number
lvl = field[xAllLev].value
field[abValue].value += round(lvl/5,0,-1) + 1

~ only run the rest if we're activated
doneif (field[abilActive].value = 0)

~ Apply bonus as insight bonus to AC
#applybonus[BonInsight, hero.child[ArmorClass], field[abValue].value]

~ Apply extra bonus vs critical confirmation, if 10th level or above
if (field[xAllLev].value >= 10) then
  #situational[hero.childfound[ArmorClass],signed(field[abValue].value) & " vs. critical hit confirmation",field[thingname].text]
endif]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[field[listname].text = field[thingname].text & " " & signed(field[abValue].value)

field[livename].text &= " " & signed(field[abValue].value)
field[sbName].text = field[livename].text]]></eval>
    </thing>
  <thing id="cPW2WrtJdg" name="Wrathful Judgment" description="This judgment bathes the judge's weapons in a divine sheen of deific rage. The judge's weapons count as magic for the purposes of bypassing damage reduction. At 6th level, the judge's weapons also count as one alignment type (chaotic, evil, good, or lawful) for the purpose of bypassing damage reduction. The type selected must match one of the judge's alignments. If the judge is neutral, he does not receive this bonus. At 10th level, the judge's weapons also count as adamantine for the purpose of overcoming damage reduction (but not for reducing hardness)." compset="ClSpecial" summary="Your weapons count as magic for bypassing DR">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Custom" tag="ActiveJudg"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="User" tag="Activation"/>
    <tag group="fShowWhat" tag="AlignMatch"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

field[abText].text = "(Magic"
if (field[xAllLev].value >= 6) then
  field[abText].text &= ", Adamantine"
endif
field[abText].text &= ")"]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[field[listname].text = field[thingname].text & " " & field[abText].text

field[livename].text &= " " & field[abText].text
field[sbName].text = field[livename].text]]></eval>
    </thing>
  <thing id="cPW2JdgDom" name="Domain" description="Like a cleric's deity, a judge's deity influences his alignment, what magic he can perform, and his values. Although not as tied to the tenets of the deity as a cleric, a judge must still hold such guidelines in high regard, despite that fact he can go against them if it serves the greater good of the faith. A judge can select one domain from among those belonging to his deity. He can select an alignment domain only if his alignment matches that domain. With the GM's approval, a judge can be devoted to an ideal instead of a deity, selecting one domain to represent his personal inclination and abilities. The restriction on alignment domains still applies. Judges also have access to Inquisitions, which are similar to Domains but do not include Domain spells. If he so chooses, he may use an inquisition instead of a domain.\n\nEach domain grants a number of domain powers, depending on the level of the judge. A judge does not gain the bonus spells listed for each domain, nor does he gain bonus spell slots. The judge uses his level as his effective cleric level when determining the power and effect of his domain powers. If the judge has access to domains as a cleric or inquisitor, at least one of his domain selections must be the same domain selected as a judge; if he has an inquisition instead of a domain, he may choose two domains as normal. Levels of cleric and judge stack for the purpose of determining domain powers and abilities, but not for bonus spells or for inquisitions unless the inquisition is taken in the place of a domain for the non martial disciple class. This replaces the stalker art gained at 3rd level." compset="ClSpecial" summary="Choose a domain offered by deity">
    <usesource source="srcPathOfW"/>
    <tag group="abRange" tag="Personal"/>
    <tag group="abDuration" tag="Constant"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="arPWJudge" name="Judge" description="Some stalkers find themselves in the service of religious institutions, working side by side with inquisitors and clerics to root out heresy and combat those that oppose their benefactors or orders and do so in the most subtle of ways. By becoming a judge of their religious flock, the stalker takes on some attributes of the inquisitors he works beside." compset="ClassVary" uniqueness="unique">
    <fieldval field="cvSpec2ndS" value="Domain"/>
    <fieldval field="cvSpec2ndN" value="Domains"/>
    <fieldval field="srcPageNum" value="124"/>
    <arrayval field="cvCustSTot" index="2" value="1"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbReplace" tag="cPW2KiPerc"/>
    <tag group="AbReplace" tag="cPW2KiSens"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbReplace" tag="cPW2ImBlnd"/>
    <tag group="AbReplace" tag="cPW2DeadSt"/>
    <tag group="AbReplace" tag="cPW2Blend"/>
    <tag group="Hero" tag="NoAllDom"/>
    <tag group="AbReplace" tag="cPW2KiPool"/>
    <bootstrap thing="cPW2Judgmt">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cPW2AvgJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2BldJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2DstJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2EndJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2GrdJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2UnbJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2UnyJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2WrtJdg">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2JgKiPl">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2KSeeAl">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW2KiMnRp">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cPW2Judgmt">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2Judgmt">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW2Judgmt">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cPW2JdgDom">
      <autotag group="ClSpecWhen" tag="3"/>
      </bootstrap>
    <bootstrap thing="cPW2Trthsk">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW2DivAbl">
      <autotag group="ClSpecWhen" tag="16"/>
      </bootstrap>
    <bootstrap thing="cPW2Judgmt">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW2"/>
    <eval phase="Final" priority="99999999"><![CDATA[
      doneif (islinkage[varies] = 0)

      ~ We must overwrite the tertiary abilities' expression, since we need to make them use primary cleric abilities
      linkage[varies].field[cCstS2Expr].text = "component.BaseClrDom"

~ Filter out any domains that conflict with hero alignment
if (herofield[tGoodVEvil].value = 2) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdEvil"
elseif (herofield[tGoodVEvil].value = 8) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdGood"
endif
if (herofield[tLawVChaos].value = 2) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdChaos"
elseif (herofield[tLawVChaos].value = 8) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdLaw"
endif]]></eval>
    </thing>
  <thing id="cPW2FinJdg" name="Final Judgment" description="A judge with this potent art can bring deadly judgment to foes that are unaware of their impending doom. To attempt to levy final judgment on a target, the judge must first study his target for three full rounds before making the final judgment. On the following round, if the judge initiates a maneuver against the target and the target is denied its Dexterity bonus to AC, the maneuver has the additional effect of possibly killing the target. This attempt automatically fails if the target recognizes the judge as an enemy. If the attack is successful and the target of this attack fails a Fortitude save, it dies. The DC of this save is equal to 10 + 1/2 the judge's level + the judge's Wisdom modifier. If the save is successful, the target still suffers the effects of the maneuver as normal, but it is immune to that judge's final judgment ability for 1 day. The character's judge level must be 15th level or higher to select this art." compset="CustomSpec" summary="Instantly kill an enemy with a maneuver" uniqueness="unique">
    <usesource source="srcPathOfW"/>
    <tag group="abCategory" tag="PWStalkArt"/>
    <tag group="abSave" tag="FortNeg"/>
    <tag group="StandardDC" tag="aWIS"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecSource" tag="arPWJudge"/>
    <exprreq message="Judge level 15 required"><![CDATA[#featlevelcount[PWStalker] >= 15]]></exprreq>
    </thing>
  <thing id="cPW2Trthsk" name="Truthseeker" description="The judge must be able to make swift decisions in his line of work, and by using his ki to feel out disturbances caused by lies in a target's soul. By spending a point of ki as a standard action and clearly viewing a subject within close range, the judge gains the effects of a discern lies spell for a number of rounds equal to his Wisdom modifier. This ability works exactly as the spell in all other respects. This replaces the blending class feature." compset="ClSpecial" summary="Spend 1 ki to cast Discern Lies">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abDuration" tag="Round"/>
    <tag group="abAction" tag="Standard"/>
    <tag group="SpInfo" tag="spDiscLie4"/>
    <tag group="AbilType" tag="SpellLike"/>
    <tag group="LvNamePar" tag="IncDurati"/>
    <tag group="SbNamePar" tag="IncDurati"/>
    <tag group="SpecType" tag="SpellLike"/>
    <bootstrap thing="xxDRGooCha"></bootstrap>
    <bootstrap thing="xxDREviCha"></bootstrap>
    <bootstrap thing="xxDREviLaw"></bootstrap>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)

field[abDuration].value = #attrmod[aWIS]]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ Add duration to listname
field[listname].text = field[thingname].text & " (" & field[abDuraText].text & ")"]]></eval>
    </thing>
  <thing id="cPW2DivAbl" name="Divine Abolishment" description="The strengths of an enemy wither in the face of the judge's divinely mandated execution of his deity's will. When initiating a martial strike while using a judgment, the judge may expend a point of ki from his ki pool to strip away the magical protections of his foe. This functions as a targeted greater dispel magic using his initiator level as his caster level, and this targets spells or spell-like abilities functioning on a target (with a duration of one round or longer), and may target a number of ongoing effects equal to his Wisdom modifier. This replaces the improved blending class feature." compset="ClSpecial" summary="Spend 1 ki to cast Greater Dispel Magic with a maneuver">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="Standard"/>
    <tag group="SpInfo" tag="spDispMag5"/>
    <tag group="AbilType" tag="Super"/>
    <bootstrap thing="xxDREviLaw"></bootstrap>
    <bootstrap thing="xxDRGooCha"></bootstrap>
    <bootstrap thing="xxDREviCha"></bootstrap>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

~ If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="arPWSolHnt" name="Soul Hunter" description="Some stalkers learn that through the practice of more esoteric ki arts, that they are able to track the very essence of a foe, see through the fog of reality and hunt the soul of their targets. These stalkers, known as soul hunters, are well-versed in the methods of hunting and killing their intended targets. By honing their senses farther than any other stalker could, and emulating the hunting methods of hungry spirits and dragons, the soul hunter becomes a foe that is nigh-inescapable.\n\n{b}Maneuvers Readied:{/b} A soul hunter stalker readies his maneuvers as a normal stalker would, but his recovery methods are different. In order for a soul hunter to recover maneuvers, he must either focus on the hunt of his prey or on the memories of past kills as a standard action and recover one expended maneuver. Alternately, the soul hunter may tap into the escaping energy of a soul by using his Soul Claiming ability (see Soul Claiming class feature below), and recover a number of expended maneuvers equal to his Wisdom modifier." compset="ClassVary" uniqueness="unique">
    <fieldval field="cvSpec2ndS" value="Domain"/>
    <fieldval field="cvSpec2ndN" value="Domains"/>
    <fieldval field="srcPageNum" value="126"/>
    <arrayval field="cvCustSTot" index="2" value="1"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbReplace" tag="cPW2KiPerc"/>
    <tag group="AbReplace" tag="cPW2KiSens"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbReplace" tag="cPW2ImBlnd"/>
    <tag group="AbReplace" tag="cPW2DeadSt"/>
    <tag group="AbReplace" tag="cPW2Blend"/>
    <tag group="Hero" tag="NoAllDom"/>
    <tag group="AbReplace" tag="cPW2KiPool"/>
    <tag group="AbReplace" tag="cPW2CmbtI4"/>
    <tag group="AbReplace" tag="cPW2CmbtI1"/>
    <bootstrap thing="cPW2Soulbn">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2Soulbn">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW2Soulbn">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cPW2Soulbn">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <bootstrap thing="cPW2Soulbn">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cPW2SlClm">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2SHKiPl">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW2KiSlbn">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW2KiMnRp">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cPW2CmInSc">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cPW2CIMnRc">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW2StHnt1">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW2StHnt2">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW2"/>
    <eval phase="Final" priority="99999999"><![CDATA[
      doneif (islinkage[varies] = 0)

      ~ We must overwrite the tertiary abilities' expression, since we need to make them use primary cleric abilities
      linkage[varies].field[cCstS2Expr].text = "component.BaseClrDom"

~ Filter out any domains that conflict with hero alignment
if (herofield[tGoodVEvil].value = 2) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdEvil"
elseif (herofield[tGoodVEvil].value = 8) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdGood"
endif
if (herofield[tLawVChaos].value = 2) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdChaos"
elseif (herofield[tLawVChaos].value = 8) then
  linkage[varies].field[cCstS2Expr].text &= " & !HasDomain.cdLaw"
endif]]></eval>
    </thing>
  <thing id="cPW2Soulbn" name="Soulburning" description="When combating his target, the soul hunter can use his ki to cause disharmony within a Claimed creature's very life energy, causing the foe's own ki to erupt into life-destroying energy. Some describe the pain experienced as being the worst that any could endure, like something was inside their very spirit and devouring it whole. When making an attack or initiating a martial maneuver against his Claimed target, the soul hunter may force this subtle disharmony to become a geyser of agony, as the soul hunter's ki causes the target's life energies to ignite. This inflicts an additional 1d6 points of damage at 1st level upon a successful attack, and this damage increases by an additional 1d6 points of damage every four soul hunter levels. Stalker arts that utilize deadly strikes use soulburning instead, and function as written with the following caveat: Soulburning cannot be done against targets that do not have vital forces (this includes constructs, oozes, and undead with an Intelligence score of 0.) This replaces the stalker's deadly strikes ability." compset="ClSpecial" summary="Attacks deal extra damage to Claimed targets">
    <usesource source="srcPathOfW"/>
    <tag group="Helper" tag="UseOwnLev" name="UseOwnLev" abbrev="UseOwnLev"/>
    <tag group="LvNameApp" tag="DieCntVal" name="&quot;field[abValue].value&quot; dY" abbrev="&quot;field[abValue].value&quot; dY"/>
    <tag group="LvNameApp" tag="DieSiz6" name="Xd6" abbrev="Xd6"/>
    <tag group="LvNameApp" tag="SignDieCnt" name="Sign die count" abbrev="Sign die count"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="SbNameApp" tag="DieCntVal" name="&quot;field[abValue].value&quot; dY" abbrev="&quot;field[abValue].value&quot; dY"/>
    <tag group="SbNameApp" tag="DieSiz6" name="Xd6" abbrev="Xd6"/>
    <tag group="SbNameApp" tag="SignDieCnt" name="Sign die count" abbrev="Sign die count"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abDuration" tag="Round" name="Round" abbrev="rd"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ Build list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value) & "d6"

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value += field[xCount].value

      ~ Set the Summary text that only appears on the Specials Tab
      field[abSumm].text = "Attacks deal +" & field[abValue].value & "d6 damage to Claimed targets"

      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      ~ Find all Rogue talents we have and set Sneak Attack Dice
      ~ equal to this ability instead.
      foreach pick in hero from BaseCustSp where "SpecSource.cHelpRog & CustTaken.cHelpPW2"
        eachpick.field[abValue].value += field[abValue].value
      nexteach]]></eval>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2SlClm" name="Soul Claiming" description="A soul hunter is capable of attuning his own ki to a foe's vital energies, making it difficult for quarry to elude or escape him. As a swift action, the soul hunter stalker may Claim a target creature that he has inflicted damage upon. A Claimed target's position is known to the soul hunter, even if they have total concealment against him (though he still suffers the normal miss chance if his target is concealed, and is denied his Dexterity bonus if the Claimed target attacks him). Additionally, the target of his Claiming provokes attacks of opportunity from the soul hunter when using the withdraw action to escape him. A soul hunter may not Claim more than his Wisdom modifier in creatures at any given time; a creature remains Claimed until the soul hunter withdraws his Claim (a free action) or until the target is slain. If the Claimed target is slain (reduced to 0 or fewer hit points) by the Claiming soul hunter, then he may recover his Wisdom modifier in expended maneuvers. A soul hunter may not Claim a target creature with fewer than ½ HD. This replaces the stalker's standard recovery method." compset="ClSpecial">
    <usesource source="srcPathOfW"/>
    <tag group="abAction" tag="Swift"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="AbilType" tag="Super"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2SHKiPl" name="Ki Pool" description="A soul hunter is more in-tune with his own native rhythms so he may better hunt his chosen prey. The soul hunter stalker's base ki pool is increased by 2 additional points of ki at first level. Additionally, the use of his ki pool affords him several other abilities.\n\nAt 5th level, the soul hunter may use his soulburning on Claimed targets within 30 ft. of his position. The stalker spends 1 point of ki as a move action and all Claimed targets suffer his soulburning damage.\n\nAt 7th level, the stalker may spend 1 point from his ki pool to gain a +4 insight bonus on a saving throw as an immediate action.\n\nAt 9th level, the stalker can delve into his subconscious in battle and remember key lessons from his training. The stalker envisions potential scenarios where martial abilities he has not readied come into play and gains a momentary burst of martial insight. A number of times per day equal to his Wisdom modifier, the character spends one ki point as a swift action to trade an unexpended readied maneuver for a maneuver known of the same level or lower and have it immediately readied and accessible for his use. The character may initiate this maneuver and recover it as if he had prepared at the beginning of the day (or whenever the stalker readied his maneuvers last).\n\nThis alters the ki pool class feature of the soul hunter, which otherwise functions identically to a normal stalker." compset="ClSpecial" summary="You have a ki pool equal to 2 + 1/2 your Soul Hunter level + your WIS modifier.">
    <fieldval field="abValue" value="4"/>
    <usesource source="srcPathOfW"/>
    <tag group="User" tag="Tracker" name="Modern Action Points" abbrev="Modern Action Points"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abDuration" tag="Constant" name="Constant" abbrev="cons"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <bootstrap thing="aaKiPool"></bootstrap>
    <eval phase="PostLevel" priority="9000"><![CDATA[
      ~ if we're not the first copy, forward our use attribute tag on to the
      ~ first copy
      if (tagis[Helper.FirstCopy] = 0) then
        perform hero.child[cPW2JgKiPl].pushtags[UseAttr.?]
        endif]]></eval>
    <eval phase="PostAttr" priority="10000" index="3"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ our maximum uses is 2 + 1/2 our stalker level + WIS bonus
      field[abValue].value = 2 + round(field[xAllLev].value/2, 0, -1)
      field[trkMax].value += field[abValue].value

      ~ if we only have one attribute to use, use that
      if (tagunique[UseAttr.?] = 1) then
        field[trkMax].value += hero.findchild[BaseAttr,tagids[UseAttr.?]].field[aModBonus].value
        field[abSumm].text = "You have a ki pool equal to 2 + 1/2 your soul hunter level + your " & tagnames[UseAttr.?] & " modifier."
      else
        ~ otherwise, take the text selected by the user, and use that to find
        ~ the matching attribute
        foreach pick in hero from BaseAttr
          if (compare(eachpick.field[name].text,field[usrArray].arraytext[field[usrIndex].value]) = 0) then
            field[trkMax].value += eachpick.field[aModBonus].value
            field[abSumm].text = "You have a ki pool equal to 2 + 1/2 your soul hunter level + your " & eachpick.field[name].text & " modifier."
            endif
          nexteach
        endif]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ only run the rest for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ if the use this attribute tag is missing, assume Wisdom
      if (tagunique[UseAttr.?] = 0) then
        perform assign[UseAttr.aWIS]

      ~ if we've only been told there's one attribute to choose from, we'll just
      ~ use that attribute
      elseif (tagunique[UseAttr.?] = 1) then
        ~ do nothing

      ~ search through all the attributes we have tags for, filling each one
      ~ into the next slot of the array-based menu
      else
        ~ if we're using the menu, we don't want the choice to show up in the
        ~ livename
        perform assign[User.NoAutoName]

        var i as number
        i = 0
        foreach pick in hero from BaseAttr where tagids[UseAttr.?,"|"]
          field[usrArray].arraytext[i] = eachpick.field[name].text
          i += 1
          nexteach
        endif]]></eval>
    </thing>
  <thing id="cPW2KiSlbn" name="Ki Pool (Soulburn)" description="At 5th level, the soul hunter may use his soulburning on Claimed targets within 30 ft. of his position. The stalker spends 1 point of ki as a move action and all Claimed targets suffer his soulburning damage." compset="ClSpecial" summary="Spend 1 ki to soulburn all Claimed targets within 30 ft">
    <fieldval field="abRange" value="30"/>
    <usesource source="srcPathOfW"/>
    <tag group="abAction" tag="Move"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abRange" tag="Feet"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abSumm].text = "Spend 1 ki to Soulburn all Claimed targets within " & field[abRangText].text]]></eval>
    </thing>
  <thing id="cPW2CmInSc" name="Combat Insight (Scent)" description="At 2nd level, the soul hunter gains the scent special ability, and gains a +4 insight bonus to track targets that the he has Claimed." compset="ClSpecial" summary="Gain scent ability, +4 insight bonus to track Claimed targets">
    <fieldval field="abValue" value="4"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <bootstrap thing="xScent"></bootstrap>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Add situational bonus to Survival skill
      #situational[hero.childfound[skSurvival],signed(field[abValue].value) & " insight bonus to track Claimed targets","Combat Insight"]]]></eval>
    </thing>
  <thing id="cPW2CIMnRc" name="Combat Insight (Maneuver Recovery)" description="At 12th level, whenever the soul hunter reduces a Claimed target to 0 hit points or less, he may recover an expended maneuver." compset="ClSpecial" summary="Recover a maneuver when you kill a Claimed target">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="abAction" tag="None"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2StHnt1" name="Sight of the Hunter (Clairvoyance)" description="The soul hunter learns ways to be able to hunt his prey with his extrasensory abilities. At 6th level, the soul hunter may spend 1 ki and use the spell clairaudience – clairvoyance (clairvoyance only) as a spell-like ability, using his stalker level as his caster level for the effect. He may spend an additional ki point to Claim a target seen in such a way.\n\nThis replaces the blending class feature." compset="ClSpecial" summary="Spend 1 ki to cast Clairvoyance, additional ki to Claim targets seen through it">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="SpInfo" tag="spClairau3"/>
    <tag group="abAction" tag="Standard"/>
    <tag group="AbilType" tag="SpellLike"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW2StHnt2" name="Sight of the Hunter (Scrying/Locate Creature)" description="At 16th level, the soul hunter may spend a ki point to use scrying and locate creature as spell-like abilities, and Claim targets spied upon in such a manner. The soul hunter must have either visited the location first, or have a clear picture of the target within his mind to use these abilities (as per the spells specific requirements).\n\nThis replaces the improved blending class feature." compset="ClSpecial" summary="Spend 1 ki to cast Scrying and Locate Creature, can Claim targets seen this way">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abAction" tag="Standard"/>
    <tag group="AbilType" tag="SpellLike"/>
    <tag group="SpInfo" tag="spLocaCre3"/>
    <tag group="SpInfo" tag="spScrying3"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If we're disabled, just get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW1DipPrs" name="Diplomatic Presence" description="At 2nd level, the bannerman adds a +4 competence bonus to Bluff, Diplomacy, Intimidate and Sense Motive rolls while in this presence." compset="ClSpecial" summary="+4 competence bonus to social skills">
    <fieldval field="abValue" value="4"/>
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="User" tag="Activation"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ If we're not activated, do nothing
      doneif (field[abilActive].value <> 1)

      #applybonus[BonComp, hero.child[skBluff], field[abValue].value]
      #applybonus[BonComp, hero.child[skDiplo], field[abValue].value]
      #applybonus[BonComp, hero.child[skIntim], field[abValue].value]
      #applybonus[BonComp, hero.child[skSenseMot], field[abValue].value]

      field[abSumm].text = signed(field[abValue].value) & " to Bluff, Diplomacy, Intimidate, and Sense Motive"]]></eval>
    </thing>
  <thing id="cPW1FrPres" name="Fearsome Presence" description="At 13th level, the bannerman's reputation in battle precedes him and an aura of his many victories inspires dread in his foes. Enemies of the bannerman within 30-ft. of his position are filled with dread as if under a fear spell (use the bannerman's Charisma modifier for the Will save DC and his initiator level as his caster level). Foes that succeed the saving throw are unaffected by the bannerman's fearsome presence for 24 hours." compset="ClSpecial" summary="Gain effects of a Fear spell within 30 ft">
    <fieldval field="abRange" value="30"/>
    <usesource source="srcPathOfW"/>
    <tag group="SpInfo" tag="spFear3"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abRange" tag="Feet"/>
    <tag group="StandardDC" tag="aCHA"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW1ComPrs" name="Commander&apos;s Presence" description="At 17th level, the bannerman is a true commander amongst warlords, allowing him to lend a readied maneuver to an ally within 30-ft. as a swift action. When he lends this maneuver, the maneuver is expended until the recipient initiates this maneuver (using the recipient's initiator level and Charisma modifier to determine the saving throw DC; if the recipient's initiator level is too low to initiate the maneuver, then the bannerman cannot lend the maneuver). He can only lend one maneuver at a time when using this presence, and if the bannerman stops using this presence, then the effect ends immediately (but the maneuver remains expended until recovered)." compset="ClSpecial" summary="Lend a readied maneuver to an ally">
    <fieldval field="abRange" value="30"/>
    <usesource source="srcPathOfW"/>
    <tag group="SpInfo" tag="spFear3"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abRange" tag="Feet"/>
    <tag group="StandardDC" tag="aCHA"/>
    <tag group="abAction" tag="Swift"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW1InspBn" name="Inspiring Banner" description="At 5th level, a bannerman's banner becomes a symbol of inspiration to his allies and companions. As long as the bannerman's banner is clearly visible and he is in a Golden Lion stance, all allies within 60 feet receive a +2 morale bonus on saving throws against fear and fatigue and a +2 morale bonus on attack and damage rolls. At 12th level, and at 19th level, these bonuses increase by +1. If the Golden Lion stance he is using grants a similarly typed bonus to attack, damage, or saving throws, then increase that bonus by the amount of the inspiring banner's bonus. The banner must be at least Small or larger and must be carried or displayed by the bannerman or his mount to function, and can be held while using a buckler. This replaces the warlord's battle prowess class feature." compset="ClSpecial">
    <fieldval field="abRange" value="60"/>
    <usesource source="srcPathOfW"/>
    <tag group="abRange" tag="Feet"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="abAction" tag="None"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="User" tag="Activation"/>
    <tag group="Helper" tag="UseOwnLev"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value + 1)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)
      ~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value + 1
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)
      field[abSumm].text = "+" & field[abValue].value  & " morale bonus to attack, damage, and saves vs. fear or fatigue."

      ~ Stop now if we're not activated
      doneif (field[abilActive].value <> 1)

      ~ Stop now if we're not in a Golden Lion stance
      var IsInStance as number
      var targetDisc as string
      targetDisc = "GoldenLion"
      Call PWinDSta
      doneif (IsInStance <> 1)

      #situational[hero.childfound[svWill],signed(field[abValue].value) & " morale vs. fear",field[thingname].text]
      #situational[hero.childfound[svFort],signed(field[abValue].value) & " morale vs. fatigue",field[thingname].text]
      #applybonus[BonMorale, hero.child[Attack], field[abValue].value]
      #applybonus[BonMorale, hero.child[Damage], field[abValue].value]]]></eval>
    </thing>
  <thing id="cPW1ShrBst" name="Share Boost" description="At 6th level, the bannerman's ability to inspire his troops allows him to share some of his martial prowess with an ally on occasion. Once per day he is able to initiate a boost as an immediate action to utilize a boost for an ally who is initiating a maneuver or making an attack that qualifies for the use of that boost. The boost shared uses the bannerman's initiator level and saving throw DC (if applicable). He can use this ability one additional time per day at 12th level and again at 18th level. This replaces the dual boost class feature." compset="ClSpecial">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abAction" tag="Immediate"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Usage" tag="Day"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & field[xIndex].value & tagnames[Usage.?]

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value += field[xCount].value
      field[trkMax].value += field[abValue].value]]></eval>
    </thing>
  <thing id="arPWStfist" name="Steelfist Commando" description="Many warlords make their way on the battlefield with mighty massive blade or paired axes, but some find that their own bodies are weapon enough, and find themselves useful for missions of stealth and espionage. Through extensive training, these steelfist commandos are known to be leaders of tactical operative groups and capable of using their natural talents instead of relying on heavy or expensive weapons and armor. They are able to often slip in undetected past their foes." compset="ClassVary" uniqueness="unique">
    <fieldval field="srcPageNum" value="130"/>
    <fieldval field="cvSpec3rdN" value="Bonus Feats or Rogue Talents"/>
    <fieldval field="cvSpec3rdS" value="Bonus Feat or Rogue Talent"/>
    <arrayval field="cvCustTTot" index="5" value="1"/>
    <arrayval field="cvCustTTot" index="9" value="2"/>
    <arrayval field="cvCustTTot" index="13" value="3"/>
    <arrayval field="cvCustTTot" index="17" value="4"/>
    <arrayval field="cvBonFtMod" index="0" value="-1"/>
    <arrayval field="cvBonFtMod" index="5" value="-2"/>
    <arrayval field="cvBonFtMod" index="9" value="-3"/>
    <arrayval field="cvBonFtMod" index="13" value="-4"/>
    <arrayval field="cvBonFtMod" index="17" value="-5"/>
    <usesource source="srcPathOfW"/>
    <tag group="fDisable" tag="fArmMedium"/>
    <tag group="ClassSkill" tag="skBluff"/>
    <tag group="AbReplace" tag="cPW1BatPro"/>
    <tag group="ClassSkill" tag="skHeal"/>
    <tag group="ClassSkill" tag="skStealth"/>
    <tag group="fCategory" tag="Combat"/>
    <tag group="fCategory" tag="Teamwork"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="fDisable" tag="fArmTower"/>
    <tag group="Hero" tag="RogTalent" name="RogTalent" abbrev="RogTalent"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="fDisable" tag="fArmHeavy"/>
    <tag group="fDisable" tag="fArmShield"/>
    <bootstrap thing="cPW1PowPug">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cPW1BnFeat">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW1DdgBon">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cPW1DdgBon">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW1DdgBon">
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="cPW1DdgBon">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cPW1DdgBon">
      <autotag group="ClSpecWhen" tag="18"/>
      </bootstrap>
    <bootstrap thing="cPW1ComPrw">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW1ComPrw">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW1ComPrw">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="cPW1UnComb">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW1"/>
    <eval phase="First" priority="4000" index="2"><![CDATA[

      ~ Grant access to Steel Serpent and Broken Blade disciplines
      perform hero.child[mHelpPW1].assign[Discipline.SteelSerp]
      perform hero.child[mHelpPW1].assign[Discipline.BrokenBlad]

      ~ 11/23/2016 - Changed the timing to First/4000 to be before
      ~ the adjustments/Feats that can add a disipline to a class.
      ~ In addition I removed the whole "counting" check first and
      ~ simply removed the PrimalFury & Scarlet Thrown disciplines.
      perform hero.child[mHelpPW1].delete[Discipline.PrimalFury]
      perform hero.child[mHelpPW1].delete[Discipline.ScarletThr]]]></eval>
    <eval phase="Final" priority="99999999" index="3"><![CDATA[
      doneif (islinkage[varies] = 0)

      ~ We'll overwrite the tertiary abilities' expression
      linkage[varies].field[cCstS3Expr].text = "Ability.cPW1BonFet | ((SpecSource.cHelpRog | SpecSource.cHelpNin) & !Helper.Secondary & !Helper.Tertiary)"]]></eval>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      doneif (islinkage[varies] = 0)

      ~ Once we hit 6th level we have rogue talents
      if (linkage[varies].field[cTotalLev].value >= 6) then
        perform hero.assign[Hero.RogTalent]
      endif

      ~ Once we hit 14th level we have advanced rogue talents
      ~if (linkage[varies].field[cTotalLev].value >= 14) then
        ~var rogLv as number
        ~rogLv = hero.tagcount[Classes.Rogue]
        ~while (rogLv <= 10)
        ~  perform hero.assign[Classes.Rogue]
        ~  rogLv += 1
        ~loop

        ~foreach pick in hero where "abCategory.RogTalAdv"
          ~perform eachpick.assign[thing.skipprereq]
        ~nexteach

      ~endif]]></eval>
    </thing>
  <thing id="cPW1BnFeat" name="Bonus Feats" description="At 1st level and at 6th level, and then every four levels after, the steelfist commando gains a bonus combat feat or teamwork feat of his choosing. The warlord must qualify for the feat before selecting it. Alternately, starting at 6th level, he may instead choose to select a rogue talent instead of a bonus feat. At 14th level, he may select advanced rogue talents.\n\n{b}WARNING{/b}: If you do not have ten actual rogue levels, Advanced Rogue Talents will be greyed out in the selection menu even if you are high enough level to take them.  If you then take an advanced talent, it will NOT generate a validation error, even if there is another prerequisite you haven&apos;t met.  This is due to the fact that fan-made content such as this cannot modify base code the way Lone Wolf-created content can.  So when choosing talents with this class feature, it will be up to you to ensure that you follow the stated rules." compset="ClSpecial" summary="Bonus combat feat, teamwork feat, or rogue talent">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abAction" tag="Immediate"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="Final" priority="99999999" index="2"><![CDATA[
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Allow all Rogue Talents (and Ninja Tricks by extension), but not advanced talents if under 14th level
      if (field[xAllLev].value < 14) then
        hero.child[cHelpPW1].field[cCstS2Expr].text = "(SpecSource.cHelpRog | SpecSource.cHelpNin) & !Helper.Secondary & !Helper.Tertiary & !abCategory.RogTalAdv & !abCategory.NinTriMas"
      endif]]></eval>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW1UnComb" name="Unarmed Combat" description="At 1st level, the steelfist commando learns to use his body as the best weapon he can bring to any confrontation. He gains the Improved Unarmed Strike feat at 1st level, and he gains the Greater Unarmed Strike feat at 3rd level as bonus feats. Additionally, the unarmed strike of the Steelfist commando is considered both a natural weapon and a manufactured weapon for the purposes of feats, spells, and other effects. This replaces the bonus feat gained at 1st level." compset="ClSpecial" summary="Gain Improved Unarmed Strike and Greater Unarmed Strike">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abAction" tag="None"/>
    <bootstrap thing="fImpUnarm">
      <autotag group="thing" tag="skipprereq"/>
      </bootstrap>
    <bootstrap thing="fPWGrtUnaS">
      <containerreq phase="First" priority="500"><![CDATA[count:Classes.PWWarlord >= 3]]></containerreq>
      </bootstrap>
    <eval phase="PostAttr" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)]]></eval>
    </thing>
  <thing id="cPW1BonFet" name="Bonus Feat" description="The steelfist commando gains a bonus combat or teamwork feat." compset="CustomSpec" summary="Gain a bonus combat or teamwork feat">
    <usesource source="srcPathOfW"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="fCategory" tag="Combat"/>
    <tag group="fCategory" tag="Teamwork"/>
    <tag group="SpecSource" tag="arPWStfist"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="Secondary"/>
    <eval phase="PreLevel" priority="10000">~ Add to combat feats allowed
      linkage[table].field[cBonFtMax].value +=1</eval>
    </thing>
  <thing id="cPW1DdgBon" name="Dodge Bonus" description="At 2nd level, the steelfist commando is especially capable of avoiding attacks and gains a +1 dodge bonus to his Armor Class. This improves by +1 at 6th level and every four levels after (to a maximum of +5 at 18th level)." compset="ClSpecial" summary="Dodge bonus to your Armor Class.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="UseOwnLev" name="UseOwnLev" abbrev="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="SpecType" tag="Defense" name="Defense" abbrev="Defense"/>
    <eval phase="PostAttr" priority="20000"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)
      ~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)
      field[abSumm].text = "+" & field[abValue].value  & " dodge bonus to your AC."

      ~ Give dodge bonus to AC
      hero.child[ArmorClass].field[tACDodge].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPW1ComPrw" name="Commando Prowess" description="At 5th level, the prowess of the steelfist commando expresses itself in his mastery of the unarmed arts as well as in stealth. While in a martial stance, he adds a +1 competence bonus to attack and damage rolls, and +2 competence bonus to his CMB and CMD. This improves by +1 for attack and damage rolls and +2 to CMB and CMD at 12th level and again at 19th level. Additionally, while in a martial stance, he may add his Charisma modifier to Stealth rolls. This replaces the battle prowess class feature." compset="ClSpecial" summary="Bonus to hit and damage while in a martial stance">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value
      field[abValue2].value = field[abValue].value * 2
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)
      field[abSumm].text = signed(field[abValue].value) & " to hit and damage, " & signed(field[abValue2].value) & " to CMB and CMD"

      ~ Are we in a martial stance?
      if (hero.tagis[PathOfWar.StanceOn] <> 0) then
          ~ Apply attack/damage bonus
          #applybonus[BonComp, hero.child[Attack], field[abValue].value]
          #applybonus[BonComp, hero.child[Damage], field[abValue].value]

          ~ Apply CMB/CMD bonus
          #applybonus[BonComp, hero.child[ManeuvBon], field[abValue2].value]
          #applybonus[BonComp, hero.child[ManeuvDef], field[abValue2].value]

          ~ Apply CHA mod to Stealth, if positive
          var chabon as number
          chabon = maximum(0, #attrmod[aCHA])
          hero.child[skStealth].field[Bonus].value += chabon
      endif]]></eval>
    </thing>
  <thing id="cPW1PowPug" name="Powerful Pugilist" description="At 8th level, the steelfist commando's skill allows him to better utilize his unarmed strikes to their fullest potential. When using his unarmed strike, he is considered one size category larger when determining his unarmed strike damage and when determining his CMB and CMD. If his target is flat-footed, he inflicts an additional 2d6 points of damage against his foe; this is precision damage and if a target would be immune to sneak attack, they are immune to this effect. This replaces the bonus feat gained at 10th level." compset="ClSpecial" summary="Your unarmed strikes count as one size larger, deal +2d6 damage to flat-footed  enemies.">
    <usesource source="srcPathOfW"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="abAction" tag="None"/>
    <eval phase="PostLevel" priority="5000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

~ Increase unarmed damage by one step
foreach pick in hero from BaseWep where "thingid.wUnarmed"
        perform eachpick.assign[Helper.DamageUp]
nexteach

~ Count hero as next size up for CMD
var curSizeBon as number
if (hero.childfound[Maneuver].field[tManSize].value < 0) then
 if (hero.childfound[Maneuver].field[tManSize].value = -1) then
    curSizeBon = 0
  else
    curSizeBon = hero.childfound[Maneuver].field[tManSize].value / 2
  endif
elseif (hero.childfound[Maneuver].field[tManSize].value = 0) then
  curSizeBon = 1
else
  curSizeBon = hero.childfound[Maneuver].field[tManSize].value * 2
endif
hero.childfound[Maneuver].field[tManSize].value = curSizeBon]]></eval>
    </thing>
  <thing id="arPWVanCom" name="Vanguard Commander" description="Leading the front of the assault, some warlords opt for heavier armor and the protection of a shield to lead their troops to battle. These warlords are often referred to as vanguards due to their bravery in the theater of war, marching in first and waving the flag to victory." compset="ClassVary" uniqueness="unique">
    <arrayval field="cvBonFtMod" index="0" value="-1"/>
    <arrayval field="cvCustTot" index="0" value="-1"/>
    <usesource source="srcPathOfW"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="NotClassSk" tag="skPercep"/>
    <tag group="AbReplace" tag="cPW1ForPer"/>
    <tag group="AbReplace" tag="cPW1BatPro"/>
    <tag group="AbReplace" tag="cPW1DulBoo"/>
    <tag group="AbReplace" tag="cPW1TacAss"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="ClassSkill" tag="skBluff"/>
    <bootstrap thing="fArmMedium"></bootstrap>
    <bootstrap thing="cPW1GrdGam">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="fWepMart"></bootstrap>
    <bootstrap thing="cPW1DarDef">
      <autotag group="ClSpecWhen" tag="3"/>
      </bootstrap>
    <bootstrap thing="fArmShield"></bootstrap>
    <bootstrap thing="cPW1DefPrw">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cPW1DefPrw">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cPW1DefPrw">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="fSimple"></bootstrap>
    <bootstrap thing="cPW1HghDef">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="fArmHeavy"></bootstrap>
    <bootstrap thing="cPW1VanShd">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="fArmLight"></bootstrap>
    <bootstrap thing="fImpShBash"></bootstrap>
    <link linkage="varies" thing="cHelpPW1"/>
    <eval phase="First" priority="4000"><![CDATA[
      ~ Grant access to Iron Tortoise discipline
      perform hero.child[mHelpPW1].assign[Discipline.IronTort]

      ~ 11/23/2016 - Changed the timing to First/4000 to be before
      ~ the adjustments/Feats that can add a disipline to a class.
      ~ In addition I removed the whole "counting" check first and
      ~ simply removed the Solar Wind disciplines.
      perform hero.child[mHelpPW1].delete[Discipline.SolarWind]]]></eval>
    </thing>
  <thing id="cPW1GrdGam" name="Guardian&apos;s Gambit" description="{i}Risk{/i}: The warlord attempts a successful charging\nshield bash attack against an opponent.\n\n{i}Reward{/i}: If the shield bash attempt is successful, the\nwarlord and all allies within 30-ft. may make a free\n5-ft. step, even if they have already made one this\nturn." compset="ClSpecial">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    </thing>
  <thing id="cPW1DarDef" name="Daring Defense" description="The vanguard commander rushes the enemy lines, heedless of personal danger, with bold charges and bolder personality. This headstrong determination gives rise to vanguard commanders having an almost uncanny luck at avoiding dangers. The vanguard commander may add his Charisma modifier to his Dexterity modifier to determine his Reflex save bonus. If the character is ever able to add his Charisma modifier to his Reflex save through use of another ability (for example. the paladin's divine grace) he may only add his Charisma modifier once to his Reflex save. This replaces force of personality." compset="ClSpecial" summary="Add Charisma bonus to Reflex saves">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value += hero.child[aCHA].field[aModBonus].value

      hero.child[svRef].field[Bonus].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPW1DefPrw" name="Defensive Prowess" description="The vanguard commander lives to inspire his troops, and by training diligently to best defend himself in the midst of heavy combat he has developed techniques for higher survivability. While in a Golden Lion or Iron Tortoise stance, the vanguard commander reduces his armor check penalty by 1, gains a +1 competence bonus to his existing shield bonus to his Armor Class, and adds a +1 competence bonus to his CMD. This improves by +1 at 12th level, and again at 19th level. This replaces the battle prowess class feature." compset="ClSpecial" summary="Gain bonuses while in a Golden Lion or Iron Tortoise stance">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~Set the list name
      field[listname].text = field[thingname].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)
      ~only perform the calculations for the first copy
      doneif (tagis[Helper.FirstCopy] = 0)

      field[abValue].value += field[xCount].value
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var IsInStance as number
      var targetDisc as string
      targetDisc = "GoldenLion"
      Call PWinDSta

      if (IsInStance <> 1) then
        targetDisc = "IronTort"
        Call PWinDSta
      endif

      if (IsInStance <> 0) then
        field[abValue2].value = 1
      else
        field[abValue2].value = 0
      endif]]></eval>
    <eval phase="PostAttr" priority="10000" index="2">if (field[abValue2].value = 1) then
  ~ Apply competence bonus to CMD
  #applybonus[BonComp, hero.child[ManeuvDef], field[abValue].value]

  ~ Reduce ACP
  herofield[tArmorChk].value = minimum(0, herofield[tArmorChk].value + field[abValue].value)
endif</eval>
    <eval phase="Final" priority="5000" index="3"><![CDATA[if (field[abValue2].value = 1) then
  ~ Increase shield bonus
  ~ This is technically supposed to be a competence bonus, but it's also supposed to be a bonus TO the shield bonus, and HL doesn't seem to handle that kind of edge case
  if (hero.child[ArmorClass].field[tACShield].value > 0) then
    hero.child[ArmorClass].field[tACShield].value += field[abValue].value
  endif
endif]]></eval>
    </thing>
  <thing id="cPW1HghDef" name="Heightened Defenses" description="The vanguard commander is a capable warrior who can blend both defense and offense together with precision. The character gains an additional immediate action to be used for the purposes of initiating a counter on a round that he initiates a boost. He can use this additional immediate action a number of times per day equal to 1 + his Charisma modifier (minimum of 1). This replaces the dual boost class feature." compset="ClSpecial" summary="Gain an extra counter when you initiate a boost">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="User" tag="Tracker"/>
    <tag group="ChargeCalc" tag="AttrUses1"/>
    <tag group="ChargeAttr" tag="aCHA"/>
    <tag group="Usage" tag="Day"/>
    <tag group="SbNamePar" tag="IncUses"/>
    <eval phase="Final" priority="10000"><![CDATA[      ~Set the list name
      field[listname].text = field[thingname].text & " " & field[trkMax].value & tagnames[Usage.?]

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)]]></eval>
    </thing>
  <thing id="cPW1VanShd" name="Vanguard's Shield" description="The vanguard commander is lightning fast with his shield for both defense and offense. Whenever the vanguard initiates a melee strike or uses a counter to defend against an attack from an adjacent foe, he may make a shield bash attempt as free action at his full base attack bonus against that creature. This replaces the tactical assistance class feature." compset="ClSpecial" summary="Shield bash as a free action after initiating a strike or counter">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SbNamePar" tag="IncUses"/>
    <tag group="abAction" tag="Free"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~if we've been replaced, get out now
      doneif (tagis[Helper.SpcReplace] <> 0)]]></eval>
    </thing>
  <thing id="arPWDrvDef" name="Dervish Defender" description="Not all warders find solace in a thick coat of steel on their body and a stout shield in hand, some warders eschew this for the more mobile fighting styles enjoyed by those who practice the Thrashing Dragon discipline." compset="ClassVary" uniqueness="unique">
    <usesource source="srcPathOfW"/>
    <tag group="fDisable" tag="fArmShield"/>
    <tag group="fDisable" tag="fArmTower"/>
    <tag group="fDisable" tag="fArmBuckl"/>
    <tag group="ClassSkill" tag="skAcrobat"/>
    <tag group="NotClassSk" tag="skBluff"/>
    <tag group="AbReplace" tag="cPW3TacAc"/>
    <tag group="AbReplace" tag="cPW3CldStl"/>
    <tag group="AbReplace" tag="cPW3StlDef"/>
    <tag group="AbReplace" tag="cPW3BrnStl"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="fDisable" tag="fArmHeavy"/>
    <tag group="fDisable" tag="fArmMedium"/>
    <bootstrap thing="cPW3CrtEvd">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="cPW3TWD">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPW3DrvDef">
      <autotag group="ClSpecWhen" tag="4"/>
      </bootstrap>
    <bootstrap thing="cPW3ShldBl">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cPW3GrcBld">
      <autotag group="ClSpecWhen" tag="15"/>
      </bootstrap>
    <bootstrap thing="fTwoWep">
      <autotag group="thing" tag="skipprereq"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPW3"/>
    <eval phase="First" priority="4000"><![CDATA[
      ~ Grant access to Thrashing Dragon discipline
      perform hero.child[mHelpPW3].assign[Discipline.ThrashDrag]

      ~ 11/23/2016 - Changed the timing to First/4000 to be before
      ~ the adjustments/Feats that can add a disipline to a class.
      ~ In addition I removed the whole "counting" check first and
      ~ simply removed the Iron Tortoise disciplines.
      perform hero.child[mHelpPW3].delete[Discipline.IronTort]]]></eval>
    </thing>
  <thing id="cPW3TWD" name="Two-Weapon Defense" description="While not all dervish defenders fight in the same manner, most do and all are extensively trained in these fighting philosophies. While wearing light armor or no armor, wielding a weapon in each hand (or using a double weapon), and not using a shield heavier than a buckler, the warder may add her Intelligence bonus (if any) to her Armor Class. She retains this bonus even against touch attacks or when flat-footed, but loses this bonus should she be rendered helpless by any means." compset="ClSpecial" summary="Gain INT to AC when dual-wielding and wearing light or no armor and no shield.">
    <tag group="abAction" tag="None"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value = #attrmod[aINT]

      ~ If we're wearing med/heavy armor, we're disabled.
      doneif (hero.tagexpr[Hero.MedArmor | Hero.HeavyArmor] <> 0)

      ~ If we're wearing a shield that isn't a buckler, we're disabled
      doneif (hero.tagis[Hero.EquipShld] - hero.tagis[Hero.ShldOffOK] <> 0)

      ~ Check to see if we have something equipped in each hand
      doneif (hero.tagis[Hero.EquipMain] + hero.tagis[Hero.EquipOff] < 2)

      ~ Check to see that we have at least two weapons equipped, or a double weapon
      if (hero.tagcount[Hero.EquipWep] < 2) then
        doneif (hero.tagcount[Hero.EquipDbl] = 0)
      endif

      ~ Apply the hero's INT mod to AC (untyped bonus)
      #applybonus[Bonus, hero.child[ArmorClass], field[abValue].value]]]></eval>
    </thing>
  <thing id="cPW3DrvDef" name="Dervish Defense" description="A dervish defender is capable of an aggressive defense, attacking even as they defend. At 4th level, the dervish defender may use a counter against an enemy's attack and if she successfully counters it, she may make an immediate attack of opportunity against that foe. This replaces the tactical acumen class feature." compset="ClSpecial" summary="Gain an AoO on successful counter">
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="cPW3ShldBl" name="Shield of Blades" description="At 6th level, when fighting unarmed or with a weapon from the light blades, double weapon or close weapon weapon group in each hand, the dervish defender improves her shield bonus to AC by an amount equal to her aegis bonus. As an immediate action, the dervish defender may lose her shield bonus to armor class until the beginning of her next turn and grant an adjacent creature an equivalent shield bonus to armor class until the beginning of the dervish defender's next turn. This replaces the clad in steel class feature." compset="ClSpecial" summary="Gain Aegis bonus as shield bonus when using double weapon or dual-wielding light blades or close weapons">
    <tag group="AbilType" tag="Extra"/>
    <eval phase="Final" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.SpcDisable] <> 0)

~ Get the Aegis bonus
field[abValue].value = hero.child[cPW3Aegis].field[abValue].value


~ Check to see if we have something equipped in each hand
doneif (hero.tagis[Hero.EquipMain] + hero.tagis[Hero.EquipOff] < 2)

~ Check to see that we have at least two weapons equipped, or a double weapon
if (hero.tagcount[Hero.EquipWep] < 2) then
  doneif (hero.tagcount[Hero.EquipDbl] = 0)
endif

~ Verify that all wielded weapons are light blades, double weapons, or close weapons
foreach pick in hero from BaseWep where "Hero.MainHand | Hero.OffHand"
  doneif (eachpick.tagis[wFtrGroup.Close] + eachpick.tagis[wFtrGroup.BladeLight] + eachpick.tagis[wFtrGroup.Double] < 1)
nexteach

~ Add value to shield AC bonus
hero.child[ArmorClass].field[tACShield].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPW3GrcBld" name="Grace of Blades" description="At 15th level the dervish defender gains mastery over her two-weapon style. Whenever the dervish defender makes an attack with one weapon while holding two or more weapons or using a double weapon (such as during a full attack during which she is not two-weapon fighting, or using a strike that includes a melee attack) she increases that attack's damage by an amount equal to one of her off-hand weapons' damage (including any extraordinary and magical enhancements) plus one-half her Strength modifier. Whenever the dervish defender makes an attack with more than one weapon (such as when making a full attack while two-weapon fighting or a strike that includes an attack with two or more weapons) she increases the damage of her weapons (and their enhancements) by one die step (as if increasing in size). This replaces the steel defense class feature." compset="ClSpecial" summary="Add offhand weapon damage when attacking only with main weapon, or increase both weapons&apos; damage die when attacking with both.">
    <fieldval field="actName" value="Grace of Blades - Attacking with primary weapon only"/>
    <tag group="User" tag="Activation"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostLevel" priority="5000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.SpcDisable] <> 0)
doneif (hero.tagis[Hero.EquipMain] + hero.tagis[Hero.EquipOff] < 2)

if (field[abilActive].value = 0) then
  ~ Upgrade damage of wielded weapons (as long as they're not being wielded two-handed)
  foreach pick in hero from BaseWep where "Hero.MainHand | Hero.OffHand"
    if (eachpick.tagis[Hero.MainHand] + eachpick.tagis[Hero.OffHand] < 2) then
      perform eachpick.assign[Helper.DamageUp]
    endif
  nexteach
endif]]></eval>
    <eval phase="PostAttr" priority="5000" index="2"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.SpcDisable] <> 0)

~ Check to see that we have at least two weapons equipped, or a double weapon
if (hero.tagcount[Hero.EquipWep] < 2) then
  doneif (hero.tagcount[Hero.EquipDbl] = 0)
endif

if (field[abilActive].value = 1) then
  var bon as number
  bon = #attrmod[aSTR]/2
  field[abValue].value = round(#attrmod[aSTR]/2,0,-1)
  hero.child[Damage].field[Bonus].value += field[abValue].value
endif]]></eval>
    <eval phase="Final" priority="500001" index="3"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.SpcDisable] <> 0)
doneif (hero.tagis[Hero.EquipMain] + hero.tagis[Hero.EquipOff] < 2)

~ If the "only attacking with primary" box is checked, add offhand weapon's damage to primary weapon
if (field[abilActive].value = 1) then

  var sDice as string
  var nDice as number
  var nDieSize as number

  foreach pick in hero from BaseWep where "Hero.OffHand"

    ~ Get the number of dice
    nDice = mid(eachpick.field[wDamageTbl].arraytext[1],0,1)
    ~ Get the die size
    nDieSize = mid(eachpick.field[wDamageTbl].arraytext[1],2,2)

    field[abValue].value = round(#attrmod[aSTR]/2,0,-1)
  nexteach

  foreach pick in hero from BaseWep where "Hero.MainHand"
    eachpick.field[wDamExtra].text &= "+" & nDice & "d" & nDieSize
  nexteach


endif]]></eval>
    </thing>
  <thing id="cPW3CrtEvd" name="Critical Evasion" description="This functions as the born of steel class feature, but only functions if the character is wearing light armor or no armor." compset="ClSpecial" summary="Add INT to AC vs critical hit confirmation.">
    <usesource source="srcPathOfW"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="DescInfo" tag="cPW3BrnStl"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.SpcDisable] <> 0)

~ If we're wearing med/heavy armor, we're disabled.
doneif (hero.tagexpr[Hero.MedArmor | Hero.HeavyArmor] <> 0)

~ Apply situational AC bonus
field[abValue].value = #attrmod[aINT]
#situational[hero.child[ArmorClass],signed(field[abValue].value) & " vs. critical hit confirmation",field[name].text]]]></eval>
    </thing>
  <thing id="arPWPthWlk" name="Pathwalker" description="The psychic warrior is a force to be reckoned with, a talented combatant with skill in both the realm of battle and the mind. Some psychic warriors focus more strongly on their martial talents, and they discover that the martial disciplines along the Path of War are capable of strong philosophical insights. These insights lead to additional warrior paths for the psychic warrior to travel, and they are known as pathwalkers." compset="ClassVary" uniqueness="unique">
    <arrayval field="cvBonFtMod" index="1" value="-1"/>
    <arrayval field="cvBonFtMod" index="2" value="-1"/>
    <arrayval field="cvBonFtMod" index="3" value="-1"/>
    <arrayval field="cvBonFtMod" index="4" value="-1"/>
    <arrayval field="cvBonFtMod" index="5" value="-1"/>
    <arrayval field="cvBonFtMod" index="6" value="-1"/>
    <arrayval field="cvBonFtMod" index="7" value="-1"/>
    <arrayval field="cvBonFtMod" index="8" value="-1"/>
    <arrayval field="cvBonFtMod" index="9" value="-1"/>
    <arrayval field="cvBonFtMod" index="10" value="-2"/>
    <arrayval field="cvBonFtMod" index="11" value="-2"/>
    <arrayval field="cvBonFtMod" index="12" value="-2"/>
    <arrayval field="cvBonFtMod" index="13" value="-2"/>
    <arrayval field="cvBonFtMod" index="14" value="-2"/>
    <arrayval field="cvBonFtMod" index="15" value="-2"/>
    <arrayval field="cvBonFtMod" index="16" value="-2"/>
    <arrayval field="cvBonFtMod" index="17" value="-2"/>
    <arrayval field="cvBonFtMod" index="18" value="-2"/>
    <arrayval field="cvBonFtMod" index="19" value="-2"/>
    <usesource source="srcPathOfW"/>
    <tag group="AbReplace" tag="cPWaPathwe"/>
    <tag group="PathOfWar" tag="Class"/>
    <tag group="Helper" tag="OverCustS1"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <bootstrap thing="cCfgPthwk"></bootstrap>
    <bootstrap thing="cPWPthWDis">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="varies" thing="cHelpPWa"/>
    <eval phase="Final" priority="999999999999999999" index="2"><![CDATA[      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Restrict our Warrior's Path choices to the ones matching our selected disciplines
      perform hero.childfound[mHelpPthwk].pulltags[Discipline.?]
      if (tagis[Discipline.?] = 0) then
        linkage[varies].field[cCstSpExpr].text &= " & !Discipline.?"
      else
        linkage[varies].field[cCstSpExpr].text &= " & (" & tagids[Discipline.?, " | "] & ")"
      endif]]></eval>
    <eval phase="First" priority="1000"><![CDATA[      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Disable the Path Skills gained at 7th and 13th level
      foreach pick in hero from Ability where "Ability.cPWaPathSk"
        if (eachpick.tagis[ClSpecWhen.7] + eachpick.tagis[ClSpecWhen.13] > 0) then
          perform eachpick.assign[Helper.SpcDisable]
          perform eachpick.assign[Helper.SpcReplace]
        endif
      nexteach]]></eval>
    </thing>
  <thing id="cCfgPthwk" name="Pathwalker Maneuvers" compset="Configure" uniqueness="unique">
    <usesource source="srcPathOfW"/>
    <tag group="PathOfWar" tag="Config" name="Configurable" abbrev="Configurable"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <bootstrap thing="mHelpPthwk"></bootstrap>
    <prereq message="You have activated more stances than allowed.">
      <validate>var ValidStaOn as number
        Call ValidStaOn
        @valid = ValidStaOn</validate>
      </prereq>
    <prereq message="You have too many Manuevers Readied.">
      <validate>var ValidManOn as number
        Call ValidManOn
        @valid = ValidManOn</validate>
      </prereq>
    </thing>
  <thing id="mHelpPthwk" name="Pathwalker Manuevers" compset="PWManList">
    <arrayval field="cManKnown" index="0" value="3"/>
    <arrayval field="cManKnown" index="1" value="4"/>
    <arrayval field="cManKnown" index="2" value="5"/>
    <arrayval field="cManKnown" index="3" value="5"/>
    <arrayval field="cManKnown" index="4" value="6"/>
    <arrayval field="cManKnown" index="5" value="6"/>
    <arrayval field="cManKnown" index="6" value="7"/>
    <arrayval field="cManKnown" index="7" value="7"/>
    <arrayval field="cManKnown" index="8" value="8"/>
    <arrayval field="cManKnown" index="9" value="8"/>
    <arrayval field="cManKnown" index="10" value="9"/>
    <arrayval field="cManKnown" index="11" value="9"/>
    <arrayval field="cManKnown" index="12" value="10"/>
    <arrayval field="cManKnown" index="13" value="10"/>
    <arrayval field="cManKnown" index="14" value="11"/>
    <arrayval field="cManKnown" index="15" value="11"/>
    <arrayval field="cManKnown" index="16" value="12"/>
    <arrayval field="cManKnown" index="17" value="12"/>
    <arrayval field="cManKnown" index="18" value="13"/>
    <arrayval field="cManKnown" index="19" value="13"/>
    <arrayval field="cManReady" index="0" value="3"/>
    <arrayval field="cManReady" index="1" value="3"/>
    <arrayval field="cManReady" index="2" value="3"/>
    <arrayval field="cManReady" index="3" value="4"/>
    <arrayval field="cManReady" index="4" value="4"/>
    <arrayval field="cManReady" index="5" value="4"/>
    <arrayval field="cManReady" index="6" value="4"/>
    <arrayval field="cManReady" index="7" value="4"/>
    <arrayval field="cManReady" index="8" value="4"/>
    <arrayval field="cManReady" index="9" value="5"/>
    <arrayval field="cManReady" index="10" value="5"/>
    <arrayval field="cManReady" index="11" value="5"/>
    <arrayval field="cManReady" index="12" value="5"/>
    <arrayval field="cManReady" index="13" value="5"/>
    <arrayval field="cManReady" index="14" value="6"/>
    <arrayval field="cManReady" index="15" value="6"/>
    <arrayval field="cManReady" index="16" value="6"/>
    <arrayval field="cManReady" index="17" value="6"/>
    <arrayval field="cManReady" index="18" value="6"/>
    <arrayval field="cManReady" index="19" value="7"/>
    <arrayval field="cStances" index="0" value="1"/>
    <arrayval field="cStances" index="1" value="1"/>
    <arrayval field="cStances" index="2" value="1"/>
    <arrayval field="cStances" index="3" value="2"/>
    <arrayval field="cStances" index="4" value="2"/>
    <arrayval field="cStances" index="5" value="2"/>
    <arrayval field="cStances" index="6" value="2"/>
    <arrayval field="cStances" index="7" value="2"/>
    <arrayval field="cStances" index="8" value="2"/>
    <arrayval field="cStances" index="9" value="3"/>
    <arrayval field="cStances" index="10" value="3"/>
    <arrayval field="cStances" index="11" value="3"/>
    <arrayval field="cStances" index="12" value="3"/>
    <arrayval field="cStances" index="13" value="3"/>
    <arrayval field="cStances" index="14" value="4"/>
    <arrayval field="cStances" index="15" value="4"/>
    <arrayval field="cStances" index="16" value="4"/>
    <arrayval field="cStances" index="17" value="4"/>
    <arrayval field="cStances" index="18" value="4"/>
    <arrayval field="cStances" index="19" value="4"/>
    <arrayval field="cMaxManLvl" index="0" value="1"/>
    <arrayval field="cMaxManLvl" index="1" value="1"/>
    <arrayval field="cMaxManLvl" index="2" value="1"/>
    <arrayval field="cMaxManLvl" index="3" value="2"/>
    <arrayval field="cMaxManLvl" index="4" value="2"/>
    <arrayval field="cMaxManLvl" index="5" value="2"/>
    <arrayval field="cMaxManLvl" index="6" value="3"/>
    <arrayval field="cMaxManLvl" index="7" value="3"/>
    <arrayval field="cMaxManLvl" index="8" value="4"/>
    <arrayval field="cMaxManLvl" index="9" value="4"/>
    <arrayval field="cMaxManLvl" index="10" value="5"/>
    <arrayval field="cMaxManLvl" index="11" value="5"/>
    <arrayval field="cMaxManLvl" index="12" value="6"/>
    <arrayval field="cMaxManLvl" index="13" value="6"/>
    <arrayval field="cMaxManLvl" index="14" value="6"/>
    <arrayval field="cMaxManLvl" index="15" value="6"/>
    <arrayval field="cMaxManLvl" index="16" value="6"/>
    <arrayval field="cMaxManLvl" index="17" value="6"/>
    <arrayval field="cMaxManLvl" index="18" value="6"/>
    <arrayval field="cMaxManLvl" index="19" value="6"/>
    <tag group="Discipline" tag="PrimalFury"/>
    <tag group="Discipline" tag="ScarletThr"/>
    <tag group="Discipline" tag="SolarWind"/>
    <tag group="Discipline" tag="ThrashDrag"/>
    <tag group="UseAttr" tag="aWIS"/>
    <tag group="Discipline" tag="BrokenBlad"/>
    <tag group="Discipline" tag="IronTort"/>
    <tag group="PathOfWar" tag="CstManProg"/>
    <link linkage="powCfg" thing="cCfgPthwk"/>
    <link linkage="powClass" thing="cHelpPWa"/>
    </thing>
  <thing id="cPWPthWDis" name="Pathwalker Disciplines" description="Choose two martial disciplines." compset="ClSpecial">
    <fieldval field="usrCandid1" value="PathOfWar.selDisc &amp; (Discipline.BrokenBlad | Discipline.IronTort | Discipline.PrimalFury |  Discipline.SolarWind |  Discipline.ScarletThr | Discipline.ThrashDrag)"/>
    <fieldval field="usrCandid2" value="PathOfWar.selDisc &amp; (Discipline.BrokenBlad | Discipline.IronTort | Discipline.PrimalFury |  Discipline.SolarWind |  Discipline.ScarletThr | Discipline.ThrashDrag)"/>
    <tag group="ProductId" tag="HLCommunit" name="HLCommunit" abbrev="HLCommunit"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Statblock" name="Statblock" abbrev="Statblock"/>
    <eval phase="PostLevel" priority="10000" index="2">perform hero.childfound[mHelpPthwk].delete[Discipline.?]

      ~ Assign chosen disciplines
      if (field[usrChosen1].ischosen = 1) then
        perform field[usrChosen1].chosen.pulltags[Discipline.?]
        perform hero.childfound[mHelpPthwk].pushtags[Discipline.?]
      endif
      if (field[usrChosen2].ischosen = 1) then
        perform field[usrChosen2].chosen.pulltags[Discipline.?]
        perform hero.childfound[mHelpPthwk].pushtags[Discipline.?]
      endif</eval>
    <eval phase="First">~ Let the PWManlist component know that this class has to choose disciplines
      perform root.linkage[varies].assign[PathOfWar.selDisc]</eval>
    </thing>
  <thing id="cPWPthwBBP" name="Broken Blade Path" description="Psychic warriors that value the strength of body as well as the strength of the mind gravitate toward the path of the Broken Blade. By realizing his potential through steel and iron, or by flesh and bone, the psychic warrior on this path turns his body into a living weapon.\n\n{b}Powers:{/b} {i}Biofeedback{/i}, {i}tactical precognition{/i}* \n\n{b}Skills:{/b} Acrobatics, Intimidate, Sense Motive\n\n{b}Bonus Class Skill:{/b} Acrobatics\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Broken Blade Path" uniqueness="unique">
    <comment><![CDATA[Add Biofeedback and Tactical Precognition powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="PathSkill" tag="skAcrobat" name="Acrobatics" abbrev="Acrobatics"/>
    <tag group="PathSkill" tag="skIntim" name="Intimidate" abbrev="Intimidate"/>
    <tag group="PathSkill" tag="skSenseMot" name="Sense Motive" abbrev="Sense Motive"/>
    <tag group="ClsAllowPs" tag="puBiofeed1" name="Biofeedback" abbrev="Biofeedback"/>
    <tag group="ClsAllowPs" tag="puPreTa1" name="Tactical Precognition" abbrev="Tactical Precognition"/>
    <tag group="Discipline" tag="BrokenBlad" name="Broken Blade"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skAcrobat"/>
    <bootstrap thing="puBiofeed1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaTraBBP"></bootstrap>
    <bootstrap thing="cPWaManBBP"></bootstrap>
    <bootstrap thing="puPreTa1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Broken Blade as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.BrokenBlad] = 1)</evalrule>
    </thing>
  <thing id="cPWaTraBBP" name="Trance (Broken Blade Path)" description="Beginning at 3rd level, while maintaining psionic focus and while in a Broken Blade stance, the psychic warrior gains a +1 bonus to damage while fighting with weapons associated with the Broken Blade discipline. This bonus increases by 1 every four psychic warrior levels thereafter." compset="ClSpecial" summary="When psi-focused you gain a competence bonus to ranged or thrown weapons">
    <fieldval field="actName" value="Active"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Set the level bonus
      field[abValue].value += 1
      If (field[xTotalLev].value >= 7) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 11) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 15) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 19) Then
        field[abValue].value += 1
      Endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value <> 1)

      ~ If not in a Broken Blade stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "BrokenBlad"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Give bonus to damage rolls for Broken Blade weapons
      ~var sTags as string
      ~sTags = hero.childfound[zPWBrknBld].tagids[wFtrGroup.?,"|"]
      foreach pick in hero from BaseWep where hero.childfound[zPWBrknBld].tagids[wFtrGroup.?,"|"]
        eachpick.field[wDamBonus].value += field[abValue].value
      nexteach]]></eval>
    </thing>
  <thing id="cPWaManBBP" name="Maneuver (Broken Blade Path)" description="Beginning at 3rd level, as an immediate action, the psychic warrior can expend his psionic focus to gain a +2 bonus to CMB checks to use the dirty trick, grapple, or trip combat maneuvers. This bonus increases by 1 for every five psychic warrior levels possessed." compset="ClSpecial">
    <fieldval field="abValue" value="2"/>
    <fieldval field="actName" value="Active (must expend psionic focus)"/>
    <tag group="User" tag="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="abAction" tag="Immediate"/>
    <eval phase="Render" priority="50000" index="3"><![CDATA[      field[abSumm].text = signed(field[abValue].value) & " to trip/grapple/dirty trick when you expend psi focus"]]></eval>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      field[abValue].value += round(field[xTotalLev].value/5,0,-1)

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)

      ~ Add bonus to CMB for Dirty Trick, Grapple, and Trip maneuvers
      hero.childfound[manDirtTri].field[Bonus].value += field[abValue].value
      hero.childfound[manGrapple].field[Bonus].value += field[abValue].value
      hero.childfound[manTrip].field[Bonus].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPWPthwITP" name="Iron Tortoise Path" description="A stout shield and defensive nature are hallmarks of psychic warriors who follow the path of the Iron Tortoise. The methods of these warriors is slow and steady like the disciplineâ€™s namesake, and enduring as stone. A mountain of martial power, the Iron Tortoise weathers all blows without animosity and retaliates in kind.\n\n{b}Powers:{/b} {i}Expansion{/i}, {i}Stomp{/i}* \n\n{b}Skills:{/b} Bluff, Intimidate, Perception\n\n{b}Bonus Class Skill:{/b} Bluff\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Iron Tortoise Path" uniqueness="unique">
    <comment><![CDATA[Add Expansion and Stomp powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="PathSkill" tag="skBluff" name="Bluff" abbrev="Bluff"/>
    <tag group="PathSkill" tag="skIntim" name="Intimidate" abbrev="Intimidate"/>
    <tag group="PathSkill" tag="skPercep" name="Perception" abbrev="Perception"/>
    <tag group="ClsAllowPs" tag="puExpand1" name="Expansion" abbrev="Expansion"/>
    <tag group="ClsAllowPs" tag="puStomp1" name="Stomp" abbrev="Stomp"/>
    <tag group="Discipline" tag="IronTort" name="Iron Tortoise"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skBluff" name="Bluff" abbrev="Bluff"/>
    <bootstrap thing="puStomp1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaTraITP"></bootstrap>
    <bootstrap thing="cPWaManITP"></bootstrap>
    <bootstrap thing="puExpand1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Iron Tortoise as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.IronTort] = 1)</evalrule>
    </thing>
  <thing id="cPWaManITP" name="Maneuver (Iron Tortoise Path)" description="Beginning at 3rd level, as a swift action, the pathwalker can expend his psionic focus to use the reposition combat maneuver against a foe he has successfully attacked with his shield (either by shield bashing or through a maneuver) with a +2 competence bonus to his CMB check. This attempt does not provoke attacks of opportunity. This bonus to his CMB increases by 1 for every five psychic warrior levels possessed." compset="ClSpecial">
    <fieldval field="abValue" value="2"/>
    <fieldval field="actName" value="Active (must expend psionic focus)"/>
    <tag group="User" tag="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="abAction" tag="Swift"/>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      field[abValue].value += round(field[xTotalLev].value/5,0,-1)

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)

      ~ Add bonus to CMB for Reposition maneuver
      hero.childfound[manReposit].field[Bonus].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPWaTraITP" name="Trance (Iron Tortoise Path)" description="Beginning at 3rd level, while maintaining psionic focus and using a shield while in an Iron Tortoise stance, the pathwalker gains damage reduction 2/adamantine. This damage reduction increases by 2 every four psychic warrior levels thereafter." compset="ClSpecial" summary="Gain DR when using a shield in an Iron Tortoise stance and psi-focused">
    <fieldval field="actName" value="Active"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Set the level bonus
      field[abValue].value += 2
      If (field[xTotalLev].value >= 7) Then
        field[abValue].value += 2
      Endif
      If (field[xTotalLev].value >= 11) Then
        field[abValue].value += 2
      Endif
      If (field[xTotalLev].value >= 15) Then
        field[abValue].value += 2
      Endif
      If (field[xTotalLev].value >= 19) Then
        field[abValue].value += 2
      Endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value = 0)

      ~ If not using a shield then get out now
      doneif (hero.tagis[Hero.EquipShld] = 0)

      ~ If not in an Iron Tortoise stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "IronTort"
      call PWinDSta
      doneif (IsInStance = 0)

      ~Grant DR
      #applydr[xDamRdAdam, field[abValue].value]]]></eval>
    </thing>
  <thing id="cPWPthwPFP" name="Primal Fury Path" description="Psychic warriors who feel the call of Primal Furyâ€™s power are rugged, individualistic hunters who feel the wildness of nature within their mind, body, and soul. Theyâ€™re prone to passionate reaction, quick tempers granting great power and fierce offensive power.\n\n{b}Powers:{/b} {i}Ticken skin{/i}, {i}Vigor{/i}* \n\n{b}Skills:{/b} Intimidate, Survival, Swim\n\n{b}Bonus Class Skill:{/b} Survival\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Primal Fury Path" uniqueness="unique">
    <comment><![CDATA[Add Thicken skin and Vigor powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="PathSkill" tag="skSwim" name="Swim" abbrev="Swim"/>
    <tag group="PathSkill" tag="skIntim" name="Intimidate" abbrev="Intimidate"/>
    <tag group="PathSkill" tag="skSurvival" name="Survival" abbrev="Survival"/>
    <tag group="ClsAllowPs" tag="puThickSk1" name="Thicken Skin" abbrev="Thicken Skin"/>
    <tag group="ClsAllowPs" tag="puPVigor1" name="Vigor" abbrev="Vigor"/>
    <tag group="Discipline" tag="PrimalFury" name="Primal Fury"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skSurvival" name="Survival" abbrev="Survival"/>
    <bootstrap thing="puThickSk1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="puPVigor1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaManPFP"></bootstrap>
    <bootstrap thing="cPWaTraPFP"></bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Primal Fury as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.PrimalFury] = 1)</evalrule>
    </thing>
  <thing id="cPWaManPFP" name="Maneuver (Primal Fury Path)" description="Beginning at 3rd level, the pathwalker may expend his psionic focus as part of a charge attack and he may make a full attack at the end of this charge. At 8th level and every five levels after, attacks made during this charge attack inflict an additional 2 points of damage." compset="ClSpecial">
    <fieldval field="actName" value="Active (must charge and expend psionic focus)"/>
    <tag group="User" tag="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="abAction" tag="FullRd"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      if (field[xTotalLev].value >= 8) then
        field[abValue].value = 2
        var amt as number
        amt = field[xTotalLev].value - 8
        amt = round(amt/5,0,-1)
        field[abValue].value += amt*2
      endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)
      ~ If we're not charging then get out now
      doneif (hero.childfound[pstChargin].field[pIsOn].value <> 1)

      ~ Add damage bonus
      hero.child[Damage].field[Bonus].value += field[abValue].value]]></eval>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    </thing>
  <thing id="cPWaTraPFP" name="Trance (Primal Fury Path)" description="Beginning at 3rd level, while maintaining psionic focus and while using a stance of the Primal Fury discipline, the pathwalker gains an additional 10-ft of movement speed. Additionally, he gains a +1 competence bonus to Fortitude saves. This Fortitude save bonus improves by 1 and his speed increases by +5-ft every four psychic warrior levels after this." compset="ClSpecial">
    <fieldval field="actName" value="Active"/>
    <fieldval field="abValue" value="10"/>
    <fieldval field="abValue2" value="1"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Calculate bonus amount
      if (field[xTotalLev].value >= 7) then
        var amt as number
        amt = field[xTotalLev].value - 7
        amt = round(amt/4,0,-1)
        field[abValue].value += amt*5
        field[abValue2].value += amt
      endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue2].value) & "/" & signed(field[abValue].value) & "ft."

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value = 0)

      ~ If not in a Primal Fury stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "PrimalFury"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Grant speed bonus
      hero.child[Speed].field[Bonus].value += field[abValue].value

      ~ Grant Fort save bonus
      #applybonus[BonComp, hero.child[svFort], field[abValue2].value]]]></eval>
    </thing>
  <thing id="cPWPthwSTP" name="Scarlet Throne Path" description="Pathwalkers who walked the blood-drenched road that leads to the Scarlet Throne are often haughty, proud, arrogant warriors. They feel their mental prowess and skill at arms causes them to rise above the rank and file soldiers that fall so easily to their skill. This pride is well-earned, and their foes cry silently from the graves that the psychic warrior left them in.\n\n{b}Powers:{/b} {i}Offensive precognition{/i}, {i}offensive prescience{/i}*\n\n{b}Skills:{/b} Diplomacy, Knowledge (nobility), Sense\nMotive\n\n{b}Bonus Class Skill:{/b} Sense Motive\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Scarlet Throne Path" uniqueness="unique">
    <comment><![CDATA[Add Offensive Precognition and Offensive Prescience powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="PathSkill" tag="skSenseMot" name="Sense Motive"/>
    <tag group="PathSkill" tag="skKnowNobl" name="Knowledge (Nobility)"/>
    <tag group="PathSkill" tag="skDiplo" name="Diplomacy" abbrev="Diplomacy"/>
    <tag group="ClsAllowPs" tag="puPrecogO1" name="Offensive Precognition"/>
    <tag group="ClsAllowPs" tag="puPresOff1" name="Offensive Prescience"/>
    <tag group="Discipline" tag="ScarletThr" name="Scarlet Throne"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skSenseMot" name="Sense Motive"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="puPrecogO1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="puPresOff1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaTraSTP"></bootstrap>
    <bootstrap thing="cPWaManSTP"></bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Scarlet Throne as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.ScarletThr] = 1)</evalrule>
    </thing>
  <thing id="cPWaTraSTP" name="Trance (Scarlet Throne Path)" description="Beginning at 3rd level, while maintaining psionic focus and while maintaining a Scarlet Throne stance, the pathwalker gains a +1 dodge bonus to his AC. This bonus increases by 1 every four psychic warrior levels possessed." compset="ClSpecial">
    <fieldval field="actName" value="Active"/>
    <fieldval field="abValue" value="1"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Calculate bonus amount
      If (field[xTotalLev].value >= 7) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 11) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 15) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 19) Then
        field[abValue].value += 1
      Endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value = 0)

      ~ If not in a Scarlet Throne stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "ScarletThr"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Grant dodge bonus to AC
      #applybonus[tACDodge, hero.child[ArmorClass], field[abValue].value]]]></eval>
    </thing>
  <thing id="cPWaManSTP" name="Maneuver (Scarlet Throne Path)" description="Beginning at 3rd level, as a standard action the pathwalker may expend his psionic focus to move up to his base speed and then make a single attack at his full base attack bonus upon a foe within his range. At 8th level, he gains a +1 competence bonus to attack and damage rolls. This bonus increases by 1 every five psychic warrior levels thereafter." compset="ClSpecial" summary="Spend psi-focus to move and attack as a standard action">
    <fieldval field="actName" value="Active (must expend psionic focus)"/>
    <tag group="User" tag="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="abAction" tag="Standard"/>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      if (field[xTotalLev].value >= 8) then
        field[abValue].value = 2
        var amt as number
        amt = field[xTotalLev].value - 8
        amt = round(amt/5,0,-1)
        field[abValue].value += amt
      endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)

      ~ Add to-hit and damage bonus
      hero.child[Attack].field[Bonus].value += field[abValue].value
      hero.child[Damage].field[Bonus].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cPWPthwSWP" name="Solar Wind Path" description="Perceptive and keen of mind, Solar Wind adherents are often watchful and wary of danger. Their minds provide additional might towards their martial talents in the form of additional psychokinetic flames to their attacks. Skilled marksmen and talented game hunters, these psychic warriors blend their mental powers with martial skill to form their arts of war.\n\n{b}Powers:{/b} {i}Foxhole,{/i}, {i}inevitable strike{/i}*\n\n{b}Skills:{/b} Knowledge (nature), Perception, Survival\n\n{b}Bonus Class Skill:{/b} Perception\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Solar Wind Path" uniqueness="unique">
    <comment><![CDATA[Add Foxhole and Inevitable Strike powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="PathSkill" tag="skPercep" name="Perception"/>
    <tag group="PathSkill" tag="skKnowNat" name="Knowledge (Nature)"/>
    <tag group="PathSkill" tag="skSurvival" name="Survival" abbrev="Survival"/>
    <tag group="ClsAllowPs" tag="puPrecogO1" name="Offensive Precognition"/>
    <tag group="ClsAllowPs" tag="puPresOff1" name="Offensive Prescience"/>
    <tag group="Discipline" tag="SolarWind" name="Solar Wind"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skPercep" name="Perception"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="puFoxho1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="puInvSt1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaManSWP"></bootstrap>
    <bootstrap thing="cPWaTraSWP"></bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Solar Wind as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.SolarWind] = 1)</evalrule>
    </thing>
  <thing id="cPWaManSWP" name="Maneuver (Solar Wind Path)" description="Beginning at 3rd level, any time the pathwalker successfully strikes an enemy with a Solar Wind strike, he may expend his psionic focus to inflict an additional 2d6 points of fire damage. For every five psychic warrior levels possessed by the character after this, the bonus fire damage increases by +1d6." compset="ClSpecial" summary="Spend psi-focus to add fire damage to a Solar Wind strike">
    <fieldval field="actName" value="Active (must expend psionic focus)"/>
    <fieldval field="abValue" value="2"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="User" tag="Activation"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      if (field[xTotalLev].value >= 8) then
        field[abValue].value = 3
        var amt as number
        amt = field[xTotalLev].value - 8
        amt = round(amt/5,0,-1)
        field[abValue].value += amt
      endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value) & "d6"

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)]]></eval>
    <eval phase="Render" priority="15000" index="3"><![CDATA[field[abSumm].text = "Spend psi-focus to add " & field[abValue].value & "d6 fire damage to a Solar Wind strike"]]></eval>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    </thing>
  <thing id="cPWaTraSWP" name="Trance (Solar Wind Path)" description="Beginning at 3rd level, while maintaining psionic focus, the pathwalker gains an additional +1 bonus to attack rolls and he inflicts an additional 1 point of fire damage on all ranged attacks using a Solar Wind associated weapon while maintaining a stance of that discipline. This bonus increases by 1 every four psychic warrior levels thereafter." compset="ClSpecial">
    <fieldval field="actName" value="Active"/>
    <fieldval field="abValue" value="1"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Calculate bonus amount
      If (field[xTotalLev].value >= 7) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 11) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 15) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 19) Then
        field[abValue].value += 1
      Endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value = 0)

      ~ If not in a Solar Wind stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "SolarWind"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Add attack bonus and fire damage to ranged attacks with Solar Wind weapons
      foreach pick in hero from BaseWep where hero.childfound[zPWSolWin].tagids[wFtrGroup.?, " | "]
        eachpick.field[atrBonus].value += field[abValue].value
        #extradamage[eachpick, signed(field[abValue].value) & " Fire", field[thingname].text]
      nexteach]]></eval>
    </thing>
  <thing id="cPWPthwTDP" name="Thrashing Dragon Path" description="Deadly and graceful, the Thrashing Dragon pathwalkers are as swift and vicious as the draconic beings who have inspired their martial talents. Psychic warriors of this martial path push their mental powers to their psychometabolic limits through acrobatic assaults and terrific feats of daring to overtake foes and prove their martial superiority.\n\n{b}Powers:{/b} {i}Dazzling swordplay{/i}, {i}metaphysical weapon{/i}*\n\n{b}Skills:{/b} Acrobatics, Fly, Intimidate\n\n{b}Bonus Class Skill:{/b} Acrobatics\n\n{b}Note:{/b} You need to correctly set one of the Paths selected as your Primary path and the 2nd one as the Secondary path to have everthing calc correctly." compset="CustomSpec" summary="You are a follower of the Thrashing Dragon Path" uniqueness="unique">
    <comment><![CDATA[Add Dazzling Swordplay and Metaphysical Weapon powers to list

    PathSkill - This tag group is used to setup the skills associated to the Path. These skills will only be allowed to be selection from the "PathSkill" class ability.

ClassSkill - This tag group is used to setup the skills that will become the Bonus Ckass Skills.

ClsAllowPs - This tag group is used to setup the Powers that this Path grants. You will also still need to bootstrap the same powers onto this Thing with the "Hide.Power" and "PsyWarrior.PathPower" tags.]]></comment>
    <arrayval field="usrArray" index="0" value="Primary"/>
    <arrayval field="usrArray" index="1" value="Secondary"/>
    <usesource source="pPsiUn"/>
    <tag group="PathSkill" tag="skAcrobat" name="Acrobatics"/>
    <tag group="PathSkill" tag="skFly" name="Fly"/>
    <tag group="PathSkill" tag="skIntim" name="Intimidate"/>
    <tag group="ClsAllowPs" tag="puDazSw1" name="Dazzling Swordplay"/>
    <tag group="ClsAllowPs" tag="puMetaPhW1" name="Metaphysical Weapon"/>
    <tag group="Discipline" tag="ThrashDrag" name="Thrashing Dragon"/>
    <tag group="SpecSource" tag="arPWPthWlk"/>
    <tag group="ClassSkill" tag="skAcrobat" name="Acrobatics"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="puDazSw1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="puMetaPhW1">
      <autotag group="Hide" tag="Power"/>
      <autotag group="PsyWarrior" tag="PathPower"/>
      <autotag group="SpellType" tag="cHelpPWa"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="cPWaTraTDP"></bootstrap>
    <bootstrap thing="cPWaManTDP"></bootstrap>
    <eval phase="First">~ Setup the Psychic Warrior Path
Call PsyWarPath</eval>
    <evalrule phase="Validation" priority="10000" message="You must select Thrashing Dragon as one of your disciplines to use this path">validif (hero.childfound[mHelpPthwk].tagis[Discipline.ThrashDrag] = 1)</evalrule>
    </thing>
  <thing id="cPWaTraTDP" name="Trance (Thrashing Dragon Path)" description="Beginning at 3rd level, while maintaining psionic focus, the pathwalker inflicts an additional 2 points of damage when two-weapon fighting with weapons associated with the Thrashing Dragon discipline and maintaining a stance of that discipline. This bonus increases by 1 every four psychic warrior levels thereafter." compset="ClSpecial" summary="Increase damage with Thrashing Dragon weapons">
    <fieldval field="actName" value="Active"/>
    <fieldval field="abValue" value="2"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="10000" index="2">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ If we've been Disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Calculate bonus amount
      If (field[xTotalLev].value >= 7) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 11) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 15) Then
        field[abValue].value += 1
      Endif
      If (field[xTotalLev].value >= 19) Then
        field[abValue].value += 1
      Endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      var v_focus as number
      call PUPsiFocus
      ~ If Not psionically focused get out now
      doneif (v_focus <> 1)

      ~ If not active get out now
      doneif (field[abilActive].value = 0)

      ~ If not dual-wielding then get out now

      ~ If not in a Thrashing Dragon stance then get out now
      var IsInStance as number
      var targetDisc as string
      targetDisc = "ThrashDrag"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Add attack bonus and fire damage to Thrashing Dragon weapons
      foreach pick in hero from BaseWep where hero.childfound[zPWThraDra].tagids[wFtrGroup.?, " | "]
        eachpick.field[wDamBonus].value += field[abValue].value
      nexteach]]></eval>
    </thing>
  <thing id="cPWaManTDP" name="Maneuver (Thrashing Dragon Path)" description="Beginning at 3rd level, any time that the pathwalker strikes an enemy with two wielded weapons, he may expend his psionic focus to rend the enemy for an additional 2d6 points of damage. For every five psychic warrior levels possessed by the character after this, the bonus rending damage increases by +1d6." compset="ClSpecial" summary="Spend psi-focus to rend for bonus damage">
    <fieldval field="actName" value="Active (must expend psionic focus)"/>
    <fieldval field="abValue" value="2"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="abAction" tag="PUExpFocus"/>
    <tag group="User" tag="Activation"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[      ~ Calculate bonus amount
      if (field[xTotalLev].value >= 8) then
        field[abValue].value = 3
        var amt as number
        amt = field[xTotalLev].value - 8
        amt = round(amt/5,0,-1)
        field[abValue].value += amt
      endif

      ~ Set live name
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value) & "d6"

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ If we're not activated then get out now
      doneif (field[abilActive].value <> 1)]]></eval>
    <eval phase="Render" priority="15000" index="3"><![CDATA[field[abSumm].text = "Spend psi-focus to rend for " & field[abValue].value & "d6 bonus damage"]]></eval>
    <eval phase="First" priority="10000">~ Setup this Maneuver or Trance for the Psy Warrior
Call PsyWarTrMa</eval>
    </thing>
  <thing id="arPWWarsol" name="War Soul" description="Some soulknives have more extensive training in the arts of combat than others, and this lends to them the talents and abilities of the martial disciples who follow the Path of War. By dismissing some of their esoteric studies with their mind blades, they instead focus on the mastering of martial disciplines to make themselves a perfected weapon." compset="ClassVary" uniqueness="unique">
    <arrayval field="cvCustTot" index="3" value="-1"/>
    <arrayval field="cvCustTot" index="4" value="-1"/>
    <arrayval field="cvCustTot" index="5" value="-1"/>
    <arrayval field="cvCustTot" index="6" value="-1"/>
    <arrayval field="cvCustTot" index="7" value="-1"/>
    <arrayval field="cvCustTot" index="8" value="-1"/>
    <arrayval field="cvCustTot" index="9" value="-2"/>
    <arrayval field="cvCustTot" index="10" value="-2"/>
    <arrayval field="cvCustTot" index="11" value="-2"/>
    <arrayval field="cvCustTot" index="12" value="-2"/>
    <arrayval field="cvCustTot" index="13" value="-2"/>
    <arrayval field="cvCustTot" index="14" value="-2"/>
    <arrayval field="cvCustTot" index="15" value="-2"/>
    <arrayval field="cvCustTot" index="16" value="-2"/>
    <arrayval field="cvCustTot" index="17" value="-2"/>
    <arrayval field="cvCustTot" index="18" value="-2"/>
    <arrayval field="cvCustTot" index="19" value="-2"/>
    <usesource source="srcPathOfW"/>
    <tag group="ClassSkill" tag="skSenseMot"/>
    <tag group="AbReplace" tag="cSknPsyStr"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="ClVaryName" tag="AppParen"/>
    <bootstrap thing="cPWWSMBRec">
      <autotag group="ClSpecWhen" tag="4"/>
      </bootstrap>
    <bootstrap thing="cCfgWarsol"></bootstrap>
    <link linkage="varies" thing="cHelpSkn"/>
    </thing>
  <thing id="cPWWSMBRec" name="Martial Blade Recovery" description="At 4th level, psionic channels established during manifestation of a mind blade may allow reclamation of bursts of foreign psychic energy caused by the defeat of an opponent. These bursts of energy can be used to invigorate the mind of the war soul and restore his resolve and skill. If the war soul reduces a living opponent (possessing 1/2 HD or more and an Intelligence score of 3 or higher) to 0 hit points or less, as a swift action the character may recover either a single expended maneuver or his psionic focus. The war soul must be using a mind blade to recover maneuvers in this fashion. This class feature replaces the blade skill gained at 4th level." compset="ClSpecial" summary="Recover maneuver or psi focus when you defeat a non-mindless foe">
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abAction" tag="Swift"/>
    </thing>
  <thing id="mHelpPWWsl" name="War Soul Manuevers" compset="PWManList">
    <arrayval field="cManKnown" index="0" value="3"/>
    <arrayval field="cManKnown" index="1" value="4"/>
    <arrayval field="cManKnown" index="2" value="5"/>
    <arrayval field="cManKnown" index="3" value="5"/>
    <arrayval field="cManKnown" index="4" value="6"/>
    <arrayval field="cManKnown" index="5" value="6"/>
    <arrayval field="cManKnown" index="6" value="7"/>
    <arrayval field="cManKnown" index="7" value="7"/>
    <arrayval field="cManKnown" index="8" value="8"/>
    <arrayval field="cManKnown" index="9" value="8"/>
    <arrayval field="cManKnown" index="10" value="9"/>
    <arrayval field="cManKnown" index="11" value="9"/>
    <arrayval field="cManKnown" index="12" value="10"/>
    <arrayval field="cManKnown" index="13" value="10"/>
    <arrayval field="cManKnown" index="14" value="11"/>
    <arrayval field="cManKnown" index="15" value="11"/>
    <arrayval field="cManKnown" index="16" value="12"/>
    <arrayval field="cManKnown" index="17" value="12"/>
    <arrayval field="cManKnown" index="18" value="13"/>
    <arrayval field="cManKnown" index="19" value="13"/>
    <arrayval field="cManReady" index="0" value="3"/>
    <arrayval field="cManReady" index="1" value="3"/>
    <arrayval field="cManReady" index="2" value="3"/>
    <arrayval field="cManReady" index="3" value="4"/>
    <arrayval field="cManReady" index="4" value="4"/>
    <arrayval field="cManReady" index="5" value="4"/>
    <arrayval field="cManReady" index="6" value="4"/>
    <arrayval field="cManReady" index="7" value="4"/>
    <arrayval field="cManReady" index="8" value="4"/>
    <arrayval field="cManReady" index="9" value="5"/>
    <arrayval field="cManReady" index="10" value="5"/>
    <arrayval field="cManReady" index="11" value="5"/>
    <arrayval field="cManReady" index="12" value="5"/>
    <arrayval field="cManReady" index="13" value="5"/>
    <arrayval field="cManReady" index="14" value="6"/>
    <arrayval field="cManReady" index="15" value="6"/>
    <arrayval field="cManReady" index="16" value="6"/>
    <arrayval field="cManReady" index="17" value="6"/>
    <arrayval field="cManReady" index="18" value="6"/>
    <arrayval field="cManReady" index="19" value="7"/>
    <arrayval field="cStances" index="0" value="1"/>
    <arrayval field="cStances" index="1" value="1"/>
    <arrayval field="cStances" index="2" value="1"/>
    <arrayval field="cStances" index="3" value="2"/>
    <arrayval field="cStances" index="4" value="2"/>
    <arrayval field="cStances" index="5" value="2"/>
    <arrayval field="cStances" index="6" value="2"/>
    <arrayval field="cStances" index="7" value="2"/>
    <arrayval field="cStances" index="8" value="2"/>
    <arrayval field="cStances" index="9" value="3"/>
    <arrayval field="cStances" index="10" value="3"/>
    <arrayval field="cStances" index="11" value="3"/>
    <arrayval field="cStances" index="12" value="3"/>
    <arrayval field="cStances" index="13" value="3"/>
    <arrayval field="cStances" index="14" value="4"/>
    <arrayval field="cStances" index="15" value="4"/>
    <arrayval field="cStances" index="16" value="4"/>
    <arrayval field="cStances" index="17" value="4"/>
    <arrayval field="cStances" index="18" value="4"/>
    <arrayval field="cStances" index="19" value="4"/>
    <arrayval field="cMaxManLvl" index="0" value="1"/>
    <arrayval field="cMaxManLvl" index="1" value="1"/>
    <arrayval field="cMaxManLvl" index="2" value="1"/>
    <arrayval field="cMaxManLvl" index="3" value="2"/>
    <arrayval field="cMaxManLvl" index="4" value="2"/>
    <arrayval field="cMaxManLvl" index="5" value="2"/>
    <arrayval field="cMaxManLvl" index="6" value="3"/>
    <arrayval field="cMaxManLvl" index="7" value="3"/>
    <arrayval field="cMaxManLvl" index="8" value="4"/>
    <arrayval field="cMaxManLvl" index="9" value="4"/>
    <arrayval field="cMaxManLvl" index="10" value="5"/>
    <arrayval field="cMaxManLvl" index="11" value="5"/>
    <arrayval field="cMaxManLvl" index="12" value="6"/>
    <arrayval field="cMaxManLvl" index="13" value="6"/>
    <arrayval field="cMaxManLvl" index="14" value="6"/>
    <arrayval field="cMaxManLvl" index="15" value="6"/>
    <arrayval field="cMaxManLvl" index="16" value="6"/>
    <arrayval field="cMaxManLvl" index="17" value="6"/>
    <arrayval field="cMaxManLvl" index="18" value="6"/>
    <arrayval field="cMaxManLvl" index="19" value="6"/>
    <tag group="Discipline" tag="SolarWind"/>
    <tag group="Discipline" tag="ThrashDrag"/>
    <tag group="UseAttr" tag="aWIS"/>
    <tag group="Discipline" tag="BrokenBlad"/>
    <tag group="PathOfWar" tag="CstManProg"/>
    <tag group="Discipline" tag="VeiledMoon"/>
    <link linkage="powClass" thing="cHelpSkn"/>
    <link linkage="powCfg" thing="cCfgWarsol"/>
    </thing>
  <thing id="cCfgWarsol" name="War Soul Maneuvers" compset="Configure" uniqueness="unique">
    <usesource source="srcPathOfW"/>
    <tag group="PathOfWar" tag="Config"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="mHelpPWWsl"></bootstrap>
    <prereq message="You have too many Manuevers Readied.">
      <validate>var ValidManOn as number
        Call ValidManOn
        @valid = ValidManOn</validate>
      </prereq>
    <prereq message="You have activated more stances than allowed.">
      <validate>var ValidStaOn as number
        Call ValidStaOn
        @valid = ValidStaOn</validate>
      </prereq>
    </thing>
  <thing id="cPWWSBBAtt" name="Broken Blade Attitude" description="While maintaining psionic focus and manifesting his mind blade, the war soulâ€™s combat intuition focuses him towards the deadly end that the Broken Blade adherent pushes for. While in a Broken Blade stance, the character gains a +1 dodge bonus to his AC for every five class levels (minimum of +1), and may use his Wisdom modifier in place of his Dexterity modifier when using the Acrobatics skill or making a Reflex save. The war soul must be wearing medium or lighter armor." compset="CustomSpec" summary="Gain AC bonus and may use WIS for Acrobatics and Ref saves while in a Broken Blade stance" uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="abAction" tag="None"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ Calculate bonus amount
      var bon as number
      bon = maximum(round(field[xTotalLev].value/5,0,-1), 1)
      field[abValue].value = bon

      ~ Stop now if we're not in a Broken Blade stance
      var IsInStance as number
      var targetDisc as string
      targetDisc = "BrokenBlad"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Stop now if we're wearing heavy armor
      doneif (hero.tagis[Hero.HeavyArmor] <> 0)

      ~ Put something in abValue2 so we can check for it in later scripts
      field[abValue2].value = 1

      ~ Grant dodge bonus to AC
      #applybonus[tACDodge, hero.child[ArmorClass], field[abValue].value]

      ~ Allow Acrobatics to use WIS
      perform hero.child[skAcrobat].assign[SkillOpt.aWIS]]]></eval>
    <eval phase="PostAttr" priority="1000" index="2"><![CDATA[      ~ Add bonus amount to livename
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ Stop now if the first script was forced to stop
      doneif (field[abValue2].value < 1)

      ~ Allow Ref save to use WIS
      if (#attrbonus[aWIS] > #attrbonus[aDEX]) then
        perform hero.child[svRef].delete[SaveAbil.aDEX]
        perform hero.child[svRef].assign[SaveAbil.aWIS]
      endif]]></eval>
    </thing>
  <thing id="cPWWSDBShp" name="Discipline Blade Shapes" description="The martial knowledge of the war soul supplements his ability to generate his mind blade. The war soul may manifest his mind blade into the shape of a weapon from a known disciplineâ€™s associated weapon groups, and he may shift between these discipline forms as a move action or as part of a swift action when assuming a stance of that weaponâ€™s discipline. While in the shape of a discipline weapon, the mind blade functions exactly like that weapon and gains the weapons damage, damage type, special properties (such as brace or reach), and critical range and multiplier for a weapon sized appropriately for the war soul. The war soul is always considered to be proficient with his mind blade, regardless of its form. Ranged weapons that use ammunition generate their own standard ammunition out of the mind bladeâ€™s current shape, or may use non-psychically generated ammunition as normal." compset="CustomSpec" summary="Form your mind blade into a discipline weapon" uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="abAction" tag="None"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="fShowWhat" tag="Weapons"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="55000"><![CDATA[var expr as string
expr = " & ("

~ First, get all of our disciplines
perform hero.pulltags[Discipline.?]
var discs as string
discs = tagids[Discipline.?, " | "]

~ Next, get the weapon groups associated with our disciplines and add them to the candidate expression
var i as number
i = 1
foreach pick in hero from Simple where hero.tagids[Discipline.?, "|"]
  if (i > 1) then
    expr &= " | "
  endif
  expr &= eachpick.tagids[wFtrGroup.?, " | "]
  i += 1
nexteach
expr &= ")"
field[usrCandid1].text &= expr]]></eval>
    </thing>
  <thing id="cPWWSThrMB" name="Martial Throw Mind Blade" description="A mind blade is the perfect expression of a war soulâ€™s martial talent and desire for a perfect weapon. With a mighty throw and a powerful will empowering it, the character may expend his psionic focus while throwing his mind blade to initiate a martial maneuver with a range of melee as a ranged attack instead, and resolve the maneuver as per normal at close range (25-ft + 5-ft / 2 initiator levels)." compset="CustomSpec" summary="Throw your mind blade to use a martial strike at range" uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cPWWSSWMnt" name="Solar Wind Mentality" description="The war soulâ€™s mind blade is infused with the light and fire that is the hallmark of the Solar Wind discipline. Whenever using the mind blade as a ranged weapon in a Solar Wind stance, the mind blade gains the {i}flaming{/i} weapon property, and increases its range increment by +10-ft. Finally, the war soul may use his mind blade to generate light as a torch when manifested. The warsoul must be 4th level to select this blade skill.\n\n{b}NOTE:{/b} Currently, this does not automatically add the {i}flaming{/i} property to the mind blade; you will need to add it yourself by clicking the hammer-and-wrench icon on the weapon and selecting &quot;Flaming&quot; on the special ability menu." compset="CustomSpec" summary="When in a Solar Wind stance, your mind blade gains {i}flaming{/i}." uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="1000"><![CDATA[      ~ Stop now if we're not in a Solar Wind stance
      var IsInStance as number
      var targetDisc as string
      targetDisc = "SolarWind"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Find all Mind Blade weapons
      foreach pick in hero from BaseWep where "IsWeapon.wMindBlade & !wClass.TwoHanded"
        eachpick.field[wRangeInc].value += 10
        ~perform eachpick.assign[Ability.iFlaming]
        ~perform eachpick.assign[HasAbility.iFlaming]
        ~perform eachpick.assign[Helper.HasMagSpec]
        ~perform eachpick.gizmo.assign[Ability.iFlaming]
        ~perform eachpick.gizmo.assign[HasAbility.iFlaming]
        ~perform eachpick.gizmo.assign[Helper.HasMagSpec]
      nexteach]]></eval>
    <prereq message="Soulknife level 4+ required">
      <validate><![CDATA[        var classcheck as string
        var levels as number

        classcheck = "Soulknife"

        call PUPreReqs

        validif (levels >= 4)]]></validate>
      </prereq>
    </thing>
  <thing id="cPWWSThrDr" name="Thrashing Dragon Assault" description="The fluid and deadly dance of the Thrashing Dragon war soul brings a level of graceful savagery to battle. While in a Thrashing Dragon stance and using his mind blade as two separate weapons to two-weapon fight, the war soul gains a +1 circumstance bonus to attack rolls. This bonus improves at 5th level to +2, and increases by an additional +1 every five war soul levels." compset="CustomSpec" summary="Gain attack bonus when dual-wielding mind blades in a Thrashing Dragon stance" uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ Calculate bonus amount
      field[abValue].value = 1
      if (field[xTotalLev].value >= 5) then
        field[abValue].value += 1
      endif
      if (field[xTotalLev].value >= 10) then
        field[abValue].value += 1
      endif
      if (field[xTotalLev].value >= 15) then
        field[abValue].value += 1
      endif
      if (field[xTotalLev].value >= 20) then
        field[abValue].value += 1
      endif

      ~ Add bonus to the end of the livename
      field[livename].text = field[thingname].text & " " & signed(field[abValue].value)

      ~ Stop now if we're not in a Thrashing Dragon stance
      var IsInStance as number
      var targetDisc as string
      targetDisc = "ThrashDrag"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Stop now if we're not wielding two mind blades
      doneif (hero.tagcount[Hero.EquipWep] < 2)

      ~ Find all Mind Blade weapons and add the attack bonus
      foreach pick in hero from BaseWep where "IsWeapon.wMindBlade & !wClass.TwoHanded"
        eachpick.field[atmModCirc].value += field[abValue].value
      nexteach]]></eval>
    </thing>
  <thing id="cPWWSVMMys" name="Veiled Moon Mystery" description="The deadly mystery of the Veiled Moon shadows the actions of these war souls, and aids them in their understanding of the discipline. While in a Veiled Moon stance, the character may choose to use his Wisdom modifier in place of his Dexterity modifier when using the Stealth skill and gains the hide in plain sight special ability. The soulknife must be at least 8th level to select this blade skill." compset="CustomSpec" summary="Hide in Plain Sight and use WIS for Stealth while in a Veiled Moon stance" uniqueness="unique">
    <tag group="SpecSource" tag="arPWWarsol"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="abCategory" tag="PUBladeSk"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[      ~ Stop now if we're not in a Veiled Moon stance
      var IsInStance as number
      var targetDisc as string
      targetDisc = "VeiledMoon"
      call PWinDSta
      doneif (IsInStance = 0)

      ~ Allow Stealth use WIS
      perform hero.child[skStealth].assign[SkillOpt.aWIS]]]></eval>
    <prereq message="Soulknife level 8+ required">
      <validate><![CDATA[        var classcheck as string
        var levels as number

        classcheck = "Soulknife"

        call PUPreReqs

        validif (levels >= 8)]]></validate>
      </prereq>
    </thing>
  </document>
