<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_BasicPack_ShadowChemosh - Adjustments Misc"/>
  <fileinfo>
    <info_author><![CDATA[
      Author:  Tim Shadow
      Email: shadowchemosh@yahoo.com
      File Name changed from PFRPG_Adjustments.user => COM_BasicPack_ShadowChemosh - Adjustments Misc.user]]></info_author>
    <info_history><![CDATA[
January 1, 2015 - Tim Shadow
-Added "Mythic Ability, Add Trackable"
-Added "Mythic Ability, Remove Tracker"
-Added "Improved Weapon Finesse" feat that requires the feat "Weapon Finesse" and gives "Dex" to damage with light and finesse weapons.
-Added "Outflank" feat that can be activated to increase the "Flanking" condition bonus to +4.
-Added "Bolt Ace" archetype. This version of the Bolt Ace loses all access to guns and gains access to all crossbows. In addition the bolt ace loses Gunsmithing and gains Rapid Reload at first level.
-Added "Superstition" rage power that can be activated on the In-Play tab. This makes it easier to keep track of all those Morale bonus stacking issues easier.
-Added "Deal Nonlethal Dmg (-4H)" combat action so that the -4H is easily taken into account and all weapons will show they do "nonlethal" damage.
-Fixed all the "Weapon CMB" and "Weapon CMD" adjustments to better display weapon specific bonuses for Disarm, Sunder, and Trip attacks.
-Changed "Hero, Ability score increase" adjustment to allow negative numbers.
-Added "Combat: Flanking Bonus" allows you to increase/decrease the flanking bonus condition. This is a "Conferred Ability Adjustment" and is used to help those with Outflank feats or Menacing weapon property.

v2.11 (Tim Shadow) Released 11/25/2014
-Misc Fixes to many adjustments.
-Fixed "Weapon Order" fixed to work with Magic Shield Attacks.
-Added the Underwater/Swimming condition.
-Added "Feat: Values" adjustment for adjusting the Values of a feat up or down.
-Added "Equipment: Values" adjustment for adjusting the Values of a selected piece of gear up or down.
-Added "Race, Number of Hands" to adjust the number of hands/arms a creature has.
-Added "Class Ability: Values" to adjust Value 1, 2, 3, 4, or 5 fields. This new adjustment makes use of the new 2nd selector so I have deprecated the old "Class Ability: Value1" through 4 adjustments.
-Added "Class Ability, Remove Tracker" that allows for making a class ability no longer be tracked on the In-Play tab.
-Added "Class Ability, Add Tracker" that allows for making a class ability be trackable on the In-Play tab.
-Added "Custom Text: Ability" and "Custom Name: Ability" for changing the names of a Race or Class ability.
-Added "Skill Bonus, Situational-All Ability Score" for setting a situational note on all skills of the selected ability score.
-Added "Weapon Attacks: Force Extra High" for forcing a weapon to display a 2nd attack at the characters highest base attack bonus.
-Added "Weapon Attacks: Force Single Attack" for forcing a weapon to having only a single attack display.
-Added "Equipment, Notes" that allows you to append up to 100 characters to a selected piece of gear description text.
-Added "Race, Over/Under sized Weapons" adjustments that changes the sized weapons your race can wield. So if you are size medium then undersized weapons means you can only use size Small weapons.  If you apply Oversized weapons then you can use medium or large sized weapons.
-Added "Skill Bonus, Type" adjustment that allows for adjusting a skill bonus by the selected bonus type.

v2.10 (Tim Shadow) Released 8/29/2014
-Added more animals for Beast Shape spell adjustment.
-Fixes to the Beast Shape spell adjustment.
--Natural Attacks always get damage now.
--We remove armor/shields when we polymorph except Wild armor.
-Added Advance Class Guide class concentration skills (ie Bloodrager, Shaman).
-Added section seperators in the Editor for Beast Shape setup.
-Added "Weapon Range Increment" adjustment for changing a ranged weapons Range Increment.
-Added "Damage Bonus, Situational" adjustment for setting situational text on to your weapons.
-Added "Spell-Like Abilities Prerequisites" adjustment for allowing your character to meet the prerequisites of feats like "Arcane Strike".

v2.9 (Tim Shadow) Released 6/29/2014
-Adjustments that use livename features have been fixed. Hopefully this time it sticks!
-New "PFS, Feat & Traits" adjustment for making any feat or trait valid for PFS play.
-New "PFS, Archetype" adjustment for making any archetype valid for PFS play.
-New "PFS, xxx" adjustments now let you type a note into the "(source)" section of the adjustment and it will display on the name of the feat, trait, or equipment. This allows you to eaisly mark which boon allows for this feat, trait or equipment to be valid.
-New adjustment "Equipment, Container Weight" that lets you increase/decrease the amount of weight a container can now carry.
-New "Weapon Proficiency, Specific" adjustment lets you select a specific weapon on your character to become proficient with.
-New "Custom Name: Race" and "Custom Text: Race" adjustments added that allow for overwriting or appending to the name of your race.
-All Custom "Custom Name: " and "Custom Text:" adjustments have been enhanced to allow using either the "(Source)" or "(Duration)" fields. This allows these adjustments to work correctly on the "Personal" tab now.
-Included the Conentration skills for classes.

v2.8 (Tim Shadow) Released 3/3/2014
-Fixed "Weapon Order" so that it works with all types of weapons again.
-Added "Class, Base Attack Bonus" adjustment which allows to change the base attack bonus progression value from Slow, Medium or Fast rate.
-Added "Class, Fort Save", "Class, Ref Save", and "Class, Will Save" that allow for changing the save progression of a selected class from Slow, Medium or Fast.

v2.7 (Tim Shadow) Released 2/28/2014
-Fixed livename scripts that broke in Pathfinder v8.8.
-Added "Weapon Full Attack, ALL" and "Weapon Full Attack, Select" to allow forcing all weapons or a single selected weapon to get all its attacks.

v2.6 (Tim Shadow) Released 1/26/2014
-Added "Mythic Tier Abilities" that lets you adjust the count of Mythic Ability Score Increases, Mythic Feats, Mythic Other Abilities, Mythic Path Abilities, and Mythic Spells.
-Added "Caster Level, Elemental Spells"
-Added "Spell DC, Specific Subschool" and "Caster Level, Subschool"
-Added "- Custom Spell Weapon -" which allows for adding a customizable weapon so that you can get spells damage to be rolled on the iPad.
-Added "Equipment, Remove Activation" which will make a piece of equipment no longer show its activation check mark on the In-Play tab.
-Added "Race, Die Size" which allows for adjusting the die size of a race up or down. In example change a d8 to d10.
-Added "PFS, Equipment Valid" and "PFS, Race Valid" that allows for making a piece of equipment or your race to be valid for PFS play. This can happen when you have a boon to play a specific race.
-Name change "Equipment, Remove from In-Play" to "Equipment, Remove Trackable".
-Name change "Equipment, Make Trackable on In-Play" to "Equipment, Add Tracable".
-Added "Equipment, Add Activation" adjustment that will make a piece of equipment have a activation option on the "In-Play" tab.
-Added "Equipment, Remove Activation" adjustment that removes a equipment's activation option from the "In-Play" tab.
-Added "Equipment, Weapon Enhancement" and "Equipment, Armor Enhancement" which allows for increasing the magical bonus of a specific suite of armor or weapon.

v2.5 (Tim Shadow) Released 10/5/2013
-Added "- Custom Spell Selection -" spell adjustment which allows selection of a custom spell and changes the adjustments name to match.
-Added "- Custom Spell Text -" spell adjustment that allows you to type the name of any spell into the (Source) section and the adjustment name changes to match.
-Added "Custom Name: Spell" and "Custom Text: Spell" which allow for changing the name of a Spell or appending additional text to the Spells name.
-Changed name of "Weapon: Custom Text" to be "Custom Text: Weapon" to match all the other adjustments.
-Added "Custom Name: Weapon" to allow for setting a whole new name on the weapon.
-Added "Natural Weapon: Number of Attacks" to adjust the number of natural attacks a creature has. So if normally it has Claws x2 you can change it to Claws x4.
-Added "Equipment, Armor No Longer Slows" which allows for removing the armor slow tags.
-Added "Class Ability: DC" which allows for adjusting a class ability DC value up or down.
-Added "Equipment, Remove from In-Play" this allows to remove the Tracker that gets added for Weapons, Magic Items, and Gear items.
-Added "Equipment, Make Trackable on In-Play" which allows for forcing a item to appear on the In-Play tab. This includes scrolls.
-Added "Caster Level, School" adds a bonus/penalty to all your spells caster levels of a specific school of magic.
-Added "Caster Level, Spell" adds a bonus/penalty to the selected spells caster level.
-Added "Class Ability Custom: (Primary, Secondary, Tertiary, Quintenary, Quintenary)" allows for adjusting a classes Custom Ability count.
-Added "Class, Bonus Feats Secondary" to adjust the number of secondary bonus feats a class gets.
-Added "Class, Bonus Feats" to adjust the number of bonus feats a class gets.
-Added "Mythic Power Points" to adjust the number of mythic points a character has.
-Added "Hero, Ability Score Increase" to adjust the number of Ability Score Increases that a character gets.
-Added "Mythic Surge Die Size" to increase/decrease the die size of your mythic surge ability.

v2.4 (Tim Shadow) Released 7/12/2013
-Added "Weapon Bane Greater Dmg" adjustment to have +4d6 damage display.
-Added "Attack, Base Attack Bonus" adjustment that lets one adjust the BAB of their character.
-Added "Weapon Damage Type, XXXX" (Bludgeoning, Slashing, Piercing) to change the selected weapon to selected type. This completely overrides the base weapon type even if its a P/B weapon.
-Added "Weapon Damage Type Add, XXXX" (Bludgeoning, Slashing, Piercing) to add the selected  type to a weapon. This adjustment does NOT change the base weapon type only adds to it.
-Added "Weapon Damage Attribute, XXX" (Cha, Con, Dex, Int, Wis) to allow the damage of the selected weapon to be calculated by the seleted attribute instead of Strength.
-Added "Natural Weapon: Other Ranged" and "Natural Weapon: Other Melee" adjustments that allow for adding a non-specific natural attack. Then you can set the name and values yourself on the adjustment.
-Fixed the "Natural Weapon: XXXX" adjustments so that Up/Down the natural attack die size now follows the Bestiary "Table: Natural Attacks by Size" exactly.
--The natural Attack adjustments now allow for you type in the "exact" damage tag you wish to use in the "(Source)" section of the adjustment. This is an advanced feature and should be used with care only when you are use to working with tags in the Editor.
-Added "Ability: Restore" which allows for restoring a class or racial special that has been disabled by something else (ie an Archetype).
-Added "Armor Class, Situational" which allows for setting a situtional note to your armor class. This will get printed to a character sheet.
--Added "Attack Bonus, Situational" which allows for setting a situtional note to your attack rolls. This will get printed to a character sheet.
-Added "Natural Weapon: Secondary" which forces a natural attack to be treated as a secondary attack.
-Added "Natural Weapon: Primary" which forces a natural attack to be treated as a primary attack.
-Added "Natural Attack: Two-Handed Damage" which forces a natural attack to be treated like a two-handed weapon and gain 1.5x strength damage.
-Added "Weapon Attack Melee Attribute, XXX" (Dex, Con, Int, Wis, Cha) which allows one to change the attribute used to calculate the melee attack bonus of a selected weapon.
-Added "Weapon Attack Ranged Attribute, XXX" (Str, Con, Int, Wis, Cha) which allows one to change the attribute used to calculate the ranged attack bonus of a selected weapon.
-Added "Racial Ability, Scent" which adds the Scent special ability to your character.
-Added "Racial Ability, Darkvision" which add Darkvision to your character and set the distance of it.
-Added "Racial Ability, Low-Light" which adds the Low-Light special ability to your character.
-Added "Combat Maneuver Defense, Situational" to allow for adding a text note only to the CMD value. As of Pathfinder v7.16 the text does not display yet on the character or print to the sheet. This may change in a future version so I am adding this adjustment now.
-Added "Combat Maneuver Bonus, Situational" to allow for adding a text note only to the CMB value. As of Pathfinder v7.16 the text does not display yet on the character or print to the sheet. This may change in a future version so I am adding this adjustment now.
--Added "Combat Maneuver, Situational" to allow for adding a text note to both your CMB and CMD values.

v2.3 (Tim Shadow) Released May 13, 2013
-Deprecated dozens of adjustments.
--This means you could open a .por file and get a red warning message say "Deprecated: This selection is not permitted (all effects are ignored".
--When you see this go to the "Adjust" tab and look for the adjustment that is called "Deprecated" and click on the question mark. This will tell you what new or official adjustment to add in this Deprecated adjustments place.
-Added new adjustments:
--"Weapon Hide" which hides any weapon you select.
--"Class Skill, Remove" make a class skill into a non-class skill.
--"Class, Die Size" change the die size of a selected class.
--"Skill Bonus, All of Type" allows you to add a bonus/penalty to all Craft, Knowledge, Perform, or Proffesion skills.
--Many old adjustments now have a drop down selection.  So when adding a Specific Bonus Type (Luck, Insight) to saving throws you get a drop down list of the types instead of having each type be a different adjustment.
--"Saving Throw (All), Type", "Saving Throw (Fort), Type", "Saving Throw (Ref), Type", and "Saving Throw (Will), Type".
--"Feat: Rapid Shot" allows you to add extra text to a specific weapon about Rapid Shot. This is helpful for those using printed sheets.
--"Feat: Power Attack" allows you to add extra text to a specific weapon about Power Attack. This is helpful for those using printed sheets.
--"Custom Name: Equipment" (Bodrin) allows for changing the name of any piece of equipment on your character.
--"Custom Name: Armor" (Bodrin) allows for changing the name of any armor on your character.
--"Custom Text : Armor" (Bodrin) allows for adding additional text to the end of any armor on your character.
-Fixed "Weapon: Bane Dmg" to now show the +2d6 damage.


v2.2 (Tim Shadow) Released January 6, 2013
-Added "Ability Score (Restore)" adjustment that restores an ability score that is set to -. This happens for races like undead and constructs.
-Added "Weapon Hide" adjustment that causes any weapon no longer display. Use this to hide a natural weapon or Unarmed Strike.

December 12, 2012 - Tim Shadow (v2.1)
-Added new skill bonus adjustments that can affect ALL skills assocaited to the same attribute (ie Charisma, Constitution, Dexterity, Intelligence, Strength, and Wisdom).
-Added new adjustment for giving a bonus/penalty to the DC of all your spells
-Added new adjustment for giving a bonus/penalty to the DC of all spells of a specific school of magic.

October 10, 2012 - Tim Shadow (v2.0)
-Added in ValaraukarU's "Skill Bonus, Situational" adjustment that allows for adding situational text bonuses to Skills.
-Added in "Weapon Unarmed Strike" adjustment that will add a 2nd Unarmed Strike to your character. This is useful if you want to setup two-weapon fighting with unarmed strikes.

September 18, 2012 - Tim Shadow
-Added "Weapon Hide on Print out" adjustment that prevents a weapon from being outputed to a character sheet.
-Added "Weapon Elemental Dmg, Custom" adjustment which allows you to set the custom text that gets displayed next to a weapon.  So if you select this adjustment and set it say "+2d6 Butter" than a dagger would read "1d4+2d6 Butter" for its damage.
-Updated the adjustments that added elemental wording to use the new Pathfinder v7.0 methods.
-Changed the name of the elemental weapon adjustments to be "Weapon Elemental Dmg" so they all sort together.
-Changed "Weapon Bane Dmg" to work with the new enhancments to Bane weapons in Pathfinder v7.0.
-Noted that "Weapon: Vicious Dmg" adjustmet has been depreciated with the new changes done in Pathfinder v7.0.  You should remove from your character as this adjustment will be removed in a future update.
-With the new "save All" mechanic added I added the following new adjustments: Saving Throw, All (Alchemical); Saving Throw, All (Circumstance); Saving Throw, All (Enhancement); Saving Throw, All (Insight); Saving Throw, All (Luck), Saving Throw, All (Morale); Saving Throw, All (Profane); Saving Throw, All (Resistance); Saving Throw, All (Sacred); Saving Throw, All (Trait).
-Added new "Saving Throw, Situational Modifiers" that allows you to set a custom situation modifier for your character.  In example lets say you have an ability called "Shadow Fire" that gives a +2 bonus vs Fireballs on Reflex saves.  You add this adjustment then select "Reflex" from the drop down menu.  In the "(Source)" area you type in "Shadow Fire" and in the "(Duration)" area you type in "+2 vs Fireball".  Now HL will display the "Shadow Fire: +2 vs Fireball" on the Relfex saving throw.

9/8/2012 - Tim Shadow
-Added "Racial Ability, Disable" adjustment that allows you to pick a Racial Special and disable it.
-Added "Weapon Order" that allows to change the display order of weapons.

8/26/2012 - Tim Shadow
-Added "Weapon Flurry Melee Attack Bonus" and "Weapon Flurry Ranged Attack Bonus" adjustments which allow adjusting the new "Flurry" values that HL added in Pathfinder v6.20.
-Added "pS2wSize" Natural Weapon: Size adjustment that increase or decrease the die size of a natural weapon.
-Added "Caster Level" adjustment to just change the CL for a single class.

5/24/2012 - Tim Shadow
-Added new "Weapon: Vicious Dmg" adjustment so that you can dislay the +2d6, 1d6 to self damage next to your vicious weapon.

4/14/2012 - Tim Shadow
-Added Betsuni's "Weapon CMB" weapon adjustment that adjusts HL's global values based on the weapon you equip.

2/25/2012 - Tim Shadow
-Added new "Weapon Bonus" that gives a bonus to attack and damage.
-Added new "Character Sheet: DM" adjustment that causes everything on your character to print to character sheet. This includes racial specials that don't normally print to your sheet.

2/20/2012 - Tim Shadow
-Added new "Weapon: Custom Text" adjustment so you can add totally custom text next to your weapon to display on printed character sheets.
-Added new "Weapon: Bane Dmg" adjustment so that you can correctly apply the Bane weapon property bonus to a weapon.

7/8/2011 - Tim Shadow
Added new natural weapon adjustments:
-Natural Weapon: Bite
-Natural Weapon: Claw
-Natural Weapon: Gore
-Natural Weapon: Grab
-Natural Weapon: Poison, CHA
-Natural Weapon: Poison, CON
-Natural Weapon: Poison, DEX
-Natural Weapon: Poison, STR
-Natural Weapon: Slam
-Natural Weapon: Sting
-Natural Weapon: Tail Slap
-Natural Weapon: Talons
-Natural Weapon: Wing

4/22/2011 - Tim Shadow
-Added Named Saving throws for: Alchemical, Circumstance, Enhancement, Insight, Luck, Morale, Profane, Resistance, Sacred, and Trait.

12/18/2010 - Tim Shadow
-Added "Weapon Trip: CMB" and "Weapon Trip: CMD"
-Took out old spells and adjustments.  Made ready for release to the community.
-Added a new Source and attached all the adjustments to it.

12/12/2010 - Tim Shadow
-Added "Acid, Cold, Electricity, and Fire" damage that can be added to weapons.
-Fixed Damage reduction to be able to remove current TAG set values.
-Added "Weapon: Crit Range" which will let you set the crit range for a weapon completely overriding the orginial value.
-Fixed DR adjustments to correctly override the DR value for each case.
-Added "Weapon: Crit Multiplier" to adjust the x2,x3,x4 values of a selected weapon.

11/1/10 - Tim Shadow
-Added CMB/CMD weapon adjusts

10/24/2010 - Tim Shadow
-Added DR/evil; DR/good; DR/magic; DR/piercing; DR/silver; DR/slashing; DR/bludgeoning; DR/adamantine
-Added Armor Class(Touch) which will stack with anything and it only adjusts the characters Touch AC.

8/21/2010 - Tim Shadow
-Added different 'Specific' Armor adjustment types(ie natural, shield...)

1/14/2010 - Tim Shadow
-Created New]]></info_history>
    </fileinfo>
  <thing id="pS2wFire" name="Weapon Elemental Dmg, Fire" description="Select this adjustment to show &quot;+1d6 Fire&quot; damage next to your weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      #extradamage[field[pChosen].chosen,"+1d6 Fire",field[name].text]]]></eval>
    </thing>
  <thing id="pS2wCold" name="Weapon Elemental Dmg, Cold" description="Select this adjustment to show &quot;+1d6 Cold&quot; damage next to your weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      #extradamage[field[pChosen].chosen,"+1d6 Cold",field[name].text]]]></eval>
    </thing>
  <thing id="pS2wAcid" name="Weapon Elemental Dmg, Acid" description="Select this adjustment to show &quot;+1d6 Acid&quot; damage next to your weapon name." compset="InPlay">
    <fieldval field="pSource" value="+1d6 Acid"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Add extra damage
      #extradamage[field[pChosen].chosen,"+1d6 Acid",field[name].text]]]></eval>
    </thing>
  <thing id="pS2wElectr" name="Weapon Elemental Dmg, Electricity" description="Select this adjustment to show &quot;+1d6 Electricity&quot; damage next to your weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      #extradamage[field[pChosen].chosen,"+1d6 Electricity",field[name].text]]]></eval>
    </thing>
  <thing id="pS2wCritRa" name="Weapon: Crit Range" description="Select this adjustment to adjust the Critical range of a specific weapon yourself.  So if you set the counter to 2 then the critical range will be 18-20.  If set to 6 it will be 14-20.  This adjustment also will override other critical range changing feats and abilities(ie Keen &amp; Improved Critical Feat) and lets you manually set the critical range value." compset="InPlay">
    <fieldval field="pMaximum" value="10"/>
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      var sCrit as String
      var nCrit as number
      ~ Remove all crit tags
      perform field[pChosen].chosen.delete[wCritMin.?]
      ~ Remove Keen and Improved Critical feat
      perform field[pChosen].chosen.delete[Helper.Keen]
      perform field[pChosen].chosen.delete[Broadcast.ImpCrit]
      ~ Calc numeric crit by taking 20 and subtracking the counter
      nCrit = 20 - field[pAdjust].value
      ~ Create the Crit string value
      sCrit = "wCritMin." & nCrit
      ~ Assign the string to the weapon
      perform field[pChosen].chosen.assignstr[sCrit]]]></eval>
    </thing>
  <thing id="pS2wSonic" name="Weapon Elemental Dmg, Sonic" description="Select this adjustment to show &quot;+1d6 Sonic&quot; damage next to your weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      #extradamage[field[pChosen].chosen,"+1d6 Sonic",field[name].text]]]></eval>
    </thing>
  <thing id="pSwCritMul" name="Weapon: Crit Multiplier" description="Select this adjustment to adjust the Critical Multiplier of a specific weapon yourself.  So if you set the counter to 2 then the critical multiplier will be x2 or 3 will be x3. This adjustment also overrides other critical changing feats and abilities which allows for manually setting the critical multiplier value yourself." compset="InPlay">
    <fieldval field="pMaximum" value="4"/>
    <fieldval field="pMinimum" value="2"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      var sCrit as String
      ~ Remove all current wCritMult tags
      perform field[pChosen].chosen.delete[wCritMult.?]

      ~ Create the Crit string value
      sCrit = "wCritMult." & field[pAdjust].value

      ~ Assign the string to the weapon
      perform field[pChosen].chosen.assignstr[sCrit]]]></eval>
    </thing>
  <thing id="pS2wCMB" name="Weapon CMB" description="Select this adjustment to show additional CMB text next to your weapon. In example a Sai gets a +2 bonus to Sunder on its CMB.  So add this adjustment, select the Sai from your current weapons, and set the counter to +2 to your have your new calculated bonus show next to your weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~Calc CMB as CMB + Adjustment counter
      field[abValue].value += hero.child[Maneuver].field[tCMB].value + field[pAdjust].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " CMB" & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="pS2CMBsund" name="Weapon CMB, Sunder" description="Select this adjustment to show additional combat manuever bonus for trip attacks on a single specific weapon. When a weapon is selected the phrase &quot;Sunder-CMB&quot; plus your base CMB will show next to the weapon name. You can use the counter to up or down the value shown." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc new CMB value (CMB - Sunder CMB) + Weapon Bonus + Adjustment Counter
      field[abValue].value += (hero.child[manSunder].field[manCMB].value - hero.child[Maneuver].field[tCMB].value) + field[pAdjust].value + field[pChosen].chosen.field[wAttack].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Sunder-CMB" & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="pS2CMBdisa" name="Weapon CMB, Disarm" description="Select this adjustment to show additional combat manuever bonus for trip attacks on a single specific weapon. When a weapon is selected the phrase &quot;Disarm-CMB&quot; plus your base CMB will show next to the weapon name. You can use the counter to up or down the value shown." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc new CMB value (CMB - Disarm CMB) + Weapon Bonus + Adjustment Counter
      field[abValue].value += (hero.child[manDisarm].field[manCMB].value - hero.child[Maneuver].field[tCMB].value) + field[pAdjust].value + field[pChosen].chosen.field[wAttack].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Disarm-CMB" & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="pS2CMBtrip" name="Weapon CMB, Trip" description="Select this adjustment to show additional combat manuever bonus for trip attacks on a single specific weapon. When a weapon is selected the phrase &quot;Trip-CMB&quot; plus your base CMB will show next to the weapon name. You can use the counter to up or down the value shown." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc new CMB value (CMB - Trip CMB) + Weapon Bonus + Adjustment Counter
      field[abValue].value += (hero.child[manTrip].field[manCMB].value - hero.child[Maneuver].field[tCMB].value) + field[pAdjust].value + field[pChosen].chosen.field[wAttack].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Trip-CMB" & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="pS2wCMD" name="Weapon CMD" description="Select this adjustment to show additional CMD text next to your weapon.  In example a Elven Curve Blade gets a +2 bonus to prevent from being Sundered. So add this adjustment, select the Curve Blade from your current weapons, and set the counter to +2 to your have your new calculated bonus show next to your weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc CMD value
      field[abValue].value += hero.child[Maneuver].field[tCMD].value + field[pAdjust].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " CMD " & field[abValue].value]]></eval>
    </thing>
  <thing id="pS2CMDdisa" name="Weapon CMD, Disarm" description="Select this adjustment to show additional text.  When a weapon is selected the phrase &quot;Disarm-CMD&quot; plus your base CMD and the counter from this adjustment will show next to the weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc new CMD value
      field[abValue].value = hero.child[manDisarm].field[manCMD].value + field[pAdjust].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Disarm-CMD " & field[abValue].value]]></eval>
    </thing>
  <thing id="pS2CMDsund" name="Weapon CMD, Sunder" description="Select this adjustment to show additional text.  When a weapon is selected the phrase &quot;Sunder-CMD&quot; plus your base CMD and the counter from this adjustment will show next to the weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc CMD value
      field[abValue].value += hero.child[manSunder].field[manCMD].value + field[pAdjust].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Sunder-CMD " & field[abValue].value]]></eval>
    </thing>
  <thing id="pS2CMDtrip" name="Weapon CMD, Trip" description="Select this adjustment to show additional text.  When a weapon is selected the phrase Trip-CMD&quot; plus your base CMD and the counter from this adjustment will show next to the weapon name." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Calc CMD value
      field[abValue].value += hero.child[manTrip].field[manCMD].value + field[pAdjust].value

      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & " Trip-CMD " & field[abValue].value]]></eval>
    </thing>
  <thing id="pS2wBite" name="Natural Weapon: Bite" description="Select this adjustment to have a Bite natural attack added to your character.  Then from the drop down box you can select the Bite natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Bite"/>
    <fieldval field="pMinimum" value="-4"/>
    <fieldval field="pMaximum" value="4"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    </thing>
  <thing id="pS2wGrab" name="Natural Weapon: Grab" description="Select this adjustment to have a Grab racial ability added to your character.  Then from the drop down box you can select the natural attack this grab is associated to and the extra wording &quot;plus grab&quot; will be added to the natural attack selected.  You can also change the wording using the text box." compset="InPlay">
    <fieldval field="pDuration" value=" plus grab"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raGrab">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="20501"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      #extradamage[field[pChosen].chosen,field[pDuration].text,field[name].text]]]></eval>
    </thing>
  <thing id="pS2wClaw" name="Natural Weapon: Claw" description="Select this adjustment to have a 2x Claw natural attacks added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Claw x2"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wGore" name="Natural Weapon: Gore" description="Select this adjustment to have a Gore natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Gore"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wWing" name="Natural Weapon: Wing" description="Select this adjustment to have a Wing natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Wing"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wWing">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wTailSl" name="Natural Weapon: Tail Slap" description="Select this adjustment to have a Tail Slap natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Tail Slap"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wTailSlap">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wSlam" name="Natural Weapon: Slam" description="Select this adjustment to have a Slam natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Slam"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wSting" name="Natural Weapon: Sting" description="Select this adjustment to have a Sting natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Sting"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wSting">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wTalons" name="Natural Weapon: Talons" description="Select this adjustment to have a 2x Talon natural attacks added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Talons x2"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wTalon">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wOthMel" name="Natural Weapon: Other Melee" description="Select this adjustment to have a Other Melee natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Other Melee"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wOtherMel">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wOthRng" name="Natural Weapon: Other Ranged" description="Select this adjustment to have a Other Ranged natural attack added to your character.  Then from the drop down box you can select the natural attack to change the following:\n\n{B}Duration:{/b} Used to set the name of the natural attack by typing into the duration text box area.\n{b}Counter:{/b} Used to Up/Down the damage of the natural attack based on the Bestiary &quot;Table: Natural Attacks by Size&quot;.\n{b}Source:{/b} Can be used to set the exact Weapon Damage tag.  In example typing &quot;1d12_404&quot; would force the damage die to be 1d12. This means the counter value will get ignored." compset="InPlay">
    <fieldval field="pDuration" value="Other Melee"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="wOtherRng">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    <eval phase="PreLevel" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      call S2SetNatDm]]></eval>
    </thing>
  <thing id="pS2wPoiCON" name="Natural Weapon: Poison, CON" description="Select this adjustment to add a CON based poison attack on to a specific natural weapon.  Use the drop down box to select the natural weapon this is to apply to.  Then use the following fields to set the poison attributes:\n\nDrop down box selects the natural attack the wording (Plus Poison) is to be added to.\n\nThe counter is used to set the die size of the CON damage dice. So if set to 4 it will show 1d4 CON damage.\n\nThe duration, default value of 1 round, is used to set the number of rounds the poison lasts.\n\nThe (source) section is used to set the number of additional cures the poison takes to remove.  The default for poison is 1 round so if you change the (source) text to be 1 then it will take 2 cures to save from this poison." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pDuration" value="1 round"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raPoiCON">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      #extradamage[field[pChosen].chosen," plus Con poison",field[name].text]]]></eval>
    <eval phase="PreLevel" priority="10000" index="3"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set poison Die size (ie 1d4, 1d6)
      #value[raPoiCON] += field[pAdjust].value
      ~ set number of cure saves to remove poison
      #value2[raPoiCON] += field[pSource].text
      ~ Set Number of rounds the poison lasts
      hero.child[raPoiCON].field[abDuration].value += field[pDuration].text]]></eval>
    </thing>
  <thing id="pS2wPoiCHA" name="Natural Weapon: Poison, CHA" description="Select this adjustment to add a CHA based poison attack on to a specific natural weapon.  Use the drop down box to select the natural weapon this is to apply to.  Then use the following fields to set the poison attributes:\n\nDrop down box selects the natural attack the wording (Plus Poison) is to be added to.\n\nThe counter is used to set the die size of the CHA damage dice. So if set to 4 it will show 1d4 CHA damage.\n\nThe duration, default value of 1 round, is used to set the number of rounds the poison lasts.\n\nThe (source) section is used to set the number of additional cures the poison takes to remove.  The default for poison is 1 round so if you change the (source) text to be 1 then it will take 2 cures to save from this poison." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pDuration" value="1 round"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raPoiCHA">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      #extradamage[field[pChosen].chosen," plus Cha poison",field[name].text]]]></eval>
    <eval phase="PreLevel" priority="10000" index="3"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set poison Die size (ie 1d4, 1d6)
      #value[raPoiCHA] += field[pAdjust].value
      ~ set number of cure saves to remove poison
      #value2[raPoiCHA] += field[pSource].text
      ~ Set Number of rounds the poison lasts
      hero.child[raPoiCHA].field[abDuration].value += field[pDuration].text]]></eval>
    </thing>
  <thing id="pS2wPoiDEX" name="Natural Weapon: Poison, DEX" description="Select this adjustment to add a DEX based poison attack on to a specific natural weapon.  Use the drop down box to select the natural weapon this is to apply to.  Then use the following fields to set the poison attributes:\n\nDrop down box selects the natural attack the wording (Plus Poison) is to be added to.\n\nThe counter is used to set the die size of the DEX damage dice. So if set to 4 it will show 1d4 DEX damage.\n\nThe duration, default value of 1 round, is used to set the number of rounds the poison lasts.\n\nThe (source) section is used to set the number of additional cures the poison takes to remove.  The default for poison is 1 round so if you change the (source) text to be 1 then it will take 2 cures to save from this poison." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pDuration" value="1 round"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raPoiDEX">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      #extradamage[field[pChosen].chosen," plus Dex poison",field[name].text]]]></eval>
    <eval phase="PreLevel" priority="10000" index="3"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set poison Die size (ie 1d4, 1d6)
      #value[raPoiDEX] += field[pAdjust].value
      ~ set number of cure saves to remove poison
      #value2[raPoiDEX] += field[pSource].text
      ~ Set Number of rounds the poison lasts
      hero.child[raPoiDEX].field[abDuration].value += field[pDuration].text]]></eval>
    </thing>
  <thing id="pS2wPoiSTR" name="Natural Weapon: Poison, STR" description="Select this adjustment to add a STR based poison attack on to a specific natural weapon.  Use the drop down box to select the natural weapon this is to apply to.  Then use the following fields to set the poison attributes:\n\nDrop down box selects the natural attack the wording (Plus Poison) is to be added to.\n\nThe counter is used to set the die size of the STR damage dice. So if set to 4 it will show 1d4 STR damage.\n\nThe duration, default value of 1 round, is used to set the number of rounds the poison lasts.\n\nThe (source) section is used to set the number of additional cures the poison takes to remove.  The default for poison is 1 round so if you change the (source) text to be 1 then it will take 2 cures to save from this poison." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pDuration" value="1 round"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raPoiSTR">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      #extradamage[field[pChosen].chosen," plus Str poison",field[name].text]]]></eval>
    <eval phase="PreLevel" priority="10000" index="3"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set poison Die size (ie 1d4, 1d6)
      #value[raPoiSTR] += field[pAdjust].value
      ~ set number of cure saves to remove poison
      #value2[raPoiSTR] += field[pSource].text
      ~ Set Number of rounds the poison lasts
      hero.child[raPoiSTR].field[abDuration].value += field[pDuration].text]]></eval>
    </thing>
  <thing id="pS2wCustom" name="Custom Text: Weapon" description="Append text to the name of your weapon using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad. Use this to add info about Rapid Shot, Vital Strike or any other combat related info you would like to see with your weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2wBonus" name="Weapon Bonus" description="Select this adjustment to change the attack and damage bonus of the selected weapon." compset="InPlay">
    <fieldval field="pWhat" value="Attack &amp; Dmg"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add to attacks
      field[pChosen].chosen.field[Bonus].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2SheetDM" name="Character Sheet: DM" description="Select this adjustment to cause ALL abilities to print to your character sheet.  This is very handy when sending your DM a pdf copy of your sheet so that EVERYTHING is shown." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not in output mode, don't do anything
      doneif (state.isoutput = 0)

      foreach pick in hero where "!thingid.xDamRd? & !thingid.xDamRs? & !thingid.wMainHand & !thingid.xBurrow & !thingid.xClimb & !thingid.xFly & !thingid.xSwim & !thingid.gGround & !thingid.mNatural & !thingid.mArmor & !thingid.mShield  & !thingid.wTouchFine & !thingid.wRay & !component.BaseClSpec & !component.ArmyBase & !thingid.CustPoison & !thingid.CustScroll"
        If (each.tagis[Helper.ShowSpec] = 0) Then
           perform each.assign[Helper.ShowSpec]
        Endif
        If (each.tagis[Helper.SpecUp] <> 0) Then
           perform each.delete[Helper.SpecUp]
        Endif
      nexteach]]></eval>
    </thing>
  <thing id="pS2ImpFa01" name="Feat: Improved Familiar - Agathion, Silvanshee" description="This ability when added makes the Lay on Hands ability of the Agathion, Silvanshee equal to hits master&apos;s hit dice.\n\nThis is based on the Familiar rules section as follows:\n\n{b}Hit Dice:{/b} For the purpose of effects related to number of Hit Dice, use the master&apos;s character level or the familiar&apos;s normal HD total, whichever is higher." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <eval phase="PostLevel" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set the Lay on Hands ability to be equal to our Masters HD
      hero.child[raLayHnd].field[abValue3].value = herofield[tCompLevel].value]]></eval>
    </thing>
  <thing id="pS2CMB" name="Weapon Combat Maneuvers" description="{b}Disarm{/b}, {b}sunder{/b}, and {b}trip{/b} are normally the only kinds of combat maneuvers in which you&apos;re actually using a weapon (natural weapons and unarmed strikes are considered weapons for this purpose) to perform the maneuver, and therefore the weapon&apos;s bonuses (enhancement bonuses, feats such as Weapon Focus, fighter weapon training, and so on) apply to the roll.\n\nFor other maneuvers, either you&apos;re not using a weapon at all, or the weapon is incidental to making the maneuver and its bonuses shouldn&apos;t make you better at attempting the maneuver. \n\nThere is a special exception to the above rules. If you&apos;re using a weapon with the {b}trip{/b} special feature, and you&apos;re attempting a {b}drag{/b} or {b}reposition{/b} combat maneuver (Advanced Player&apos;s Guide 321-322), you may apply the weapon&apos;s bonuses to the roll because trip weapons are also suitable for dragging and repositioning (this also means we don&apos;t have to add &quot;drag&quot; and &quot;reposition&quot; weapon properties to existing weapons)." compset="InPlay" summary="Adjust certain CMB checks based on Bonuses on Weapon." uniqueness="useronce">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Final" priority="20002"><![CDATA[
      ~ If a "melee" weapon is held then CMB is adjusted for TRIP, DISARM, SUNDER
      ~ (weapons do not need these properties to take advantages of the implicit bonuses).
      ~ If a "melee" weapon has disarm or sunder weapon properties than a +2 bonus is granted.
      ~ If a "melee" weapon has trip then DRAG and REPOSITION are adjusted to use updated CMB.

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~Boolean: flags for Combat Maneuvers which need to be adjusted
      ~ (note that doBllRsh is TRUE when the value is equal to 2)
      var doTrip   as number
      var doDisarm as number
      var doSunder as number
      var doBllRsh as number
      doTrip   = 0
      doDisarm = 0
      doSunder = 0
      doBllRsh = 0

      ~Boolean: is the hero holding a "Melee" weapon?
      var isWpnFnd as number
      isWpnFnd = 0

      ~Integer: what is the calculated Attack bonus on the weapon (this number will be modified)
      var atkBonus as number
      var attack as number
      atkBonus = 0

      ~ Check if the hero has the Polearm Ability "Sweeping Fend"; as a prereq for doing "Bull Rush" with the weapon.
      foreach pick in hero where "Ability.cFtrSweepF"
        doBllRsh = 1
      nexteach

      ~ Only iterate over Melee weapons the character has
      foreach pick in hero where "wCategory.Melee"
        ~ Only bother with "Equipped" weapons.
        if (eachpick.field[gIsEquip].value = 1) then
          isWpnFnd = 1

          ~ Calculate the weapon attack without attribute bonus or BAB
          attack = eachpick.field[wAttack].value - eachpick.field[wMeleeAttr].value - eachpick.field[wAttBAB].value

          ~ Benefit of the Doubt - use the highest attack bonus found for equipped melee weapons!
          ~atkBonus = maximum(eachpick.field[wAttack].value, atkBonus)
          atkBonus = maximum(attack, atkBonus)

          ~ Determine if hero is holding a PoleArm or a Spear
          if (doBllRsh = 1) then
            if (eachpick.tagis[wFtrGroup.PoleArms] <> 0) then
              doBllRsh = 2
            elseif (eachpick.tagis[wFtrGroup.Spears] <> 0) then
              doBllRsh = 2
            endif
          endif

          if (eachpick.tagis[wSpecial.Trip] <> 0) then
            doTrip = 1
          elseif (doBllRsh = 2) then
            doTrip = 1
          endif
          if (eachpick.tagis[wSpecial.Disarm] <> 0) then
            doDisarm = 1
          endif
          ~ N.B. there are no Sunder weapons for me to test with ATM.
          if (eachpick.tagis[wSpecial.Sunder] <> 0) then
            doSunder = 1
          endif
        endif
      nexteach

      if (isWpnFnd = 1) then
        ~ undo STR and BAB, otherwise they are counting twice
        ~atkBonus -= hero.child[Attack].field[tAtkBase].value
        ~atkBonus -= hero.child[aSTR].field[aBonus].value

        ~ Add back in any penalties to melee weapons as it was already taken out of
        ~ each weapon pick.
        perform hero.child[Attack].setfocus
        ~ Attack bonuses
        atkBonus += -1 * focus.field[Bonus].value
        atkBonus += -1 * focus.field[Penalty].value
        atkBonus += -1 * focus.field[Racial].value
        atkBonus += -1 * focus.field[BonAlch].value
        atkBonus += -1 * focus.field[ModCirc].value
        atkBonus += -1 * focus.field[BonComp].value
        atkBonus += -1 * focus.field[PenComp].value
        atkBonus += -1 * focus.field[BonEnhance].value
        atkBonus += -1 * focus.field[BonInsight].value
        atkBonus += -1 * focus.field[BonLuck].value
        atkBonus += -1 * focus.field[PenLuck].value
        atkBonus += -1 * focus.field[BonMorale].value
        atkBonus += -1 * focus.field[PenMorale].value
        atkBonus += -1 * focus.field[BonProfane].value
        atkBonus += -1 * focus.field[PenProfane].value
        atkBonus += -1 * focus.field[BonSacred].value
        atkBonus += -1 * focus.field[PenSacred].value
        atkBonus += -1 * focus.field[BonTrait].value
        atkBonus += -1 * focus.field[PenTrait].value
        ~ Melee specific bonuses
        atkBonus += -1 * focus.field[atmBonus].value
        atkBonus += -1 * focus.field[atmPenalty].value
        atkBonus += -1 * focus.field[atmRacial].value
        atkBonus += -1 * focus.field[atmBonAlch].value
        atkBonus += -1 * focus.field[atmModCirc].value
        atkBonus += -1 * focus.field[atmBonComp].value
        atkBonus += -1 * focus.field[atmPenComp].value
        atkBonus += -1 * focus.field[atmBonEnh].value
        atkBonus += -1 * focus.field[atmBonIns].value
        atkBonus += -1 * focus.field[atmBonLuck].value
        atkBonus += -1 * focus.field[atmPenLuck].value
        atkBonus += -1 * focus.field[atmBonMora].value
        atkBonus += -1 * focus.field[atmPenMora].value
        atkBonus += -1 * focus.field[atmBonProf].value
        atkBonus += -1 * focus.field[atmPenProf].value
        atkBonus += -1 * focus.field[atmBonSacr].value
        atkBonus += -1 * focus.field[atmPenSacr].value
        atkBonus += -1 * focus.field[atmBonTrt].value
        atkBonus += -1 * focus.field[atmPenTrt].value

        ~ Trip, Sunder and Disarm alwys use the current weapon bonus
        hero.child[manTrip].field[manCMB].value   += atkBonus
        hero.child[manSunder].field[manCMB].value += atkBonus
        hero.child[manDisarm].field[manCMB].value += atkBonus

        ~ If we are a trip weapon then Reposition and Drag are
        ~ affected.
        if (doTrip = 1) then
          hero.child[manReposit].field[manCMB].value += atkBonus
          hero.child[manDrag].field[manCMB].value    += atkBonus
        endif
        ~ If disarm weapon then we get a simple +2 bonus to CMB
        if (doDisarm = 1) then
          hero.child[manDisarm].field[manCMB].value += 2
        endif
        ~ If disarm weapon then we get a simple +2 bonus to CMB
        if (doSunder = 1) then
          hero.child[manSunder].field[manCMB].value += 2
        endif
        if (doBllRsh = 2) then
          hero.child[manBullRus].field[manCMB].value += atkBonus - 4
        endif
      endif]]></eval>
    </thing>
  <thing id="pS2fPowerA" name="Feat: Power Attack" description="Add this adjustment to allow you to add the Power Attack information to a specific weapon so on a printed character sheet it will display stats for your weapon with and without Power Attack.\n\n{b}How to Use:{/b} After adding this adjustment you select the weapon you would like to have the Power Attack values display on.  Then on the &quot;In-Play&quot; tab you want to turn Power Attack off.  Then your weapon will correctly display both your normal Attack values and your Power Attack values.\n\n{B}Note:{/b} You will need the Power Attack feat on your character for this adjustment to work correctly." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no power attack get out now
      doneif (hero.childlives[fPowerAtt] <> 1)

      var sText as string
      var sDmg as string
      var nHit as number
      var nDmg as number
      var iX as number
      var nTotal as number

      ~ Calc to hit
      nHit = field[pChosen].chosen.field[wAttack].value - #value[fPowerAtt]
      nTotal = field[pChosen].chosen.field[wNumAttTbl].arrayvalue[0]
      ~ If more than one attack from BAB then build itertive attacks
      If (nTotal > 1) Then
         sText = " [PA "
         while (iX < nTotal)
           ~ For each loop past 1st add / and subtract 5
           If (iX > 0) Then
              sText &= "/"
              nHit += -5
           Endif
           iX += 1
           sText &= signed(nHit)
         loop
         ~ Add Hit letter
         sText &= "H "
      ~..only one attack so just add it in
      Else
        sText = " [PA " & signed(nHit) & "H "
      Endif

      ~ Calc damage
      nDmg = #value2[fPowerAtt]
      ~ Figure out which hand or hands we are using the weapon and grab the correct array value
      If (field[pChosen].chosen.tagis[wClass.TwoHanded] <> 0) Then
         sDmg = field[pChosen].chosen.field[wDamageTbl].arraytext[1]
         nDmg = round(nDmg*1.5,0,-1)
      ElseIf (field[pChosen].chosen.field[gIsEquip].value + field[pChosen].chosen.field[wIs2nd].value >= 2) Then
         sDmg = field[pChosen].chosen.field[wDamageTbl].arraytext[1]
         nDmg = round(nDmg*1.5,0,-1)
      ElseIf (field[pChosen].chosen.field[wIs2nd].value <> 0) Then
         sDmg = field[pChosen].chosen.field[wDamageTbl].arraytext[4]
      Else
         sDmg = field[pChosen].chosen.field[wDamageTbl].arraytext[0]
      Endif
      ~ Substring out the weapon damage bonus only
      sDmg = mid(sDmg,4,2)
      ~ Convert string to number
      nDmg += sDmg
      ~ add to text string but add a + or - sign in front
      sText &= signed(nDmg) & "D]"
      ~ Set the live name of the weapon to include this text
      field[pChosen].chosen.field[livename].text = field[pChosen].chosen.field[name].text & sText]]></eval>
    </thing>
  <thing id="pS2wFoBRan" name="Weapon Flurry: Ranged Attack Bonus" description="Select this adjustment to change the flurry ranged attack bonus of the selected weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add to Flurry Ranged Attack bonus
      field[pChosen].chosen.field[wRanFlurry].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wFoBMel" name="Weapon Flurry: Melee Attack Bonus" description="Select this adjustment to change the flurry melee attack bonus of the selected weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add to Flurry Melee Attack bonus
      field[pChosen].chosen.field[wMelFlurry].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wSize" name="Natural Weapon: Size" description="Select this adjustment to be able to adjust the size up/down of your natural attack." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[wDamage].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wOrder" name="Weapon Order" description="Select this adjustment to change the order of your weapons as they get displayed in HL and on an outputted character sheet.\n\nThe counter (ie Number) sets the Priority of the weapon in the list.  The larger the number the {B}HIGHER{/B} priority in the list the weapon has and will result in the weapon being displayed higher in the list.  By default weapons have a priority of zero so a weapon set with a Priority of one will be first.  This also means two weapons set to priority one will sort themselves alphabetically by name at the top of the list of weapons.\n\nIf you simply had a +2 Longsword you always wanted to be first simply select &quot;+2 Longsword&quot; and leave the counter set to one.  \n\nIn example if you had three weapons {B}WeaponA, WeaponB, and WeaponC{/b} and you wanted WeaponC 1st, WeaponB 2nd, WeaponA 3rd you would set the weapons with following values:\nWeaponC: {B}Priority 3{/B}\nWeaponB: {B}Priority 2{/B}\nWeaponA: {B}Priority 1{/B}" compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Based on the poisition create the number of blank
      ~ spaces
      var x as number
      var spaces as string
      For x = 0 to field[pAdjust].value
        spaces &= " "
      Next
      ~ Test to see if we are a Magic Weapon or not as we have to use
      ~ different text fields for magic weapons.
      ~If (field[pChosen].chosen.tagis[thingid.iMagWeapon] <> 0) then
      If (field[pChosen].chosen.tagis[Helper.CustomItem] <> 0) then
         field[pChosen].chosen.field[livename].text = spaces & field[pChosen].chosen.field[livename].text
      Else
         field[pChosen].chosen.field[livename].text = spaces & field[pChosen].chosen.field[thingname].text
      Endif]]></eval>
    </thing>
  <thing id="pS2raSpeDi" name="Racial Ability, Disable" description="Select this adjustment to be able to disable a single racial special from your race." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Assign the Disabled Tag
      perform field[pChosen].chosen.assign[Helper.SpcDisable]
      ~ Remove the Show Special if found
      perform field[pChosen].chosen.delete[Helper.ShowSpec]]]></eval>
    <eval phase="PreLevel" priority="11000"><![CDATA[
      ~ Picks on Hero &
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.RaceAbil & !thingid.raS2Disabl"]]></eval>
    </thing>
  <thing id="raS2Disabl" name="~Racial Ability, Disable" description="This was added by the {b}Racial Ability, Disable{/b} adjustment and allows for selecting a racial ability to disable." compset="RaceSpec">
    <fieldval field="usrCandid1" value="component.RaceAbil &amp; !thingid.raS2Disabl"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we have not chosen then get out now
      doneif (field[usrChosen1].ischosen <> 1)

      ~ Assign the Disabled Tag
      perform field[usrChosen1].chosen.assign[Helper.SpcDisable]
      ~ Remove the Show Special if found
      perform field[usrChosen1].chosen.delete[Helper.ShowSpec]]]></eval>
    </thing>
  <thing id="pS2wHide" name="Weapon Hide on Print out" description="Select this adjustment to be able to have a weapon not be output to a character sheet.  \n\nAfter adding the adjustment simply select the weapon from the drop down menu.  Once selected this weapon will no longer be ouputed to any character sheet." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Only do this when we are in output mode
      If (state.isoutput <> 0) then
        perform field[pChosen].chosen.assign[Hide.Weapon]
      Endif]]></eval>
    </thing>
  <thing id="pS2wElemen" name="Weapon Elemental Dmg, Custom" description="Select this adjustment to add custom text damage next to your weapon name. This allows for appending text to the damage of a selected weapon by typing into the  &quot;(Duration)&quot; field (ie +1d6 Fire). The &quot;(Source)&quot; is the name of the ability giving this to you (ie Adjustment).\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pDuration" value="+1d6 Elemental"/>
    <fieldval field="pSource" value="Adjustment"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Here we are pulling the text the user entered from the
      ~ Durattion field to set the text.
      #extradamage[field[pChosen].chosen,field[pDuration].text,field[name].text]]]></eval>
    </thing>
  <thing id="pS2SaveSit" name="Saving Throw, Situational" description="Select this adjustment to give your character a situation modifier that you can customize the text for.\n\n1st - Select the saving throw this modifier is meant for.\n2nd - In the {b}(Source){/b} field is where you type in what is giving you this modifier. In example for Fighter&apos;s Bravery class ability type in &quot;Bravery&quot;.\n3rd - In the {B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Fear&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Saving Throw"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Save"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set text onto the chosen saving throw
      #situational[field[pChosen].chosen,field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2SkilSit" name="Skill Bonus, Situational" description="Select this adjustment to add a situational bonus to one of your skill totals. Use source for the name and duration for the situational bonus text.\n\n1st - Select the skill this modifier is meant for.\n2nd - In the {b}(Source){/b} field is where you type in what is giving you this modifier. In example for Fighter&apos;s Bravery class ability type in &quot;Bravery&quot;.\n3rd - In the {B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Fear&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Skill Bonus"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Skill" name="Skills" abbrev="Skills"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note to the skill chosen
      #situational[field[pChosen].chosen,field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2AttRest" name="Ability Score (Restore)" description="Select this adjustment to restore an attribute that has been removed. This happens with some race types like undead or constructs." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Attribute" name="Attributes" abbrev="Attributes"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove the No Score tag from ability pick
      perform field[pChosen].chosen.delete[Helper.NoScore]]]></eval>
    </thing>
  <thing id="pS2wHide2" name="Weapon Hide" description="Select this adjustment to be able to have a weapon not be shown. This is helpful if you have a natural attack or other bootstraped weapon you no longer want shown." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Hide the weapon always
      perform field[pChosen].chosen.assign[Hide.Weapon]]]></eval>
    </thing>
  <thing id="pS2fRapidS" name="Feat: Rapid Shot" description="Add this adjustment to allow you to add the Rapid Shot information to a specific weapon so on a printed character sheet it will display stats for your weapon with and without Rapid Shot.\n\n{b}How to Use:{/b} After adding this adjustment you select the ranged weapon you would like to have the Rapid Shot values display on.  Then on the &quot;In-Play&quot; tab you want to turn Rapid Shot off.  Then your weapon will correctly display both your normal Attack values and your Rapid Shot values.\n\n{B}Note:{/b} You will need the Rapid Shot feat on your character for this adjustment to work correctly." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no power attack get out now
      doneif (hero.childlives[fRapidShot] <> 1)

      var sText as string
      var nHit as number
      var iX as number
      var nTotal as number

      ~ Calc to hit
      nHit   = field[pChosen].chosen.field[wRanAtk].value - 2
      nTotal = field[pChosen].chosen.field[wNumAttTbl].arrayvalue[0]
      sText  = " [RS " & signed(nHit) & "/" & signed(nHit)
      iX = 1
      ~ If more than one attack from BAB then build itertive attacks
      If (nTotal > 1) Then
         while (iX < nTotal)
           ~ For each loop past 1st add / and subtract 5
           If (iX > 0) Then
              sText &= "/"
              nHit += -5
           Endif
           iX += 1
           sText &= signed(nHit)
         loop
      Endif
      ~ Add Hit letter
      sText &= "H]"
      ~ Set the live name of the weapon to include this text
      field[pChosen].chosen.field[livename].text &= sText]]></eval>
    </thing>
  <thing id="pS2DR" name="Damage Reduction, Set" description="Select this adjustment to set the amount and type of DR on a character. This is different from the official adjustment as the selected value will override what ever value is also already set for this DR allowing you to change monsters hardcoded values.\n\n{B}Note:{/B} The list of DR&apos;s avaible only include &quot;or&quot; ones and no &quot;and&quot;.  To have DR 5/Magic and Slashing you would add two adjustments with one for Slashing and one for Magic and set the counter to 5 for both." compset="InPlay">
    <fieldval field="pMinimum" value="0"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="DamReduce"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="SpecAbil"/>
    <bootstrap thing="xDamRd"></bootstrap>
    <eval phase="Final" priority="9000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove all hardcoded Value tags
      perform field[pChosen].chosen.delete[Value.?]

      ~ Set the exact amount of DR
      field[pChosen].chosen.field[abValue].value = field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ArmorCl" name="Armor Class, Type" description="Select this adjustment to adjust your Armor Class by a specific type of bonus that you select from a drop down list. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus, Circumstance, Dodge and Natural Armor types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="AC"/>
    <eval phase="PostAttr" priority="50000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      var sName as string
      ~ If we are Bonus Selector pull Bonus name
      If (field[pChosen].chosen.tagis[PackSelect.BonusType] <> 0) Then
         sName = field[pChosen].chosen.tagnames[AdjustBon.?]
      ~..assume we are a Armor Class name
      Else
         sName = field[pChosen].chosen.tagnames[AdjustAC.?]
      Endif
      ~ Adjust the name before we set the live name
      sName = replace(sName,"Selector","",0)
      sName = replace(sName,",","",0)
      field[livename].text = "AC, " & sName

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         hero.child[ArmorClass].field[Bonus].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         hero.child[ArmorClass].field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.Armor] <> 0) Then
         #applybonus[tACArmor,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.Shield] <> 0) Then
         #applybonus[tACShield,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.DexMod] <> 0) Then
         #applybonus[tACDexMod,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.NatArmor] <> 0) Then
         hero.child[ArmorClass].field[tACNatural].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.Deflection] <> 0) Then
         #applybonus[tACDeflect,hero.child[ArmorClass],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustAC.Dodge] <> 0) Then
         hero.child[ArmorClass].field[tACDodge].value += field[pAdjust].value
      Endif]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SelectHelp & (PackSelect.BonusType|PackSelect.ACBonus) & !AdjustBon.Resist"]]></eval>
    </thing>
  <thing id="pS2svRefTy" name="Saving Throw (Reflex), Type" description="Select this adjustment to give a specific bonus/penalty type to your Reflex saves. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus and Circumstance types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SelectHelp & (PackSelect.BonusType|AdjustBon.Resist|AdjustBon.Bonus)"]]></eval>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      var sName as string
      sName = field[pChosen].chosen.tagnames[AdjustBon.?]
      ~ Adjust the name before we set the live name
      sName = replace(sName,"Selector","",0)
      sName = replace(sName,",","",0)
      field[livename].text = "Reflex Save (" & sName & ")"

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         hero.child[svRef].field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Resist] <> 0) Then
         #applybonus[svResist,hero.child[svRef],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         hero.child[svRef].field[Bonus].value += field[pAdjust].value
      Endif]]></eval>
    </thing>
  <thing id="pS2svForTy" name="Saving Throw (Fort), Type" description="Select this adjustment to give a specific bonus/penalty type to your Fortitude saves. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus and Circumstance types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SelectHelp & (PackSelect.BonusType|AdjustBon.Resist|AdjustBon.Bonus)"]]></eval>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      var sName as string
      sName = field[pChosen].chosen.tagnames[AdjustBon.?]
      ~ Adjust the name before we set the live name
      sName = replace(sName,"Selector","",0)
      sName = replace(sName,",","",0)
      field[livename].text = "Fort Save (" & sName & ")"

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         hero.child[svFort].field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Resist] <> 0) Then
         #applybonus[svResist,hero.child[svFort],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         hero.child[svFort].field[Bonus].value += field[pAdjust].value
      Endif]]></eval>
    </thing>
  <thing id="pS2svWilTy" name="Saving Throw (Will), Type" description="Select this adjustment to give a specific bonus/penalty type to your Will saves. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus and Circumstance types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SelectHelp & (PackSelect.BonusType|AdjustBon.Resist|AdjustBon.Bonus)"]]></eval>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      var sName as string
      sName = field[pChosen].chosen.tagnames[AdjustBon.?]
      ~ Adjust the name before we set the live name
      sName = replace(sName,"Selector","",0)
      sName = replace(sName,",","",0)
      field[livename].text = "Will Save (" & sName & ")"

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         hero.child[svWill].field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Resist] <> 0) Then
         #applybonus[svResist,hero.child[svWill],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         hero.child[svWill].field[Bonus].value += field[pAdjust].value
      Endif]]></eval>
    </thing>
  <thing id="pS2svAllTy" name="Saving Throw (All), Type" description="Select this adjustment to give a specific bonus/penalty type to All your saves. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus and Circumstance types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SelectHelp & (PackSelect.BonusType|AdjustBon.Resist|AdjustBon.Bonus)"]]></eval>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      var sName as string
      sName = field[pChosen].chosen.tagnames[AdjustBon.?]
      ~ Adjust the name before we set the live name
      sName = replace(sName,"Selector","",0)
      sName = replace(sName,",","",0)
      field[livename].text = "All Saves (" & sName & ")"

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         hero.child[svAll].field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Resist] <> 0) Then
         #applybonus[svResist,hero.child[svAll],field[pAdjust].value]
      ElseIf (field[pChosen].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         hero.child[svAll].field[Bonus].value += field[pAdjust].value
      Endif]]></eval>
    </thing>
  <thing id="pS2ClsSkRe" name="Skill, Class Remove" description="Select this adjustment to make a class skill no longer be a class skill." compset="InPlay">
    <fieldval field="pWhat" value="Skill"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Skill"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="PostLevel"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value <> 0)

      ~ Remove the class skill Helper tag
      perform field[pChosen].chosen.delete[Helper.ClassSkill]]]></eval>
    </thing>
  <thing id="pB1EqChang" name="Custom Name: Equipment" description="Overwrite the name of your equipment using the (Source) or (Duration) field. Use this to force an item to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjNoPlus" name="AdjNoPlus" abbrev="AdjNoPlus"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="Adjustment" tag="YourGear"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pB1ArChang" name="Custom Name: Armor" description="Overwrite the name of your armor using the (Source) or (Duration) field. Use this to force an item to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjNoPlus" name="AdjNoPlus" abbrev="AdjNoPlus"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="Adjustment" tag="YourArmor"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pB1ArCusto" name="Custom Text: Armor" description="Append text to the name of your armor using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="Adjustment" tag="YourArmor"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pB1EqCusto" name="Custom Text: Equipment" description="Append text to the name of your equipment using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="Adjustment" tag="YourGear"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2ClsHDSz" name="Class, Die Size" description="Select this adjustment to be able to adjust the die size of a selected class up or down.  In example you change a fighter to get d12 instead of d10." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Die Size up or down
      field[pChosen].chosen.field[cHDSides].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2SpeedBa" name="Speed, Base" description="Select this adjustment to change the base speed of your character." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PreLevel" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ adjust the base speed of the race
      hero.child[Speed].field[tSpeed].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2SkAllTy" name="Skill Bonus, All of Type" description="Select this adjustment to add a bonus to all skills of a specif type (Craft, Knowledge, Perform, or Profession).  After adding this adjustment select the type from the drop down list and set the counter to the amount of bonus or penalty to give to all skills of that type." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="PreLevel" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ If positive give bonus
      If (field[pAdjust].value > 0) Then
        field[pChosen].chosen.field[Bonus].value += field[pAdjust].value
      ~.. If negative give penalty
      ElseIf (field[pAdjust].value < 0) Then
        field[pChosen].chosen.field[Penalty].value += field[pAdjust].value
      Endif]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for All Skill Modifiers
      field[pCandExpr].text = "component.Modifiers & thingid.All? & !thingid.AllSkills"]]></eval>
    </thing>
  <thing id="pS2BAB" name="Attack Bonus, BAB" description="Select this adjustment to change your Base Attack Bonus (BAB) up or down." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="AttDam"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the BAB value up/down
      hero.child[Attack].field[tAtkBase].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wTypeS" name="Weapon Damage Type, Slashing" description="Select this adjustment to change the damage type of the selected weapon to Slashing. This means that the regardless of the orginial damage type the weapon will now be Slashing. If you wish to only ADD a new type please use the &quot;Weapon Damage Type Add, xxxx&quot; adjustment instead." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="S"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove all weapon types from the Weapon
      perform field[pChosen].chosen.delete[wType.?]
      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wTypeP" name="Weapon Damage Type, Piercing" description="Select this adjustment to change the damage type of the selected weapon to Piercing.  This means that the regardless of the orginial damage type the weapon will now be Piercing. If you wish to only ADD a new type please use the &quot;Weapon Damage Type Add, xxxx&quot; adjustment instead." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="P"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove all weapon types from the Weapon
      perform field[pChosen].chosen.delete[wType.?]
      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wTypeB" name="Weapon Damage Type, Bludgeoning" description="Select this adjustment to change the damage type of the selected weapon to Bludgeoning. This means that the regardless of the orginial damage type the weapon will now be Bludgeoning. If you wish to only ADD a new type please use the &quot;Weapon Damage Type Add, xxxx&quot; adjustment instead." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="B"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove all weapon types from the Weapon
      perform field[pChosen].chosen.delete[wType.?]
      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wDmgDex" name="Weapon Damage Attribute, Dexterity" description="Select this adjustment to change the attributed used to calculate damage to be Dexterity instead of strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="DamageOver" tag="aDEX"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Damage Optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[DamageOver.?]]]></eval>
    </thing>
  <thing id="pS2wDmgCon" name="Weapon Damage Attribute, Constitution" description="Select this adjustment to change the attributed used to calculate damage to be Constitution instead of strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="DamageOver" tag="aCON"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Damage Optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[DamageOver.?]]]></eval>
    </thing>
  <thing id="pS2wTyAddB" name="Weapon Damage Type Add, Bludgeoning" description="Select this adjustment to add the damage type Bludgeoning to the selected weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="B"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25050"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wTyAddS" name="Weapon Damage Type Add, Slashing" description="Select this adjustment to add the damage type Slashing to the selected weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="S"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25050"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wTyAddP" name="Weapon Damage Type Add, Piercing" description="Select this adjustment to add the damage type Piercing to the selected weapon." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="wType" tag="P"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25050"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Add new weapon type
      perform field[pChosen].chosen.pushtags[wType.?]]]></eval>
    </thing>
  <thing id="pS2wDmgInt" name="Weapon Damage Attribute, Intelligence" description="Select this adjustment to change the attributed used to calculate damage to be Intelligence instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="DamageOver" tag="aINT"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Damage Optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[DamageOver.?]]]></eval>
    </thing>
  <thing id="pS2wDmgWis" name="Weapon Damage Attribute, Wisdom" description="Select this adjustment to change the attributed used to calculate damage to be Wisdome instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="DamageOver" tag="aWIS"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Damage Optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[DamageOver.?]]]></eval>
    </thing>
  <thing id="pS2wDmgCha" name="Weapon Damage Attribute, Charisma" description="Select this adjustment to change the attributed used to calculate damage to be Charisma instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="DamageOver" tag="aCHA"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Damage Optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[DamageOver.?]]]></eval>
    </thing>
  <thing id="pS2wNot2HH" name="Weapon Damage NOT +50%" description="Select this adjustment to prevent a two-handed weapon weilded in one hand from getting the two-handed damage output (+50%) from the Power Attack feat." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PostLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove special two-handed power attack tag
      perform field[pChosen].chosen.delete[Helper.PowTwoHand]]]></eval>
    </thing>
  <thing id="pS2AbiRest" name="Class Ability, Restore" description="Select this adjustment to restore a class or racial ability that has been disabled. This can be used to restore a class ability that an archetype disabled." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.Ability &amp; (component.BaseClSpec | component.BaseCustSp)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the Hide and Disable tags
      perform field[pChosen].chosen.delete[Hide.Special]
      perform field[pChosen].chosen.delete[Helper.SpcDisable]
      perform field[pChosen].chosen.delete[Helper.SpcReplace]]]></eval>
    </thing>
  <thing id="pS2SpellDC" name="Spell DC, Specific Spell" description="Select this adjustment to add a bonus/penalty to the selected spell DC." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom" name="Custom Menu" abbrev="Custom Menu"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the DC of the chosen spell
      field[pChosen].chosen.field[sDC].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for all spells
      field[pCandExpr].text = "component.BaseSpell & !portal.ClsBook & CasterType.?"]]></eval>
    </thing>
  <thing id="pS2AttaSit" name="Attack Bonus, Situational" description="Select this adjustment to add a situational bonus to your attacks.  This is like a Dwarves &quot;Hatred&quot; ability.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example for dwarves it would be &quot;Hatred&quot;.\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Goblins&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Attack Bonus"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="AttDam"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note to the attack pick
      #situational[hero.child[Attack],field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2ACSit" name="Armor Class, Situational" description="Select this adjustment to add a situational bonus to your armor class. This is like a Dwarves &quot;Defensive Training&quot; ability.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example for dwarves it would be &quot;Defensive Training&quot;.\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+1 vs Orcs&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Armor Class"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="AC"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note to the armor class pick
      #situational[hero.child[ArmorClass],field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2JourSho" name="Journal, Display" description="This adjustments forces the {b}Journal{/b} tab to appear which is useful on NPC&apos;s which has the tab hidden." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove hero hidden tab
      perform hero.delete[HideTab.journal]
      perform hero.delete[Hero.NoAdvance]
      perform hero.delete[Hero.ClsErLev?]]]></eval>
    </thing>
  <thing id="pS2wPrimar" name="Natural Attack: Primary" description="Select this adjustment to force the selected natural attack to be a Primary natural attack." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PostLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      perform field[pChosen].chosen.assign[Helper.NatPrimary]]]></eval>
    </thing>
  <thing id="pS2wSecond" name="Natural Attack: Secondary" description="Select this adjustment to force the selected natural attack to be a Secondary natural attack." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PostLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      perform field[pChosen].chosen.assign[Helper.NatOverSec]
      perform field[pChosen].chosen.delete[Helper.NatPrimary]]]></eval>
    </thing>
  <thing id="pS2w2xDmg" name="Natural Attack: Two-Handed Damage" description="Select this adjustment to force the selected natural attack to be treated as a two-handed weapon and gain 1.5x Str damage." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PostLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      perform field[pChosen].chosen.assign[Helper.NatTwoHand]]]></eval>
    </thing>
  <thing id="pS2wAttCha" name="Weapon Attack Melee Attribute, Cha" description="Select this adjustment to change the attributed used to calculate attack bonus to be Charisma instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aCHA"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Melee Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[MelAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wAttDex" name="Weapon Attack Melee Attribute, Dex" description="Select this adjustment to change the attributed used to calculate attack bonus to be Dexterity instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aDEX"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Melee Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[MelAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wAttCon" name="Weapon Attack Melee Attribute, Con" description="Select this adjustment to change the attributed used to calculate attack bonus to be Constitution instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aCON"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Melee Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[MelAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wAttInt" name="Weapon Attack Melee Attribute, Int" description="Select this adjustment to change the attributed used to calculate attack bonus to be Intelligence instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aINT"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Melee Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[MelAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wAttWis" name="Weapon Attack Melee Attribute, Wis" description="Select this adjustment to change the attributed used to calculate attack bonus to be Wisdom instead of Strength." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aWIS"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Melee Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[MelAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wRngStr" name="Weapon Attack Ranged Attribute, Str" description="Select this adjustment to change the attributed used to calculate attack bonus to be Strength instead of Dexterity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="RanAttOver" tag="aSTR"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Ranged Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[RanAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wRngCon" name="Weapon Attack Ranged Attribute, Con" description="Select this adjustment to change the attributed used to calculate attack bonus to be Constitution instead of Dexterity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="RanAttOver" tag="aCON"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Ranged Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[RanAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wRngInt" name="Weapon Attack Ranged Attribute, Int" description="Select this adjustment to change the attributed used to calculate attack bonus to be Intelligence instead of Dexterity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="RanAttOver" tag="aINT"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Ranged Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[RanAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wRngWis" name="Weapon Attack Ranged Attribute, Wis" description="Select this adjustment to change the attributed used to calculate attack bonus to be Wisdom instead of Dexterity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="RanAttOver" tag="aWIS"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Ranged Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[RanAttOver.?]]]></eval>
    </thing>
  <thing id="pS2wRngCha" name="Weapon Attack Ranged Attribute, Cha" description="Select this adjustment to change the attributed used to calculate attack bonus to be Charisma instead of Dexterity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="RanAttOver" tag="aCHA"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Ranged Attack optional tag to chosen weapon
      perform field[pChosen].chosen.pushtags[RanAttOver.?]]]></eval>
    </thing>
  <thing id="pS2raDarkV" name="Racial Ability, Darkvision" description="Use this adjustment to add darkvision to your character.  You can use the counter to set the distance of the darkvision." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjNoPlus" name="AdjNoPlus" abbrev="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raDarkVis">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="PreLevel" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      #value[raDarkVis] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2raLowLi" name="Racial Ability, Low-Light Vision" description="Use this adjustment to add low-light vision to your character." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="raLowLight">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    </thing>
  <thing id="pS2raScent" name="Racial Ability, Scent" description="Use this adjustment to add the Scent special ability to your character." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="xScent">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    </thing>
  <thing id="pS2CmbSit" name="Combat Maneuver Bonus, Situational" description="{B}As of Pathfinder v7.16 the text does not display yet on the character or print to the sheet. This may change in a future version so I am adding this adjustment now.{/b}\n\nSelect this adjustment to add a situational bonus to your Combat Maneuver Bonus.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example you could type in &quot;Grapple&quot;\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Goblins&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <comment>Does not currently display in Pathfinder v7.16.</comment>
    <fieldval field="pSource" value="CMB Checks"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note
      #situational[hero.child[ManeuvBon],field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2CmdSit" name="Combat Maneuver Defense, Situational" description="{B}As of Pathfinder v7.16 the text does not display yet on the character or print to the sheet. This may change in a future version so I am adding this adjustment now.{/b}\n\nSelect this adjustment to add a situational bonus to your Combat Maneuver Defense.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example you could type in &quot;Grapple&quot;\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Goblins&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <comment>Does not currently display in Pathfinder v7.16.</comment>
    <fieldval field="pSource" value="CMD"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note
      #situational[hero.child[ManeuvDef],field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2CmSit" name="Combat Maneuver, Situational" description="Select this adjustment to add a situational bonus to your Combat Maneuver for both Bonus/Defense.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example you could type in &quot;Grapple&quot;\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Goblins&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Combat Maneuver"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="CMDCMB"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note
      #situational[hero.child[Maneuver],field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2SpChang" name="Custom Name: Spell" description="Overwrite the name of your spell using the (Source) or (Duration) field. Use this to force a spell to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2SpCusto" name="Custom Text: Spell" description="Append text to the name of your spell using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2CarrCap" name="Encumbrance, Carrying Capacity" description="Use this adjustment to change your your Strength score to be treated as higher/lower value than normal when calculating your carrying capacity.  In example if you have a 10 Str and set this counter to +1 you will be treated as if you had a 11 Strength for purposes of carrying capacity." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust Carrying Capacity
      herofield[tEncumSTR].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wChange" name="Custom Name: Weapon" description="Overwrite the name of your weapon using the (Source) or (Duration) field. Use this to force a weapon to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2wValue" name="Natural Weapon: Number of Attacks" description="For natural attacks you can adjust the number of attacks. In example often a creature has 2x Claw attacks. If you wanted the creature to have 4x claw attacks you would select Claws from the drop down and set the counter to 4." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="2000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      var sValue as string
      ~ Make new Value.? tag
      sValue = "Value." & field[pAdjust].value
      ~ Remove all old Value tags
      perform field[pChosen].chosen.delete[Value.?]
      ~ Assign the new number of attacks with weapon
      perform field[pChosen].chosen.assignstr[sValue]]]></eval>
    </thing>
  <thing id="pS2ArmSlow" name="Equipment, Armor No Longer Slows" description="Use this adjustment to remove the &quot;slow&quot; land speed that medium and heavy armor causes." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourArmor"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ Set short name
      field[livename].text = "Armor No Slows"

      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the armors slow tags
      perform field[pChosen].chosen.delete[ArmorCateg.Slows]
      perform field[pChosen].chosen.delete[ArmorCateg.SlowsEx]]]></eval>
    </thing>
  <thing id="pS2ClsDC" name="Class Ability: DC" description="Select this adjustment to be able to adjust the DC of the selected class ability." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="ClassAbil"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="PreLevel" priority="11000" index="3"><![CDATA[
      ~NOTE: This custom menu is needed as the built in "Class Abilities"
      ~      option does not allow for selecting class abilities like
      ~      Channel Energy (thingid.xChannel). The below does allow this
      ~      to be selected and adjusted.

      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for Ability Picks
      field[pCandExpr].text = "component.Ability & SpecSource.cHelp? & !component.BaseFeat & Helper.ShowSpec"]]></eval>
    <eval phase="Final" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the DC field up or down
      field[pChosen].chosen.field[abDC].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2EqInPla" name="Equipment, Remove Tracker" description="Select this adjustment to have one of your pieces of equipment no longer display on the &quot;{b}In-Play{/b}&quot; tab. This can be useful for higher level when you don&apos;t want/need Trail Rations, Sunrods, or Daggers cluttering up the display." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PreLevel" priority="11000"><![CDATA[~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for Equipment
      field[pCandExpr].text = "component.MyGear & !(Helper.Static|thingid.mNatural)"]]></eval>
    <eval phase="Final" priority="200000" index="2"><![CDATA[
      ~ Set shorter live name
      field[livename].text = "Equipment, Remove Track"

      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove Gear Uses tag
      perform field[pChosen].chosen.delete[Helper.UsesQty]
      ~ Remove Weapon Tracker tag
      perform field[pChosen].chosen.delete[User.Tracker]]]></eval>
    </thing>
  <thing id="pS2CLschoo" name="Caster Level, School" description="Select this adjustment to add a bonus/penalty to all your spells caster levels of a specific school of magic." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom" name="Custom Menu" abbrev="Custom Menu"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the CL to choosen school of magic
      field[pChosen].chosen.field[schCastLev].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SplSchool & !sDescript.? & !sWordCat.? & !sSubschool.?"]]></eval>
    </thing>
  <thing id="pS2CLspell" name="Caster Level, Spell" description="Select this adjustment to add a bonus/penalty to the selected spells caster level." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom" name="Custom Menu" abbrev="Custom Menu"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the CL of the chosen spell
      field[pChosen].chosen.field[sCL].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for all spells
      field[pCandExpr].text = "component.BaseSpell & !portal.ClsBook & CasterType.?"]]></eval>
    </thing>
  <thing id="pS2ClsCst1" name="Class Ability Custom: Primary" description="Select this adjustment to be able to adjust the number of custom abilities you get. A custom ability are things like barbarian rage powers, cleric domains or rogue talents as the Hero Lab software considers those to be Custom Abilities.  If you are not sure which adjustment to use then simply do a little trial and error to figure out which one you need." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Custom Ability total field up or down
      field[pChosen].chosen.field[cGiveSpec].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsCst2" name="Class Ability Custom: Secondary" description="Select this adjustment to be able to adjust the number of custom abilities you get. A custom ability are things like barbarian rage powers, cleric domains or rogue talents as the Hero Lab software considers those to be Custom Abilities.  If you are not sure which adjustment to use then simply do a little trial and error to figure out which one you need." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Custom Ability total field up or down
      field[pChosen].chosen.field[cGiveSp2nd].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsCst3" name="Class Ability Custom: Tertiary" description="Select this adjustment to be able to adjust the number of custom abilities you get. A custom ability are things like barbarian rage powers, cleric domains or rogue talents as the Hero Lab software considers those to be Custom Abilities.  If you are not sure which adjustment to use then simply do a little trial and error to figure out which one you need." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Custom Ability total field up or down
      field[pChosen].chosen.field[cGiveSp3rd].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsCst4" name="Class Ability Custom: Quaternary" description="Select this adjustment to be able to adjust the number of custom abilities you get. A custom ability are things like barbarian rage powers, cleric domains or rogue talents as the Hero Lab software considers those to be Custom Abilities.  If you are not sure which adjustment to use then simply do a little trial and error to figure out which one you need.\n\n{b}Note:{/b} Use this adjustment to remove the cleric classes &quot;Optional Variant Channeling&quot; by selecting cleric and placing a -1 into the counter." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Custom Ability total field up or down
      field[pChosen].chosen.field[cGiveSp4th].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsCst5" name="Class Ability Custom: Quintenary" description="Select this adjustment to be able to adjust the number of custom abilities you get. A custom ability are things like barbarian rage powers, cleric domains or rogue talents as the Hero Lab software considers those to be Custom Abilities.  If you are not sure which adjustment to use then simply do a little trial and error to figure out which one you need." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Custom Ability total field up or down
      field[pChosen].chosen.field[cGiveSp5th].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsBFt1" name="Class, Bonus Feats" description="Select this adjustment to be able to increase/decrease the number of bonus feats the selected class gets." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the number of bonus feats up or down
      field[pChosen].chosen.field[cBonFtMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsBFt2" name="Class, Bonus Feats Secondary" description="Select this adjustment to be able to increase/decrease the number of secondary bonus feats the selected class gets." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the number of bonus feats up or down
      field[pChosen].chosen.field[cSBonFtMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2MyPoint" name="Mythic Power Points" description="Use this adjustment to increase/decrease the number of mythic points you have." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Increase/decrease mythic point total
      #trkmax[trkMythic] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2EqInPl2" name="Equipment, Add Trackable" description="Select this adjustment to have one of your pieces of equipment display on the &quot;In-Play&quot; tab with a number of uses. This can be useful for making scrolls be trackable on the In-Play tab." compset="InPlay">
    <fieldval field="pMinimum" value="0"/>
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final"><![CDATA[
      ~ Set shorter live name
      field[livename].text = "Equipment, Trackable"

      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add Gear Uses tag
      perform field[pChosen].chosen.assign[Helper.UsesQty]
      ~ Add Weapon Tracker tag
      perform field[pChosen].chosen.assign[User.Tracker]

      ~ Set tracker amount
      field[pChosen].chosen.field[trkMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2MyDieSz" name="Mythic Surge Die Size" description="Use this adjustment to increase/decrease the die size of your mythic surge ability to a maximum of 1d12 and a minimum value of 1d6." compset="InPlay">
    <fieldval field="pMinimum" value="-3"/>
    <fieldval field="pMaximum" value="3"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <eval phase="Final" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If mythic surge not live get out now!
      doneif (hero.childlives[MythSurge] <> 1)

      ~ Calculate the amount of die size increase
      field[abValue].value += #value2[MythSurge] + (field[pAdjust].value * 2)

      ~ Make sure we don't go over 1d12
      If (field[abValue].value > 12) Then
         #value2[MythSurge] = 12
      ~..or smaller then 1d6
      ElseIf (field[abValue].value < 6) Then
         #value2[MythSurge] = 6
      ~..Set to the new value
      Else
         #value2[MythSurge] = field[abValue].value
      Endif]]></eval>
    </thing>
  <thing id="pS2ActPoin" name="Action Points" description="Use this adjustment to increase/decrease the number of action points your character has." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <usesource source="OptAction"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Increase/Decrease action points tracker
      #trkmax[hActionPts] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2MyTierA" name="Mythic Tier Abilities" description="You can use this adjustment to affect the number of {i}Mythic Ability Score Increases, Mythic Feats, Mythic Other Abilities, Mythic Path Abilities, and Mythic Spells{/i} that your mythic tier gives.  Mythic Other Abilities is the unique tier ability each tier gets. In example an Archmage gets &quot;Archmage Arcana&quot;." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Increase/Decrease resource amount
      field[pChosen].chosen.field[resMax].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for Mythic Resources
      field[pCandExpr].text = "component.Resource & thingid.resMy?"]]></eval>
    </thing>
  <thing id="pS2CLSubSc" name="Caster Level, Subschool" description="Select this adjustment to add a bonus/penalty to all your spells caster levels of a specific subschool of magic." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom" name="Custom Menu" abbrev="Custom Menu"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the CL to choosen school of magic
      field[pChosen].chosen.field[schCastLev].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SplSchool & sDescript.? & !sWordCat.? & sSubschool.?"]]></eval>
    </thing>
  <thing id="pS2SubscDC" name="Spell DC, Specific Subschool" description="Select this adjustment to add a bonus/penalty to all your spell DCs of a specific subschool of magic." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom" name="Custom Menu" abbrev="Custom Menu"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Adjust the DC to choosen school of magic
      field[pChosen].chosen.field[schDC].value += field[pAdjust].value]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Picks on Hero
      field[pUsePicks].value = 1
      ~ Set search expression for CORE spell school
      field[pCandExpr].text = "component.SplSchool & sDescript.? & !sWordCat.? & sSubschool.?"]]></eval>
    </thing>
  <thing id="pS2RceHDSz" name="Race, Die Size" description="Select this adjustment to be able to adjust the die size of the race up or down.  In example you change a Bear&apos;s default d8 to be d10 or d6 instead." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~set our focus to the hero's race
      perform hero.findchild[BaseRace].setfocus
      doneif (state.isfocus = 0)

      ~ Adjust race Hit Die Size
      focus.field[rHDSides].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2EqInPl3" name="Equipment, Remove Activation" description="Select this adjustment to have one of your pieces of equipment no longer display on the &quot;{b}In-Play{/b}&quot; activation tab. This can be useful for higher level when you don&apos;t want/need Trail Rations, Sunrods, or Daggers cluttering up the display." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove Activation 1 tag
      perform field[pChosen].chosen.delete[User.Activation]]]></eval>
    </thing>
  <thing id="pS2EqInPl4" name="Equipment, Add Activation" description="Select this adjustment to force one of your pieces of equipment to display a activation option on the &quot;{b}In-Play{/b}&quot; activation tab. This can be useful for allowing you to track when you are using a specific piece of gear." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add Activation 1 tag
      perform field[pChosen].chosen.assign[User.Activation]]]></eval>
    </thing>
  <thing id="pS2EqArmEn" name="Equipment, Armor Enhancement" description="Use this adjustment to increase/decrease the magical enhancement bonus of armor/shields. As this is an Enhancment bonus it does not &quot;stack&quot; with an existing enhancment bonus." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseArmor &amp; !(Helper.Natural|Helper.Static)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If bonus is not positive get out now!
      doneif (field[pAdjust].value <= 0)
      ~ Add "Plus" wording to Custom Armor and non-magical armor
      doneif (field[pChosen].chosen.tagis[component.BaseMagicI] - field[pChosen].chosen.tagis[component.Specific] = 1)

      ~ Set the live name
      field[pChosen].chosen.field[livename].text = signed(field[pChosen].chosen.field[BonEnhance].value) & " " & field[pChosen].chosen.field[name].text]]></eval>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Increase the armor bonus
      #applybonus[BonEnhance,field[pChosen].chosen,field[pAdjust].value]]]></eval>
    </thing>
  <thing id="pS2EqWepEn" name="Equipment, Weapon Enhancement" description="Use this adjustment to increase/decrease the magical enhancement bonus of specific magical weapon.  As this is an enhancment bonus being applied only the highest bonus will apply.  So if you have a Adamatine Battleaxe that already has a +1 Enhancement bonus to attack and set the counter here to +1 then you will only get a bonus to damage." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseWep"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If bonus is not positive get out now!
      doneif (field[pAdjust].value <= 0)
      ~ Add "Plus" wording to Custom Weapon and non-magical Weapons
      doneif (field[pChosen].chosen.tagis[component.BaseMagicI] - field[pChosen].chosen.tagis[component.Specific] = 1)

      ~ Set the live name
      field[pChosen].chosen.field[livename].text = signed(field[pChosen].chosen.field[BonEnhance].value) & " " & field[pChosen].chosen.field[name].text]]></eval>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Increase the Enhancement bonus to attack/damage
      #applybonus[BonEnhance,field[pChosen].chosen,field[pAdjust].value]]]></eval>
    </thing>
  <thing id="pS2wFullA1" name="Weapon Attacks: Full Attack - Select" description="Use this adjustment to make your selected ranged attack weapon get its full number of attacks. In example many firearms like Pistols won&apos;t display multiple attacks without this adjustment." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Delete the tag limiting us to a single ranged attack.
      perform field[pChosen].chosen.delete[Helper.SingleRAtt]]]></eval>
    </thing>
  <thing id="pS2wFullA2" name="Weapon Attacks: Full Attack - ALL" description="Use this adjustment to make ALL your ranged weapons get their full number of attacks. In example many firearms like Pistols won&apos;t display multiple attacks without this adjustment." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Loop through all weapons
      foreach pick in hero from BaseWep
        ~ Delete the tag limiting us to a single ranged attack.
        perform eachpick.delete[Helper.SingleRAtt]
      nexteach]]></eval>
    </thing>
  <thing id="pS2ClsSvRe" name="Class, Ref Save" description="Select this adjustment to be able to change the save progression of a classes Reflex Saves from Slow, Medium, or Fast progression.  After adding the adjustment select the class you which to change and then from the 2nd dropdown select the save progression (Slow, Medium, or Fast)." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="MythAdjAvl" tag="Mythic"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Render" priority="6000" index="3"><![CDATA[
      ~ Set new array of values
      field[pModeTable].arraytext[0] = "Select"
      field[pModeTable].arraytext[1] = "Slow"
      field[pModeTable].arraytext[2] = "Medium"
      field[pModeTable].arraytext[3] = "Fast"

      ~ Reset the name to remove Mythic stuff
      field[livename].text = field[thingname].text]]></eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no progression selected get out now!
      doneif (field[pIsMode].value <> 1)

      ~ Remove current Reflex Save Value
      perform field[pChosen].chosen.delete[cRef.?]

      ~ Assign new Slow
      If (field[pMode].value = 1) Then
        perform field[pChosen].chosen.assign[cRef.Poor]
      ~..Assign new Medium
      ElseIf (field[pMode].value = 2) Then
        perform field[pChosen].chosen.assign[cRef.Medium]
      ~..Assign new Fast
      ElseIf (field[pMode].value = 3) Then
        perform field[pChosen].chosen.assign[cRef.Good]
      Endif]]></eval>
    </thing>
  <thing id="pS2ClsSvFo" name="Class, Fort Save" description="Select this adjustment to be able to change the save progression of a classes Fortitude Saves from Slow, Medium, or Fast progression.  After adding the adjustment select the class you which to change and then from the 2nd dropdown select the save progression (Slow, Medium, or Fast)." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="MythAdjAvl" tag="Mythic"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Render" priority="6000" index="3"><![CDATA[
      ~ Set new array of values
      field[pModeTable].arraytext[0] = "Select"
      field[pModeTable].arraytext[1] = "Slow"
      field[pModeTable].arraytext[2] = "Medium"
      field[pModeTable].arraytext[3] = "Fast"

      ~ Reset the name to remove Mythic stuff
      field[livename].text = field[thingname].text]]></eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no progression selected get out now!
      doneif (field[pIsMode].value <> 1)

      ~ Remove current Reflex Save Value
      perform field[pChosen].chosen.delete[cFort.?]

      ~ Assign new Slow
      If (field[pMode].value = 1) Then
        perform field[pChosen].chosen.assign[cFort.Poor]
      ~..Assign new Medium
      ElseIf (field[pMode].value = 2) Then
        perform field[pChosen].chosen.assign[cFort.Medium]
      ~..Assign new Fast
      ElseIf (field[pMode].value = 3) Then
        perform field[pChosen].chosen.assign[cFort.Good]
      Endif]]></eval>
    </thing>
  <thing id="pS2ClsSvWi" name="Class, Will Save" description="Select this adjustment to be able to change the save progression of a classes Will Saves from Slow, Medium, or Fast progression.  After adding the adjustment select the class you which to change and then from the 2nd dropdown select the save progression (Slow, Medium, or Fast)." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="MythAdjAvl" tag="Mythic"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Render" priority="6000" index="3"><![CDATA[
      ~ Set new array of values
      field[pModeTable].arraytext[0] = "Select"
      field[pModeTable].arraytext[1] = "Slow"
      field[pModeTable].arraytext[2] = "Medium"
      field[pModeTable].arraytext[3] = "Fast"

      ~ Reset the name to remove Mythic stuff
      field[livename].text = field[thingname].text]]></eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no progression selected get out now!
      doneif (field[pIsMode].value <> 1)

      ~ Remove current Reflex Save Value
      perform field[pChosen].chosen.delete[cWill.?]

      ~ Assign new Slow
      If (field[pMode].value = 1) Then
        perform field[pChosen].chosen.assign[cWill.Poor]
      ~..Assign new Medium
      ElseIf (field[pMode].value = 2) Then
        perform field[pChosen].chosen.assign[cWill.Medium]
      ~..Assign new Fast
      ElseIf (field[pMode].value = 3) Then
        perform field[pChosen].chosen.assign[cWill.Good]
      Endif]]></eval>
    </thing>
  <thing id="pS2ClsBAB" name="Class, Base Attack Bonus" description="Select this adjustment to be able to change the base attack bonus (BAB) progression of a selected class Slow, Medium, or Fast progression.  After adding the adjustment select the class you which to change and then from the 2nd dropdown select the base attack bonus progression (Slow, Medium, or Fast)." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="MythAdjAvl" tag="Mythic"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Render" priority="6000" index="3"><![CDATA[
      ~ Set new array of values
      field[pModeTable].arraytext[0] = "Select"
      field[pModeTable].arraytext[1] = "Slow"
      field[pModeTable].arraytext[2] = "Medium"
      field[pModeTable].arraytext[3] = "Fast"

      ~ Reset the name to remove Mythic stuff
      field[livename].text = field[thingname].text]]></eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no progression selected get out now!
      doneif (field[pIsMode].value <> 1)

      ~ Remove current BAB
      perform field[pChosen].chosen.delete[cAttack.?]

      ~ Assign new Slow
      If (field[pMode].value = 1) Then
        perform field[pChosen].chosen.assign[cAttack.Poor]
      ~..Assign new Medium
      ElseIf (field[pMode].value = 2) Then
        perform field[pChosen].chosen.assign[cAttack.Medium]
      ~..Assign new Fast
      ElseIf (field[pMode].value = 3) Then
        perform field[pChosen].chosen.assign[cAttack.Good]
      Endif]]></eval>
    </thing>
  <thing id="pS2RaceHD" name="Race, Hit Dice Remove" description="Select this adjustment to be able to remove hit dice from a race.\n\n{b}Note:{/b} At this time you have to adjust the skill points manually and you can&apos;t remove any extra feats individually.  What you can do is check mark the &quot;Customize&quot; option next to the Race on the &quot;Background&quot; tab.  To be able to see &quot;Customize&quot; option you must change the character to be a NPC through the &quot;Configure Hero Window&quot; (ie press CTRL-K)." compset="InPlay">
    <fieldval field="pMinimum" value="-99"/>
    <fieldval field="pMaximum" value="0"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~set our focus to the hero's race
      perform hero.findchild[BaseRace].setfocus
      doneif (state.isfocus = 0)

      ~ Remove Race Hit Dice
      focus.field[rHitDice].value += field[pAdjust].value
      ~ Make sure we never go to Negative Hit Dice!
      focus.field[rHitDice].value = maximum(focus.field[rHitDice].value,0)]]></eval>
    </thing>
  <thing id="pS2EqConWt" name="Equipment, Container Weight" description="Use this adjustment to increase/decrease the maximum weight that a container (ie bag of holding) can carry.  You can also use this adjustment to set the max weight for Backpacks that normally do not have a max weight." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseEquip &amp; thing.holder"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Increase/Decrease the container max weight value
      field[pChosen].chosen.field[gHeldMaxWt].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2WepPrSp" name="Weapon Proficiency, Specific" description="Select this adjustment to add proficiency with a single specific weapon on your character. This adjustment only lets you select from weapons on your character and only that one single specific weapon will you be proficient with." compset="InPlay">
    <fieldval field="pWhat" value="Proficiency"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we've not chosen anything, get out
      doneif (field[pChosen].ischosen <> 1)

      perform field[pChosen].chosen.assign[Broadcast.WepProf]
      perform field[pChosen].chosen.assign[Helper.ExoticProf]]]></eval>
    </thing>
  <thing id="pS2RaChang" name="Custom Name: Race" description="Overwrite the name of your race using the (Source) or (Duration) field. Use this to force your race to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <comment>This must run at First/600 to work.</comment>
    <fieldval field="pCandExpr" value="component.BaseRace"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="First" priority="600"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2RaCusto" name="Custom Text: Race" description="Append text to the name of your race using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <comment>This must run at Render/999 to work.</comment>
    <fieldval field="pCandExpr" value="component.BaseRace"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="Render" priority="999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2EqItmSl" name="Equipment, Item Slot" description="Select this adjustment to change the item slot used by one your magic items." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseEquip &amp; Helper.EquipMag"/>
    <fieldval field="pCandExpr2" value="component.ItemSlot"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If nothing chosen2, get out now
      doneif (field[pChosen2].ischosen <> 1)

      ~ Remove all current equipment slot tags
      perform field[pChosen].chosen.delete[Hero.Eqp?]

      ~ If we are a slotless item now we are done!
      doneif (field[pChosen2].chosen.tagis[thingid.isEqpS2Les] <> 0)

      ~ Pull the ExtraSlot tag to us and rename to Hero
      perform field[pChosen2].chosen.pulltags[ExtraSlot.?,Hero]
      ~ Push all our Equipment Slot tags to the item
      perform field[pChosen].chosen.pushtags[Hero.Eqp?]]]></eval>
    </thing>
  <thing id="pS2wRngInc" name="Weapon Range Increment" description="Select this adjustment to be able to adjusts a weapons range increment value. So in example a dagger has a 10ft range increment. Using this adjustment you could change that to 5ft or 15ft..." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Adjust the Range Increment
      field[pChosen].chosen.field[wRangeInc].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2DmgSitu" name="Damage Bonus, Situational" description="Select this adjustment to add a situational bonus to your attacks.\n\n{b}(Source){/b} field is where you type in what is giving you this modifier. In example for dwarves it would be &quot;Hatred&quot;.\n{B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Goblins&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Damage Bonus"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="AttDam"/>
    <eval phase="Final" priority="25000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Assign the situational note to the damage pick
      #situational[hero.child[Damage],field[pDuration].text,field[pSource].text]

      ~ Find all weapons
      foreach pick in hero from BaseWep
        #situational[eachpick,field[pDuration].text,field[pSource].text]
      nexteach]]></eval>
    </thing>
  <thing id="pS2FAQ1" name="Spell-Like Abilities Prerequisites" description="Adding this adjustment lets your character count as a Divine/Arcane caster allowing you to meet the Prerequisites of feats like &quot;Arcane Strike&quot; when you have a Spell-like ability.\n\nFAQ:\n{b}Spell-Like Abilities, Casting, and Prerequisites: Does a creature with a spell-like ability count as being able to cast that spell for the purpose of prerequisites or requirements?{/B}\nYes.\nFor example, the Dimensional Agility feat (Ultimate Combat) has &quot;ability to use the abundant step class feature or cast dimension door&quot; as a prerequisite; a barghest has dimension door as a spell-like ability, so the barghest meets the &quot;able to cast dimension door prerequisite for that feat.\n\nEdit 7/12/13: The design team is aware that the above answer means that certain races can gain access to some spellcaster prestige classes earlier than the default minimum (character level 6). Given that prestige classes are usually a sub-optimal character choice (especially for spellcasters), the design team is allowing this FAQ ruling for prestige classes. If there is in-play evidence that this ruling is creating characters that are too powerful, the design team may revisit whether or not to allow spell-like abilities to count for prestige class requirements." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="Final" priority="90000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      perform hero.assign[Hero.Arcane]
      perform hero.assign[Hero.Divine]]]></eval>
    </thing>
  <thing id="pS2AttrHP" name="Ability Score (Hit Points)" description="Select this adjustment to change the ability score you use to gain bonus hit points from Constitution to a different ability score." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Attribute" name="Attributes" abbrev="Attributes"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Pull the Attribute Substition tag from the chosen ability score
      perform field[pChosen].chosen.pulltags[AttrSub.?]
      ~ Set the attribute substition tag onto the Con score
      perform hero.child[aCON].pushtags[AttrSub.?]
      ~ Remove the No Score tag from ability pick
      ~perform hero.child[aCON].assign[Helper.NoScore]]]></eval>
    </thing>
  <thing id="pS2FeatVal" name="Feat: Values" description="Select this adjustment to be able to adjust the values (one, two, three, or four) which can represent many things (ie dice, damage bonus, etc...) of any of your feats on your character.\n\n{b}Example:{/b} This adjustment could be used to select a Arcane Strike feat, then select Value 1, and then increase/decrease the bonus to damage the feat gives. Or you could select Power Attack feat and select Value 2 which only adjusts power attack damage bonus value up/down." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseFeat"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.abValue"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <eval phase="First" priority="500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      Call S2AbValues]]></eval>
    </thing>
  <thing id="pS2RaceHan" name="Race, Number of Hands" description="Select this adjustment to be able to adjust the number of hands/arms that a creature has.  By default a race has two hands." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="99"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~set our focus to the hero's race
      perform hero.findchild[BaseRace].setfocus
      doneif (state.isfocus = 0)

      ~ Adjust race Number of Hands
      focus.field[rNumHands].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2EqValue" name="Equipment, Values" description="Select this adjustment to be able to adjust the values (one, two, three, four, or five) which can represent many things (ie dice, damage bonus, etc...) of any of your equipment on your character." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.abValue"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      Call S2AbValues]]></eval>
    </thing>
  <thing id="pS2ClsAbV" name="Class Ability: Values" description="Select this adjustment to be able to adjust the values (1,2,3,4 or 5), which can represent many things (ie dice, damage bonus, etc...) of any of your class abilities.\n\n{b}Example:{/b} This adjustment could be used to select a rogues Sneak Attack and increase/decrease the number of d6 dice the ability gives." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.abValue"/>
    <fieldval field="pCandExpr" value="component.Ability &amp; SpecSource.cHelp? &amp; !component.BaseFeat &amp; Helper.ShowSpec"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="20000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      Call S2AbValues]]></eval>
    </thing>
  <thing id="pS2ClsAdTr" name="Class Ability, Add Trackable" description="Select this adjustment to have one of your class abilities display on the &quot;In-Play&quot; tab with a number of uses. This can be useful for making a class ability have a tracker that does not currently have a tracker." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; SpecSource.cHelp? &amp; !component.BaseFeat &amp; Helper.ShowSpec"/>
    <fieldval field="pMinimum" value="0"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Final"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Give generic "Uses" per day tag
      perform field[pChosen].chosen.assign[Helper.UsesQty]
      ~ Add the User Tracker tag
      perform field[pChosen].chosen.assign[User.Tracker]

      ~ Set tracker amount
      field[pChosen].chosen.field[trkMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsDltT" name="Class Ability, Remove Tracker" description="Select this adjustment to have one of your class abilities no longer display on the &quot;{b}In-Play{/b}&quot; tab with a number of uses. This can be useful for an ability that you never use and reducing the number of things to track on the &quot;In-Play&quot; tab." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; SpecSource.cHelp? &amp; !component.BaseFeat &amp; Helper.ShowSpec"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="Final"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove Weapon Tracker tag
      perform field[pChosen].chosen.delete[User.Tracker]]]></eval>
    </thing>
  <thing id="pS2AbChang" name="Custom Name: Ability" description="Overwrite the name of an ability (Race or Class) using the (Source) or (Duration) field. Use this to force an ability to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; !component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="Helper" tag="AdjNoPlus" name="AdjNoPlus" abbrev="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="SpecAbil"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2AbCusto" name="Custom Text: Ability" description="Append text to the name of your ability (Race or Class) using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; !component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="OthAdjCat" tag="SpecAbil"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will
      ~ either append or overwrite. We now use either Source or
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="pS2wOneAtt" name="Weapon Attacks: Force Single" description="Select this adjustment to force the selected weapon to only have a single attack display. This can be useful when building a multi-arm creature." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Delete any "extra high" tags
      perform field[pChosen].chosen.delete[Helper.ExtraHigh]]]></eval>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Apply the Single Attack tag to the weapon
      perform field[pChosen].chosen.assign[Helper.SingleAtt]]]></eval>
    </thing>
  <thing id="pS2wExtAtt" name="Weapon Attacks: Force Extra High" description="Select this adjustment to force the selected weapon to display two attacks at its highest base attack value. This is similiar to when a creature is effected by Haste or Speed weapon property. The counter can be used to increase the number of extra attacks the weapon gets." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      var iX as number
      while (iX < field[pAdjust].value)
        iX += 1
        ~ Apply the Extra Hight Attack tag to the weapon
        perform field[pChosen].chosen.assign[Helper.ExtraHigh]
        loop]]></eval>
    </thing>
  <thing id="pS2SkilSiA" name="Skill Bonus, Situational-All Ability Score" description="Select this adjustment to add a situational bonus to all skills of the selected ability score. Use source for the name and duration for the situational bonus text.\n\n1st - Select the skill this modifier is meant for.\n2nd - In the {b}(Source){/b} field is where you type in what is giving you this modifier. In example for Fighter&apos;s Bravery class ability type in &quot;Bravery&quot;.\n3rd - In the {B}(Duration){/b} field is where you type in the modifier.  In example &quot;+2 vs Fear&quot;.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Skill Bonus"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Attribute"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Give bonus only to the selected ability score
      foreach pick in hero from BaseSkill where field[pChosen].chosen.tagids[SkillAbil.?]
        #situational[each,field[pDuration].text,field[pSource].text]
      nexteach]]></eval>
    </thing>
  <thing id="pS2EqText" name="Equipment, Notes" description="Select this adjustment to have a input box appear next to the selected piece of gear. This allows you to type in some &quot;notes&quot; (up to 100 characters) that will display as part of the equipments description text." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <fieldval field="pSource" value="Notes"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append the entered text to the gear item
      field[pChosen].chosen.field[DescAppend].text &= field[pSource].text]]></eval>
    </thing>
  <thing id="pS2RceUnde" name="Race, Undersized Weapons" description="Select this adjustment to force your race to use undersized weapons (ie a Centaur like race would have this)." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="600"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set race to use undersized weapons
      perform hero.findchild[BaseRace].assign[Helper.Undersized]]]></eval>
    </thing>
  <thing id="pS2RceOver" name="Race, Oversized Weapons" description="Select this adjustment to allow your race to use oversized weapons. This would allow a human to wield a Large Longsword without penalty." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="600"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Set hero to use oversized weapons
      perform hero.assign[Hero.PowerBuild]]]></eval>
    </thing>
  <thing id="pS2SkBonTy" name="Skill Bonus, Type" description="Select this adjustment to give a bonus/penalty to a skill with a specific bonus type. Untyped Bonuses stack with all other bonuses. Circumstance bonuses will stack with themseleves as its assumed they are coming from different things." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.BonusType"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="Skill"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="PostAttr" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set focus to the chosen Pick
      perform field[pChosen].chosen.setfocus
      doneif (state.isfocus = 0)

      call S2AdjBon2]]></eval>
    </thing>
  <thing id="pS2MyAbRTr" name="Mythic Ability, Remove Tracker" description="Select this adjustment to have one of your class abilities no longer display on the &quot;{b}In-Play{/b}&quot; tab with a number of uses. This can be useful for an ability that you never use and reducing the number of things to track on the &quot;In-Play&quot; tab." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; Helper.Mythic &amp; !component.BaseFeat &amp; Helper.ShowSpec"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <eval phase="Final"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove Weapon Tracker tag
      perform field[pChosen].chosen.delete[User.Tracker]]]></eval>
    </thing>
  <thing id="pS2MyAdTr" name="Mythic Ability, Add Trackable" description="Select this adjustment to have one of your class abilities display on the &quot;In-Play&quot; tab with a number of uses. This can be useful for making a class ability have a tracker that does not currently have a tracker." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; Helper.Mythic &amp; !component.BaseFeat &amp; Helper.ShowSpec"/>
    <fieldval field="pMinimum" value="0"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <eval phase="Final"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Give generic "Uses" per day tag
      perform field[pChosen].chosen.assign[Helper.UsesQty]
      ~ Add the User Tracker tag
      perform field[pChosen].chosen.assign[User.Tracker]

      ~ Set tracker amount
      field[pChosen].chosen.field[trkMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p1wTouch2" name="Touch Attack Range, Damage" description="Use this adjustment to select your &quot;Ranged Touch Attack&quot; weapon and whatever you type into the (source) section will get displayed instead of &quot;As Spell&quot; for damage. This allows you to setup a Ranged Touch Attack that matches to a domain power or other class ability.\n\n{b}Note:{/b} This adjustment only works with the Touch Attack weapons you add on the &quot;Weapons&quot; tab. Not with the normal Lone Wolf touch attack weapons." compset="InPlay">
    <fieldval field="pCandExpr" value="PackHelper.Touch &amp; wCategory.RangeProj"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value <> 1)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      field[pChosen].chosen.field[wFixRanDam].text = field[pSource].text]]></eval>
    </thing>
  <thing id="p1wTouch1" name="Touch Attack, Damage" description="Use this adjustment to select your &quot;Touch Attack&quot; weapon and whatever you type into the (source) section will get displayed instead of &quot;As Spell&quot; for damage. This allows you to setup a Touch Attack that matches to a domain power or other class ability.\n\n{b}Note:{/b} This adjustment only works with the Touch Attack weapons you add on the &quot;Weapons&quot; tab. Not with the normal Lone Wolf touch attack weapons." compset="InPlay">
    <fieldval field="pCandExpr" value="PackHelper.Touch &amp; wCategory.Melee"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value <> 1)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      field[pChosen].chosen.field[wFixDamage].text = field[pSource].text]]></eval>
    </thing>
  <thing id="pS2SecSpel" name="Spells Per Day, Secondary" description="Select this adjustment to add to the number of secondary spells (ie Domain spells) of a certain spell level a class can cast per day." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Class | (component.BaseRace &amp; SplLookup.?)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="SpellLevel" name="Also Spell Levels" abbrev="Also Spell Levels"/>
    <tag group="OthAdjCat" tag="Class" name="Class" abbrev="Class"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Add extra spell levels appropriately
      var spelllevel as number
      spelllevel = field[pSpellLvl].value
      field[pChosen].chosen.field[cSecMax].arrayvalue[spelllevel] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2MyRanks" name="Mythic Ranks" description="You can use this adjustment to set the total mythic ranks of your monsters. This means if your monster is MR2 and you want it to be MR1 you set the counter to &quot;1&quot;.  If you want the monster to be MR5 you set the counter to &quot;5&quot;.  This sets the ranks it does not adjust the value up/down." compset="InPlay">
    <fieldval field="pMinimum" value="0"/>
    <fieldval field="pMaximum" value="10"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Mythic"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="First" priority="10000" index="2"><![CDATA[      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Delete all existing mythic ranks
      perform hero.delete[MythicTier.MythicRank]

      var iX as number
      var nTotal as number
      iX = 0
      ~ Add any addtional Mythic Ranks as we know we have at least one
      while (iX < field[pAdjust].value)
        iX += 1
        perform hero.assign[MythicTier.MythicRank]
      loop]]></eval>
    </thing>
  <thing id="pS2PFSncSp" name="PFS, Spell" description="Adding this adjustment will allow you to make a spell on your character legal in a Pathfinder Society Characters (including &quot;Core Only Campaign&quot;). In addition it will allow a Racial Spell to be used by other races. Add the spell you wish to make legal first and then use this adjustment to select the spell.\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the race name. This allows you to easily note which boon is making this race as valid." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Find all copies of the selected spell. This is because for
      ~ wizards we have a copy in the spell book and memorized and we
      ~ have to set the tag onto "both" instances.
      foreach pick in hero from BaseSpell where field[pChosen].chosen.tagids[ClsAllowSp.?]
        ~ Set Core Campaign OK tag
        perform eachpick.assign[Helper.CoreCampOK]
        ~ Remove the Not allowed for PFS tag
        perform eachpick.delete[Helper.NoPathSoc]
        ~ Remove the Race Spell PFS tag
        perform eachpick.assign[thing.skipprereq]
      nexteach]]></eval>
    <eval phase="Render" priority="999999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2PFSfeat" name="PFS, Feat &amp; Traits" description="Adding this adjustment will allow you to select a single piece of equipment (gear, magic items, weapons or armor) and make it legal for Pathfinder Society Characters.\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the feat/trait name. This allows you to easily note which boon is making this feat/trait as valid." compset="InPlay">
    <comment>v1.1: Risner</comment>
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseFeat | component.BaseTrait"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      perform field[pChosen].chosen.delete[Helper.NoPathSoc]
      perform field[pChosen].chosen.assign[Helper.CoreCampOK]]]></eval>
    <eval phase="Render" priority="999999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2PFSrace" name="PFS, Race" description="Adding this adjustment will make your race legal for Pathfinder Society Characters (including &quot;Core Only Campaign&quot;).\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the race name. This allows you to easily note which boon is making this race as valid." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseRace"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <eval phase="First" priority="1"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the not valid for PFS tag
      perform field[pChosen].chosen.delete[Helper.NoPathSoc]
      ~ Allowed for PFS Core Campaign
      perform field[pChosen].chosen.assign[Helper.CoreCampOK]
      ~ Add skip pre-req tag
      perform field[pChosen].chosen.assign[thing.skipprereq]]]></eval>
    <eval phase="Render" priority="999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2PFSgear" name="PFS, Equipment Boon" description="Adding this adjustment will allow you to select a single piece of equipment (gear, magic items, weapons or armor) and make it legal for Pathfinder Society Characters (including &quot;Core Only Campaign&quot;).\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the equipment name. This allows you to easily note which boon is making this equipment as valid." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(thingid.wUnarmed|thingid.mNatural|thingid.mArmor|thingid.mShield|thingid.wTouch|thingid.wRay|thingid.gClothes|thingid.gGround)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the not valid for PFS tag
      perform field[pChosen].chosen.delete[Helper.NoPathSoc]
      perform field[pChosen].chosen.assign[Helper.CoreCampOK]]]></eval>
    <eval phase="Render" priority="999999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2PFSarch" name="PFS, Archetype" description="Adding this adjustment will allow you to select a Archetype and make it legal for Pathfinder Society Characters (including &quot;Core Only Campaign&quot;).\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the Archetype name. This allows you to easily note which boon is making this Archetype as valid." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseVary"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      perform field[pChosen].chosen.delete[Helper.NoPathSoc]
      perform field[pChosen].chosen.assign[Helper.CoreCampOK]]]></eval>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2EqUses" name="Equipment, Uses/Period" description="Select thsi adjustment to be able to adjus the numbe of uses/period of a specific piece of equipment." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="YourGear"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      field[abValue].value += field[pAdjust].value

      field[pChosen].chosen.field[trkMax].value += field[abValue].value]]></eval>
    </thing>
  <thing id="pS2EqNoNiR" name="Equipment, No Nights Rest" description="Select this adjustment to force a piece of equipment to not have its tracker/counter get reset when you do a &quot;Nights Rest&quot;." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Final"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add the Helper No Night Rest tag
      perform field[pChosen].chosen.assign[Helper.NoNightRes]]]></eval>
    </thing>
  <thing id="pS2EqNigRe" name="Equipment, Nights Rest" description="Select this adjustment to force a piece of equipment to have its tracker/counter to get reset when you do a &quot;Nights Rest&quot;." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove the Helper No Night Rest tag
      perform field[pChosen].chosen.delete[Helper.NoNightRes]]]></eval>
    </thing>
  <thing id="pS2RacRest" name="Racial Ability, Restore" description="Select this adjustment to restore a racial ability that has been disabled. This can be used to restore a racial ability that an alternate racial trait disabled." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.Ability &amp; component.RaceAbil"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the Hide and Disable tags
      perform field[pChosen].chosen.delete[Hide.Special]
      perform field[pChosen].chosen.delete[Helper.SpcDisable]
      perform field[pChosen].chosen.delete[Helper.SpcReplace]]]></eval>
    </thing>
  <thing id="pS2ACFiend" name="Animal Companion: Fiendish Template" description="Select this adjustment to add the Fiendish template to your animal companion.  You must use this on the Animal Companion itself not your character." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="400"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      perform hero.assign[CompPower.tmFiendish]]]></eval>
    </thing>
  <thing id="pS2ACCeles" name="Animal Companion: Celestial Template" description="Select this adjustment to add the celestial template to your animal companion.  You must use this on the Animal Companion itself not your character." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="400"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      perform hero.assign[CompPower.tmCelest]]]></eval>
    </thing>
  <thing id="pS2ClsRng" name="Class Ability: Range" description="Select this adjustment to adjust class ability range value up or down." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="ClassAbil"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust range value up or down
      field[pChosen].chosen.field[abRange].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2wFlurry" name="Weapon Flurry of Blows" description="Select this adjustment to force the selected weapon to show Flurry of Blow values." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="MelAttOver" tag="aCON"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set Show Flurry of Blows tag
      perform field[pChosen].chosen.assign[Helper.ShowFlurry]]]></eval>
    </thing>
  <thing id="pS2Drawbck" name="Drawbacks Allowed" description="Select this adjustment to add or subtract the number of drawbacks your character is allowed." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      field[abValue].value += field[pAdjust].value

      ~ Add to traits allowed
      #resmax[resDrawbac] += field[abValue].value]]></eval>
    </thing>
  <thing id="pS2CnfgFe1" name="Configurable: Feats One" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMaxF1].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CnfgFe2" name="Configurable: Feats Two" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMaxF2].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CnfgFe3" name="Configurable: Feats Three" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMaxF3].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CfgMax1" name="Configurable: Table One" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMax1].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CfgMax2" name="Configurable: Table Two" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMax2].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CfgMax3" name="Configurable: Table Three" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMax3].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2CfgMax4" name="Configurable: Table Four" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMax4].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="ppS2CfgMax" name="Configurable: Table Five" description="Select this adjustment to be able to adjust the number of bonus feats a configurable gives. \n\nA &quot;configurable&quot; is special tab that can often display for feats, classes, or other unique races." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Companion"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Adjust the Configruable Feat total
      field[pChosen].chosen.field[cfgMax5].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2SheetSp" name="Character Sheet: Item Spells" description="Select this adjustment to cause spells on magic items (ie Magic Staffs) to print to your character sheet." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ We need to make sure we are caster
      perform hero.assign[Hero.Caster]

      ~ If we're not in output mode, don't do anything
      doneif (state.isoutput = 0)

      ~ Make all "item" spells print to character sheet
      foreach pick in hero from BaseSpell where "Helper.ItemSpell"
        perform eachpick.delete[Helper.?]
      nexteach]]></eval>
    </thing>
  <thing id="pS2GenTrac" name="Generic, Tracker" description="This adjustment allows you to add a generic/customizable Tracker to your character that will display on the In-Play tab. This allows you to set the tracker name and the number of usages it allows.\n\n{B}Note:{/b} Add this adjustment and then select &quot;Tracker 1&quot; from the drop down box and then change the name of the tracker from &quot;Tracker 1&quot; to whatever you wish.  Finally set the counter to the number of &quot;uses&quot; this should allow." compset="InPlay">
    <fieldval field="pSource" value="Tracker 1"/>
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.Tracker &amp; thingid.trkS2?"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <bootstrap thing="trkS2Trck1">
      <containerreq phase="First" priority="457"><![CDATA[
                 fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="Final" priority="5000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set the custom Tracker name
      field[pChosen].chosen.field[livename].text = field[pSource].text
      ~ Set Tracker duration
      field[pChosen].chosen.field[trkMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="trkS2Trck1" name="Tracker 1" description="This is a generic tracker." compset="Tracker">
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Usage" tag="UsedUp"/>
    <tag group="User" tag="Tracker"/>
    </thing>
  <thing id="pS2ACValid" name="Animal Companion, Allowed Class" description="Make any single animal companion valid for any class.\n\n{b}Note:{/b} This adjustment ONLY works on the Animal Companion itself.  Add your animal companion first then on the &quot;Personal&quot; tab add this adjustment.  From the drop down select the class that this animal companion should be valid for." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="PostLevel" priority="10000">~ Select Class Things
      field[pUsePicks].value = 0
      ~ Select Animal Companion Picks
      field[pUsePicks2].value = 1</eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ Check to see if a class was chosen
      doneif (field[pChosen].ischosen = 0)

      ~ Pull the Class Companion List
      perform field[pChosen].chosen.pulltags[CompList.?]

      ~ Push the Class Companion List to the animal companion
      perform hero.findchild[BaseComp,"Race.AnimComp"].pushtags[CompList.?]]]></eval>
    </thing>
  <thing id="pS2FtPreRe" name="Feat, Pre-Req Valid" description="Use this adjustment to be able to make any feat on your character into a valid feat.  In example if you add feat that has validation errors for prerequisites you can select that feat from the drop down and it will not longer be invalid." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      perform field[pChosen].chosen.assign[thing.skipprereq]]]></eval>
    </thing>
  <thing id="pS2ArcStRe" name="Archetype: Stop Replace Ability" description="This adjustment lets you prevent an archetype from replacing a specific class ability. This is useful for when you want to combine two different archetypes together and they both replace the same class feature and not display a warning message.\n\n{b}Note:{/b} This adjustment ONLY works AFTER you have already added the archetype to your character.  Then from the first drop down select the archetype.  From the second drop down select the class ability that should not get replaced." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseVary"/>
    <fieldval field="pCandExpr2" value="component.BaseClSpec"/>
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      var sTags as string
      ~ Built a list of abilities that are being replaced
      sTags = field[pChosen].chosen.tagids[AbReplace.?,"|"]

      ~ Select Things
      field[pUsePicks2].value = 0
      ~ Set search expression for CORE spell school
      field[pCandExpr2].text = "component.BaseClSpec & (" & sTags & ")"]]></eval>
    <eval phase="First" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen2].ischosen = 0)

      var sTags as string
      ~ Get the tag of the ability we need to remove
      sTags = field[pChosen2].chosen.tagids[AbReplace.?]
      ~ Delete the ability replace tag from the archetype
      perform field[pChosen].chosen.deletestr[sTags]]]></eval>
    </thing>
  <thing id="mmS2Level1" name="- Higher Spell Slot -" description="This helper metamagic allows you to prepare or use lower level spells in higher level spell slots. After adding this you will be able to select how many levels higher.\n\n{b}Spell Slots{/b}\nThe various character class tables show how many spells of each level a character can cast per day. These openings for daily spells are called spell slots. a spellcaster always has the option to fill a higher-level spell slot with a lower-level spell. A spellcaster who lacks a high enough ability score to cast spells that would otherwise be his due still gets the slots but must fill them with spells of lower levels." compset="Metamagic" summary="Prepare spells in higher lvl slots." uniqueness="unique">
    <fieldval field="mmAbbr" value="Higher Slot"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CustomMeta"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="mmS2Level2" name="- Lower Spell Slot -" description="This helper metamagic allows you to prepare or use higher level spells in lower level spell slots. After adding this you will be able to select how many levels lower.\n\n{b}Spell Slots{/b}\nThe various character class tables show how many spells of each level a character can cast per day. These openings for daily spells are called spell slots. a spellcaster always has the option to fill a higher-level spell slot with a lower-level spell. A spellcaster who lacks a high enough ability score to cast spells that would otherwise be his due still gets the slots but must fill them with spells of lower levels.\n\n{b}Note:{/b} Why the counter will display +1 you are really lowering the spell level by -1.  In addition the &quot;Total Spell Level&quot; will display incorrectly. But the final value of the spell will be correct and will work correctly on the &quot;Spell&quot; tab." compset="Metamagic" summary="Prepare spells in lower lvl slots." uniqueness="unique">
    <fieldval field="mmAbbr" value="Lower Slot"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CustomMeta"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="50000">~ Change the final spell level down by 2. This compensates for the
      ~ increased spell level and the additional level we want to bring
      ~ it down for.
      parent.field[sLevel].value += -2 * field[mmLevel].value</eval>
    </thing>
  <thing id="pS2ClsSpl1" name="Class, Spells Change Lvl" description="Select this adjustment to be able to move spell uses per day from one level to another.  This is useful if you wish to use higher level slots to power lower level spells.\n\n{b}Note:{/b} In the first drop down select your class.  The second drop down is the &quot;from&quot; spell level and the final/third drop down is the &quot;to&quot; spell level." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Class | (component.BaseRace &amp; SplLookup.?)"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.SpellLevel"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="SpellLevel"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      ~ If nothing chosen2, get out now
      doneif (field[pChosen2].ischosen = 0)

      ~ Add extra spell levels appropriately
      var toLvl as number
      var fromLvl as number
      fromLvl = field[pChosen2].chosen.tagvalue[Value.?]
      toLvl = field[pSpellLvl].value

      ~ From Level
      field[pChosen].chosen.field[cMemMax].arrayvalue[fromLvl] -= field[pAdjust].value
      field[pChosen].chosen.field[cCastMax].arrayvalue[fromLvl] -= field[pAdjust].value

      ~ To Level
      field[pChosen].chosen.field[cMemMax].arrayvalue[toLvl] += field[pAdjust].value
      field[pChosen].chosen.field[cCastMax].arrayvalue[toLvl] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsAlF1" name="Class, Allowed Feats" description="Select this adjustment to be able to add addtional feat choices for a specific class. In example if you wanted to allow a Monk to choose Vital Strike as a class bonus feat you would select Monk from the first drop down and &quot;Vital Strike&quot; from the 2nd drop down." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If no class chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no feat chosen, get out now
      doneif (field[pChosen2].ischosen <> 1)

      perform field[pChosen2].chosen.pulltags[fInclude.?]
      perform field[pChosen].chosen.pushtags[fInclude.?]]]></eval>
    </thing>
  <thing id="pS2ClsAlF2" name="Class, Allowed 2nd Feats" description="Select this adjustment to be able to add addtional feat choices for a specific class 2nd table of feats. In example if you wanted to allow a Brawler to choose Vital Strike as a class bonus feat you would select Brawler from the first drop down and &quot;Vital Strike&quot; from the 2nd drop down." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If no class chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no feat chosen, get out now
      doneif (field[pChosen2].ischosen <> 1)

      perform field[pChosen2].chosen.pulltags[fIncSec.?]
      perform field[pChosen].chosen.pushtags[fIncSec.?]]]></eval>
    </thing>
  <thing id="pS2ClsAlF3" name="Class, Allowed 3rd Feats" description="Select this adjustment to be able to add addtional feat choices for a specific class 3rd table of feats. In example if you wanted to allow a Brawler to choose Vital Strike as a class bonus feat you would select Brawler from the first drop down and &quot;Vital Strike&quot; from the 2nd drop down." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.BaseFeat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If no class chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If no feat chosen, get out now
      doneif (field[pChosen2].ischosen <> 1)

      perform field[pChosen2].chosen.pulltags[fIncTert.?]
      perform field[pChosen].chosen.pushtags[fIncTert.?]]]></eval>
    </thing>
  <thing id="pS2fFurFoc" name="Feat: Furious Focus" description="Add this adjustment to allow you to dipsplay the value of your first attack when using Power Attack and Furious Focus feat.\n\n{b}Selection options{/b}\n{b}All{/b} - Display the furious focus value as part of your weapon name, on a printed statblock, and as a situational note on the printed character sheet.\n{b}Statblock{/b} - Display the furious focus value only on a printed statblock.\n{b}Print{/b} - Display the foruious focus value as a situational note on the printed character sheet.\n{b}Weapon{/b} - Display the furious focus value as part of your weapon name which can be useful if using a custom character sheet." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      var v_Bracket as string
      var v_wAttack as number

      foreach pick in hero from BaseWep where "wCategory.Melee & wClass.TwoHanded|wClass.OneHanded"
        v_wAttack = eachpick.field[wAttack].value
        Call S2FurFoc
        ~ Weapon
        if (field[pMode].value = 3) Then
          eachpick.field[livename].text &= v_Bracket
        endif
        ~ All
        if (field[pMode].value = 0) Then
          eachpick.field[livename].text &= v_Bracket
        endif

        ~ Statblock
        if (field[pMode].value = 1) Then
          eachpick.field[sbName].text &= v_Bracket
        endif
        ~ All
        if (field[pMode].value = 0) Then
          eachpick.field[sbName].text &= v_Bracket
        endif
      nexteach]]></eval>
    <eval phase="Final" priority="50000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If Statblock or Weapon only get out now!
      doneif (field[pMode].value = 1)
      doneif (field[pMode].value = 3)

      var v_Hit as string
      var v_wAttack as number

      foreach pick in hero from BaseWep where "wCategory.Melee & wClass.TwoHanded|wClass.OneHanded"
        v_wAttack = eachpick.field[wAttack].value
        Call S2FurFoc
        #situational[eachpick,v_Hit,field[name].text]
      nexteach]]></eval>
    <eval phase="Render" priority="6000" index="3"><![CDATA[
      ~ Set new array of values
      field[pModeTable].arraytext[0] = "All"
      field[pModeTable].arraytext[1] = "Statblock"
      field[pModeTable].arraytext[2] = "Print"
      field[pModeTable].arraytext[3] = "Weapon"

      ~ Reset the name to remove Mythic stuff
      field[livename].text = field[thingname].text]]></eval>
    </thing>
  <thing id="pS2FtRmvTr" name="Feats, Remove Tracker" description="Select this adjustment to have one of your feats no longer display on the &quot;{b}In-Play{/b}&quot; tab." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pCandExpr" value="component.BaseFeat &amp; SpecSource.Feat"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="FeatTrait"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="200000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Remove Feat Uses tag
      perform field[pChosen].chosen.delete[Helper.UsesQty]
      ~ Remove Feat Tracker tag
      perform field[pChosen].chosen.delete[User.Tracker]]]></eval>
    </thing>
  <thing id="pS2AbChkSi" name="Ability Checks, Situational" description="Select this adjustment be able to set a situational note to a specific ability score on your character.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Ability Checks"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <tag group="Adjustment" tag="Attribute"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen get out now!
      doneif (field[pChosen].ischosen = 0)

      #situational[field[pChosen].chosen,field[pDuration].text,field[pSource].text]]]></eval>
    </thing>
  <thing id="pS2AbChkAL" name="Ability Checks-ALL, Situational" description="Select this adjustment be able to set a situational note on to all your ability scores for your character.\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pSource" value="Ability Checks"/>
    <fieldval field="pDuration" value="Situational Text"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Loop through all the attributes
      foreach pick in hero from BaseAttr
        #situational[eachpick,field[pDuration].text,field[pSource].text]
      nexteach]]></eval>
    </thing>
  <thing id="pS2UnBckSk" name="Unchained Background Skills, Total" description="Use this adjustment to increase/decrease the total number of background skills your character has." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <usesource source="PUBackSkil"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Increase/Decrease background skill resource
      #resmax[resBackSkl] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2UnBckLv" name="Unchained Background Skills, Level" description="Use this adjustment to increase/decrease the number of background skills your character gets per character level.  So normally a character gets 2 background skills a level. You could change that to be 3 per level or 1 per level." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <usesource source="PUBackSkil"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="PostLevel" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Increase/Decrease background skill resource
      #resmax[resBackSkl] += (field[pAdjust].value * #totallevelcount[])]]></eval>
    </thing>
  <thing id="pS2RceDC01" name="Race, DC Uses Total Class Level" description="Select this adjustment to have the selected ability use &quot;total class level&quot; instead of &quot;racial hit dice&quot; when calculating its DC." compset="InPlay">
    <fieldval field="pCandExpr" value="component.RaceAbil"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      perform field[pChosen].chosen.assign[Helper.DCUseTotHD]]]></eval>
    </thing>
  <thing id="pS2AttrTyp" name="Ability Score (Temp), Type" description="Select this adjustment to give a specific bonus/penalty type to a selected Ability Score. This adjustment follows the normal Pathfinder stacking rules regarding typed bonuses. So Bonus and Circumstance types will stack with themselves but all others will only apply the greatest value." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; (PackSelect.BonusType &amp; !AdjustBon.Resist)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="Attribute"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      doneif (field[pChosen2].ischosen <> 1)
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Figure out which 'field' to apply the adjustment too
      If (field[pChosen2].chosen.tagis[AdjustBon.Alchemical] <> 0) Then
         #applybonus[BonAlch,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Circumstan] <> 0) Then
         field[pChosen].chosen.field[ModCirc].value += field[pAdjust].value
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Competence] <> 0) Then
         #applybonus[BonComp,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Enhancemen] <> 0) Then
         #applybonus[BonEnhance,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Insight] <> 0) Then
         #applybonus[BonInsight,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Luck] <> 0) Then
         #applybonus[BonLuck,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Morale] <> 0) Then
         #applybonus[BonMorale,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Profane] <> 0) Then
         #applybonus[BonProfane,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Sacred] <> 0) Then
         #applybonus[BonSacred,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Trait] <> 0) Then
         #applybonus[BonTrait,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Resist] <> 0) Then
         #applybonus[svResist,field[pChosen].chosen,field[pAdjust].value]
      ElseIf (field[pChosen2].chosen.tagis[AdjustBon.Bonus] <> 0) Then
         field[pChosen].chosen.field[Bonus].value += field[pAdjust].value
      Endif]]></eval>
    </thing>
  <thing id="pS2RceSize" name="Race, Size Category" description="Select this adjustment to change your size category but unlike the adjustment &quot;Size Category&quot; this adjustment does NOT change your equipment size." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Sizemod is the +/- change to apply to the hero's size.
      var sizemod as number
      var iX as number

      sizemod = field[pAdjust].value

      ~ If no size mode then we are done!
      doneif (sizemod = 0)

      ~ Add to size - must come after race and template size set
      herofield[tSize].value += sizemod

      ~ Change the size of our natural weapons
      foreach pick in hero from BaseNatWep where "!Helper.NatSizeDmg"
        if (sizemod > 0) then

          for iX = 1 to sizemod
            perform eachpick.assign[Helper.DamageUp]
          next

        elseif (sizemod < 0) then

          for iX = sizemod to -1
            perform eachpick.assign[Helper.DamageDown]
          next

        endif
      nexteach]]>
      <before name="Resize Same Size Gear"/>
      </eval>
    </thing>
  <thing id="pS2wBonusT" name="Touch Attack Bonus, Type" description="Select this adjustment to give a bonus/penalty to Range or Melee touch attack with a specific bonus type. Untyped Bonuses stack with all other bonuses. Circumstance bonuses will stack with themseleves as its assumed they are coming from different things." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.BonusType"/>
    <fieldval field="pCandExpr" value="component.BaseWep &amp; (IsWeapon.wTouch|IsWeapon.wRay)"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Set focus to the chosen Pick
      perform field[pChosen].chosen.setfocus
      doneif (state.isfocus = 0)

      call S2AdjBon2]]></eval>
    </thing>
  <thing id="pS2SheetIt" name="Character Sheet: Specific Item" description="Select this adjustment to cause the single selected item to print to your character sheet.  This is useful where some gear items like Alchemist&apos;s Fire does not print its details." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not in output mode, don't do anything
      doneif (state.isoutput = 0)

      perform field[pChosen].chosen.assign[Helper.ShowSpec]
      perform field[pChosen].chosen.delete[Helper.SpecUp]]]></eval>
    </thing>
  <thing id="pS2SheetCB" name="Character Sheet: Custom Abilities" description="Select this adjustment to cause the single selected Custom Abilty (Rage Power, Warpriest Blessing, Alchmist Discovery, etc) to print to your character sheet. This is useful where some class abilities like a warpriest blessing does not print its details." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseCustSp"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      ~ If we're not in output mode, don't do anything
      doneif (state.isoutput = 0)

      perform field[pChosen].chosen.assign[Helper.ShowSpec]
      perform field[pChosen].chosen.delete[Helper.SpecUp]]]></eval>
    </thing>
  <thing id="pS2AllowDo" name="Allow Domain" description="Use this adjustment to allow any additional valid domains for your character.  In example if you deity does not normally allow the Air domain you can use this adjustment to make Air a valid domain choice for your deity." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseClrDom"/>
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ Check to see if a class was chosen
      doneif (field[pChosen].ischosen = 0)

      ~ Pull the Allowed Domain tag
      perform field[pChosen].chosen.pulltags[AllowDom.?]

      ~ Push the Allowed Domain tag to the hero
      perform hero.pushtags[AllowDom.?]]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ Select Domain Things &
      field[pUsePicks].value = 0]]></eval>
    </thing>
  <thing id="pS2AllowLa" name="Allow Starting Language" description="Use this adjustment to allow any additional valid starting languages for your character.  In example if you race does not norally allow choosing Gnome language you can use this adjustment to make Gnome a valid choice for your character." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseLang"/>
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ Check to see if a class was chosen
      doneif (field[pChosen].ischosen = 0)

      ~ Pull the Language tag
      perform field[pChosen].chosen.pulltags[Language.?]

      ~ Push the Language tag to the hero
      perform hero.pushtags[Language.?]]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[
      ~ Select Domain Things &
      field[pUsePicks].value = 0]]></eval>
    </thing>
  <thing id="pS2PFSlang" name="PFS, Language" description="Adding this adjustment will make a language legal for Pathfinder Society Characters (including &quot;Core Only Campaign&quot;).\n\n{b}Note:{/b} If you enter text into the &quot;Source&quot; below then it will be appended to the race name. This allows you to easily note which boon is making this race as valid." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseLang"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="PFS"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Remove the not valid for PFS tag
      perform field[pChosen].chosen.delete[Helper.NoPathSoc]
      ~ Allowed for PFS Core Campaign
      perform field[pChosen].chosen.assign[Helper.CoreCampOK]
      ~ Add skip pre-req tag
      perform field[pChosen].chosen.assign[thing.skipprereq]]]></eval>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append Source/Duration text onto Pick name
      Call S2PFSName]]></eval>
    </thing>
  <thing id="pS2HdPFS" name="{bmp npcclass} Pathfinder Society {bmp npcclass}" description="Adjustments in this category allow for setting specail Boons that allow things not nrormally allowed for PFS or PFS Core characters." compset="InPlay" uniqueness="unique" isshowonly="yes">
    <tag group="OthAdjCat" tag="PFS"/>
    </thing>
  <thing id="pS2svAbili" name="Saving Throw Ability Score" description="Select this adjustment to change the ability score that is associated to a specific saving throw.  In example you could change Will saves to use Charisma instead of Wisdom." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSave &amp; !Helper.AllSaves"/>
    <fieldval field="pCandExpr2" value="component.BaseAttr"/>
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="Saves"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If nothing chosen, get out now &
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      ~ Get the Save Override tag from the ability score
      perform field[pChosen2].chosen.pulltags[SaveOver.?]

      ~ Push the save override tag to the saving throw
      perform field[pChosen].chosen.pushtags[SaveOver.?]]]></eval>
    <eval phase="PreLevel" priority="11000" index="2">~ Picks on Hero
      field[pUsePicks].value = 1</eval>
    </thing>
  <thing id="pS2RaceAbi" name="Race, Custom Ability" description="Use this adjustment to add a generic ability to your character. You will be able to set the abilities name and description text up to 100 characters. Use the dropdown selector to pick the ability type: Ex = Extraordinary; Sp = Spell-like; Su = Supernatural." compset="InPlay">
    <fieldval field="pSource" value="Name"/>
    <fieldval field="pDuration" value="Text"/>
    <fieldval field="pCandExpr" value="component.SelectHelp &amp; Selection.AbilType"/>
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <bootstrap thing="pS2GenAbil"></bootstrap>
    </thing>
  <thing id="pS2GenAbil" name="Generic Ability" compset="GenericAb">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ Note this component set will not be visable in the editor.

      ~ If we're not bootstrapped to something, get out now!
      doneif (isroot = 0)
      ~ If the root is not an adjustment, get out now!
      doneif (root.tagis[component.BaseAdjust] = 0)

      ~ Set the live name by pulling from the adjustments source
      field[livename].text = root.field[pSource].text

      ~ Set the custom description by pulling from the adjustments
      ~ duration field.
      field[CustDesc].text = root.field[pDuration].text

      ~ If nothing chosen, get out now &
      doneif (root.field[pChosen].ischosen = 0)

      ~ Remove any current ability types
      perform delete[AbilType.?]

      ~ Pull our ability type tag from the one chosen
      perform root.field[pChosen].chosen.pulltags[AbilType.?]]]></eval>
    </thing>
  <thing id="pS2TWFpen" name="Two-Weapon Fighting Penalties" description="Use this adjustment to decrease the two-weapon fighting penalty from -2 to -1 or 0.  This uses similar logic to the Two-Weapon Warrior fighter archetype." compset="InPlay">
    <fieldval field="pUsePicks" value="1"/>
    <fieldval field="pMinimum" value="0"/>
    <fieldval field="pMaximum" value="2"/>
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="AttDam"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      var iX as number

      ~ Add number of Improved Balance tags here
      for iX = 1 to field[pAdjust].value
        perform hero.assign[Hero.ImpBalance]
      next]]></eval>
    </thing>
  <thing id="pS2SpAdd" name="Spell-Like Ability, Add" description="This adjustment lets you add a spell-like ability to any character/race that will display as a spell-like ability on the Spells tab.  The spell-like ability will have full spell text and usages.\n\n{b}Note:{/b} From the first dropdown select the spell that is to become the spell-like ability. The second dropdown lets you select the usage (ie /day or /month or At-Will).  The counter lets you set the number of uses (2/day, 3/day etc.).  Finally you can type over the &quot;Ability Text&quot; to enter any notes or information you would like to appear on the spell-like ability." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell &amp; !Helper.Helper"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; Selection.Usage"/>
    <fieldval field="pSource" value="Ability Text"/>
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="pS2GenSp"></bootstrap>
    <eval phase="PreLevel" priority="11000"><![CDATA[
      ~ Things on Hero Not Picks &!
      field[pUsePicks].value = 0]]></eval>
    </thing>
  <thing id="pS2GenSp" name="Spell-Like Ability" compset="GenericAb">
    <usesource source="srcS2Adjus"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="SpellLike"/>
    <tag group="AbilType" tag="SpellLike"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ Note this component set will not be visable in the editor. &

      ~ Remove the Ex abiliy type tag
      perform delete[AbilType.Extra]

      ~ If we're not bootstrapped to something, get out now!
      doneif (isroot = 0)
      ~ If the root is not an adjustment, get out now!
      doneif (root.tagis[component.BaseAdjust] = 0)

      ~ Set the custom description by pulling from the
      ~ adjustments "Source" field. This way we can work
      ~ on the Personal tab.
      field[CustDesc].text = root.field[pSource].text

      ~ If a spell chosen
      if (root.field[pChosen].ischosen <> 0) then
        ~ Pull the Spell-Info tag and assign to ourself
        perform root.field[pChosen].chosen.pulltags[SpInfo.?]
        ~ Set our name to the selected spell
        field[livename].text = root.field[pChosen].chosen.field[name].text
      endif

      ~ If a usage tag selected
      if (root.field[pChosen2].ischosen <> 0) then
        ~ Pull the Usage tag and assign to ourself
        perform root.field[pChosen2].chosen.pulltags[Usage.?]
        ~ Set number of uses
        field[trkMax].value += root.field[pAdjust].value
      endif]]></eval>
    </thing>
  <thing id="pS2ClsSW01" name="Class, Starting Wealth (Bonus)" description="Select this adjustment to be able to change your class&apos; starting wealth bonus gold.  Starting wealth can be given a bonus amount of gold that is added in &quot;after&quot; the dice are rolled." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <eval phase="First" priority="150" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      perform hero.findchild[BaseClLev,"fieldval:cIndex = 1"].setfocus
      doneif (state.isfocus = 0)

      ~ Increase/Decrease Starting Wealth bonusvalue
      focus.linkage[helper].field[cSCRBonus].value = field[pAdjust].value]]></eval>
    </thing>
  <thing id="pS2ClsStrW" name="Class, Starting Wealth" description="Select this adjustment to be able to change your starting wealth dice and multiplier.  The first drop down lets you select the &quot;number of dice&quot;. The second drop down lets you select the &quot;dice size&quot; and finally the counter lets you set the multiplier value.\n\nIn example if you select 02, d12, and counter set to 15 your character wealth would be 2d12x15." compset="InPlay">
    <fieldval field="pCandExpr" value="component.SelectHelp &amp; PackSelect.Numbers"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; PackSelect.DiceSize"/>
    <fieldval field="pMinimum" value="1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <eval phase="First" priority="150"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)
      doneif (field[pChosen2].ischosen <> 1)

      perform hero.findchild[BaseClLev,"fieldval:cIndex = 1"].setfocus
      doneif (state.isfocus = 0)

      ~ Increase/Decrease Starting Wealth multipler value
      focus.linkage[helper].field[cSCRMult].value = field[pAdjust].value

      ~ Increase/Decrease number of dice of Starting Wealth
      focus.linkage[helper].field[cSCRNumDce].value = field[pChosen].chosen.tagvalue[Value.?]

      ~ Set Starting Wealth dice size (ie d4,d6,d8)
      focus.linkage[helper].field[cSCRDceSiz].value = field[pChosen2].chosen.tagvalue[Value.?]]]></eval>
    </thing>
  <thing id="pS2ClsSW02" name="Class, Starting Wealth (Hide)" description="Select this adjustment to be able to force hide the &quot;Starting Wealth&quot; section of the Classes tab. This can be helpful for DM&apos;s that have set a specific amount of starting wealth in a template .por file to give to his players.  You can set the amount of gp on the classes tab, click accept, and then turn on this adjustment.  Now the &quot;Starting Wealth&quot; section is hidden." compset="InPlay">
    <usesource source="srcS2Adjus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="PreLevel" priority="5000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      perform hero.assign[Hero.StartCshFr]]]>
      <before name="gMoney automatically overrides own starting cash fields"/>
      </eval>
    </thing>
  <thing id="pS2MetaDec" name="Metamagic, Decrease" description="Select this adjustment to lower the amount of a metamagic feat.  In example Quicken metmagic normally increases a spell by +4.  By selecting Quicken from the dropdown and setting the counter -3 then spells will only be increased by +1 instead of +4." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseMetamg"/>
    <fieldval field="pMinimum" value="-10"/>
    <fieldval field="pMaximum" value="-1"/>
    <usesource source="srcS2Adjus"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="CoreCampOK"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <eval phase="Attr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      var iX as number
      var nAdjust as number
      nAdjust = field[pAdjust].value * -1
      ~ Pull the correct number of tags based on the counter
      while (iX < nAdjust)
        iX += 1
        ~ Pull the Reduce Metamagic Cost tag
        perform field[pChosen].chosen.pulltags[ReduMMCost.?]
      loop

      ~ Push tag(s) to the hero
      perform hero.pushtags[ReduMMCost.?]]]></eval>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ Set custom expression to "All Things on Hero"
      field[pUsePicks].value = 0]]></eval>
    </thing>
  </document>
